using System;
using System.Collections.Generic;
using BansheeGz.BGDatabase;
using Alias_rifegrt_unitBuildData = D_unitBuildData;
using Alias_rifegrt_SpecialTile = D_SpecialTile;
using Alias_rifegrt_UnitData = D_UnitData;
using Alias_rifegrt_EnemyData = D_EnemyData;
using Alias_rifegrt_enemyGroup = D_enemyGroup;
using Alias_rifegrt_BossBattleWaveData = D_BossBattleWaveData;
using Alias_rifegrt_enemyGroups = D_enemyGroups;
using Alias_rifegrt_eventEnemyGroups = D_eventEnemyGroups;
using Alias_rifegrt_HuntingOptionData = D_HuntingOptionData;
using Alias_rifegrt_supportEnemys = D_supportEnemys;
using Alias_rifegrt_supportEnemyGroups = D_supportEnemyGroups;
using Alias_rifegrt_TileCardData = D_TileCardData;
using Alias_rifegrt_StageData = D_StageData;
using Alias_rifegrt_WildCardWaveData = D_WildCardWaveData;
using Alias_rifegrt_WildCardData = D_WildCardData;
using Alias_rifegrt_HuntingSelectTimeWaveData = D_HuntingSelectTimeWaveData;

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

#pragma warning disable 414

public partial class D_TileCardData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_TileCardData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_TileCardData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "TileCardData";
		public const string name = "name";
		public const string unitBuildData = "unitBuildData";
		public const string grade = "grade";
		public const string Cost = "Cost";
		public const string isMultiTileUinit = "isMultiTileUinit";
		public const string multiTilePositions = "multiTilePositions";
		public const string TileShpae = "TileShpae";
		public const string ShopGrade = "ShopGrade";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5526519764914468050UL,4239600642928235181UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public List<D_unitBuildData> f_unitBuildData => BGCodeGenUtils.GetNested<D_unitBuildData>(_f_unitBuildData, Index);
	public BGDatabaseEnum.UnitGrade f_grade
	{
		get => (BGDatabaseEnum.UnitGrade) _f_grade.GetStoredValue(Index);
		set => _f_grade.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_Cost
	{
		get => _f_Cost[Index];
		set => _f_Cost[Index] = value;
	}
	public System.Boolean f_isMultiTileUinit
	{
		get => _f_isMultiTileUinit[Index];
		set => _f_isMultiTileUinit[Index] = value;
	}
	public List<D_TilePosData> f_multiTilePositions
	{
		get => BGCodeGenUtils.MultipleRelationGet<D_TilePosData>(_f_multiTilePositions, Index);
		set => BGCodeGenUtils.MultipleRelationSet<D_TilePosData>(_f_multiTilePositions, Index, value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4612699089538755472UL, 15389567449175696803UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_unitBuildData;
	public static BansheeGz.BGDatabase.BGFieldNested _f_unitBuildData => _ufle12jhs77_f_unitBuildData ?? (_ufle12jhs77_f_unitBuildData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5267104093635224925UL, 11893930471853365640UL), () => _ufle12jhs77_f_unitBuildData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_grade;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_grade => _ufle12jhs77_f_grade ?? (_ufle12jhs77_f_grade = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5085254489454765700UL, 2735600988159512248UL), () => _ufle12jhs77_f_grade = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_Cost;
	public static BansheeGz.BGDatabase.BGFieldInt _f_Cost => _ufle12jhs77_f_Cost ?? (_ufle12jhs77_f_Cost = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5033112527408708228UL, 18365848753655382442UL), () => _ufle12jhs77_f_Cost = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_isMultiTileUinit;
	public static BansheeGz.BGDatabase.BGFieldBool _f_isMultiTileUinit => _ufle12jhs77_f_isMultiTileUinit ?? (_ufle12jhs77_f_isMultiTileUinit = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5471129788307511410UL, 7282507863895441290UL), () => _ufle12jhs77_f_isMultiTileUinit = null));
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_multiTilePositions;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_multiTilePositions => _ufle12jhs77_f_multiTilePositions ?? (_ufle12jhs77_f_multiTilePositions = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationMultiple>(MetaDefault, new BGId(5319821696136987407UL, 15811925105260439733UL), () => _ufle12jhs77_f_multiTilePositions = null));
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_TileShpae;
	public static BansheeGz.BGDatabase.BGKey _TileShpae => _edeht3sdad33_TileShpae ?? (_edeht3sdad33_TileShpae = BGCodeGenUtils.GetKey(MetaDefault, new BGId(4974985753661443278UL, 14549488637077833392UL), () => _edeht3sdad33_TileShpae = null));
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_ShopGrade;
	public static BansheeGz.BGDatabase.BGKey _ShopGrade => _edeht3sdad33_ShopGrade ?? (_edeht3sdad33_ShopGrade = BGCodeGenUtils.GetKey(MetaDefault, new BGId(5679847359208220457UL, 15582120046338116030UL), () => _edeht3sdad33_ShopGrade = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_TileCardData() : base(MetaDefault) {}
	private D_TileCardData(BGId id) : base(MetaDefault, id) {}
	private D_TileCardData(BGMetaEntity meta) : base(meta) {}
	private D_TileCardData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_TileCardData FindEntity(Predicate<D_TileCardData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_TileCardData> FindEntities(Predicate<D_TileCardData> filter, List<D_TileCardData> result=null, Comparison<D_TileCardData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_TileCardData> action, Predicate<D_TileCardData> filter=null, Comparison<D_TileCardData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_TileCardData GetEntity(BGId entityId) => (D_TileCardData) MetaDefault.GetEntity(entityId);
	public static D_TileCardData GetEntity(int index) => (D_TileCardData) MetaDefault[index];
	public static D_TileCardData GetEntity(string entityName) => (D_TileCardData) MetaDefault.GetEntity(entityName);
	public static D_TileCardData NewEntity() => (D_TileCardData) MetaDefault.NewEntity();
	public static D_TileCardData NewEntity(BGId entityId) => (D_TileCardData) MetaDefault.NewEntity(entityId);
	public static D_TileCardData NewEntity(Action<D_TileCardData> callback) => (D_TileCardData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_TileCardData)entity)));
	public void f_multiTilePositions_Add(D_TilePosData related) => BGCodeGenUtils.MultipleRelationAdd(_f_multiTilePositions, Index, related);
	public void f_multiTilePositions_Remove(D_TilePosData related) => BGCodeGenUtils.MultipleRelationRemove(_f_multiTilePositions, Index, related);
	public static D_TileCardData GetEntityByKeyTileShpae(System.String name) => (D_TileCardData) _TileShpae.GetEntityByKey<System.String>(name);
	public static D_TileCardData GetEntityByKeyShopGrade(BGDatabaseEnum.UnitGrade grade) => (D_TileCardData) _ShopGrade.GetEntityByKey<BGDatabaseEnum.UnitGrade>(grade);
}

public partial class D_LocalUserData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_LocalUserData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_LocalUserData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "LocalUserData";
		public const string name = "name";
		public const string clearEpisodeNumber = "clearEpisodeNumber";
		public const string lastClearedStageNumber = "lastClearedStageNumber";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4625932937206405802UL,11707112876743021752UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_clearEpisodeNumber
	{
		get => _f_clearEpisodeNumber[Index];
		set => _f_clearEpisodeNumber[Index] = value;
	}
	public System.Int32 f_lastClearedStageNumber
	{
		get => _f_lastClearedStageNumber[Index];
		set => _f_lastClearedStageNumber[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5570864947923372496UL, 16114093359231942036UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_clearEpisodeNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_clearEpisodeNumber => _ufle12jhs77_f_clearEpisodeNumber ?? (_ufle12jhs77_f_clearEpisodeNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5371381866835969752UL, 2168720030824874419UL), () => _ufle12jhs77_f_clearEpisodeNumber = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_lastClearedStageNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_lastClearedStageNumber => _ufle12jhs77_f_lastClearedStageNumber ?? (_ufle12jhs77_f_lastClearedStageNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5612662480888816242UL, 14296249210567434408UL), () => _ufle12jhs77_f_lastClearedStageNumber = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_LocalUserData() : base(MetaDefault) {}
	private D_LocalUserData(BGId id) : base(MetaDefault, id) {}
	private D_LocalUserData(BGMetaEntity meta) : base(meta) {}
	private D_LocalUserData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_LocalUserData FindEntity(Predicate<D_LocalUserData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_LocalUserData> FindEntities(Predicate<D_LocalUserData> filter, List<D_LocalUserData> result=null, Comparison<D_LocalUserData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_LocalUserData> action, Predicate<D_LocalUserData> filter=null, Comparison<D_LocalUserData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_LocalUserData GetEntity(BGId entityId) => (D_LocalUserData) MetaDefault.GetEntity(entityId);
	public static D_LocalUserData GetEntity(int index) => (D_LocalUserData) MetaDefault[index];
	public static D_LocalUserData GetEntity(string entityName) => (D_LocalUserData) MetaDefault.GetEntity(entityName);
	public static D_LocalUserData NewEntity() => (D_LocalUserData) MetaDefault.NewEntity();
	public static D_LocalUserData NewEntity(BGId entityId) => (D_LocalUserData) MetaDefault.NewEntity(entityId);
	public static D_LocalUserData NewEntity(Action<D_LocalUserData> callback) => (D_LocalUserData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_LocalUserData)entity)));
}

public partial class D_UnitData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_UnitData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_UnitData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "UnitData";
		public const string name = "name";
		public const string UnitType = "UnitType";
		public const string StatSubject = "StatSubject";
		public const string SkillAttackType = "SkillAttackType";
		public const string UnitPoolingKey = "UnitPoolingKey";
		public const string SkillPoolingKey = "SkillPoolingKey";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5098187849243670608UL,7590059858118427043UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public UnitType f_UnitType
	{
		get => (UnitType) _f_UnitType.GetStoredValue(Index);
		set => _f_UnitType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<StatSubject> f_StatSubject
	{
		get => BGCodeGenUtils.EnumListGet<StatSubject>(_f_StatSubject, Index);
		set => BGCodeGenUtils.EnumListSet<StatSubject>(_f_StatSubject, Index, value);
	}
	public BGDatabaseEnum.SkillAttackType f_SkillAttackType
	{
		get => (BGDatabaseEnum.SkillAttackType) _f_SkillAttackType.GetStoredValue(Index);
		set => _f_SkillAttackType.SetStoredValue(Index, (System.Int32) value);
	}
	public D_ObjectPoolData f_UnitPoolingKey
	{
		get => (D_ObjectPoolData) _f_UnitPoolingKey[Index];
		set => _f_UnitPoolingKey[Index] = value;
	}
	public D_ObjectPoolData f_SkillPoolingKey
	{
		get => (D_ObjectPoolData) _f_SkillPoolingKey[Index];
		set => _f_SkillPoolingKey[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4978381386621882592UL, 9377071611302703509UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_UnitType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_UnitType => _ufle12jhs77_f_UnitType ?? (_ufle12jhs77_f_UnitType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4766701231171255779UL, 8920734757428101046UL), () => _ufle12jhs77_f_UnitType = null));
	private static BansheeGz.BGDatabase.BGFieldEnumList _ufle12jhs77_f_StatSubject;
	public static BansheeGz.BGDatabase.BGFieldEnumList _f_StatSubject => _ufle12jhs77_f_StatSubject ?? (_ufle12jhs77_f_StatSubject = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnumList>(MetaDefault, new BGId(5195431396154430378UL, 4516171086743362447UL), () => _ufle12jhs77_f_StatSubject = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_SkillAttackType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_SkillAttackType => _ufle12jhs77_f_SkillAttackType ?? (_ufle12jhs77_f_SkillAttackType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5274816935596477599UL, 15588288739445877685UL), () => _ufle12jhs77_f_SkillAttackType = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_UnitPoolingKey;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_UnitPoolingKey => _ufle12jhs77_f_UnitPoolingKey ?? (_ufle12jhs77_f_UnitPoolingKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4766850798404632622UL, 6480570574369079984UL), () => _ufle12jhs77_f_UnitPoolingKey = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_SkillPoolingKey;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_SkillPoolingKey => _ufle12jhs77_f_SkillPoolingKey ?? (_ufle12jhs77_f_SkillPoolingKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4721613304390874734UL, 7492828072908847792UL), () => _ufle12jhs77_f_SkillPoolingKey = null));
	public List<Alias_rifegrt_unitBuildData> RelatedunitBuildDataListUsingunitDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_unitBuildData>(Alias_rifegrt_unitBuildData._f_unitData, Id);
	public List<Alias_rifegrt_SpecialTile> RelatedSpecialTileListUsingspecialObjectRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_SpecialTile>(Alias_rifegrt_SpecialTile._f_specialObject, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_UnitData() : base(MetaDefault) {}
	private D_UnitData(BGId id) : base(MetaDefault, id) {}
	private D_UnitData(BGMetaEntity meta) : base(meta) {}
	private D_UnitData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_UnitData FindEntity(Predicate<D_UnitData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_UnitData> FindEntities(Predicate<D_UnitData> filter, List<D_UnitData> result=null, Comparison<D_UnitData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_UnitData> action, Predicate<D_UnitData> filter=null, Comparison<D_UnitData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_UnitData GetEntity(BGId entityId) => (D_UnitData) MetaDefault.GetEntity(entityId);
	public static D_UnitData GetEntity(int index) => (D_UnitData) MetaDefault[index];
	public static D_UnitData GetEntity(string entityName) => (D_UnitData) MetaDefault.GetEntity(entityName);
	public static D_UnitData NewEntity() => (D_UnitData) MetaDefault.NewEntity();
	public static D_UnitData NewEntity(BGId entityId) => (D_UnitData) MetaDefault.NewEntity(entityId);
	public static D_UnitData NewEntity(Action<D_UnitData> callback) => (D_UnitData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_UnitData)entity)));
}

public partial class D_unitBuildData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_unitBuildData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_unitBuildData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "unitBuildData";
		public const string name = "name";
		public const string TileCardDa = "TileCardDa";
		public const string unitData = "unitData";
		public const string TilePos = "TilePos";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4799327628856687378UL,3776090101215706293UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_TileCardData f_TileCardDa
	{
		get => (D_TileCardData) _f_TileCardDa[Index];
		set => _f_TileCardDa[Index] = value;
	}
	public D_UnitData f_unitData
	{
		get => (D_UnitData) _f_unitData[Index];
		set => _f_unitData[Index] = value;
	}
	public D_TilePosData f_TilePos
	{
		get => (D_TilePosData) _f_TilePos[Index];
		set => _f_TilePos[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5119949781748048341UL, 1974210095801998015UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_TileCardDa;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_TileCardDa => _ufle12jhs77_f_TileCardDa ?? (_ufle12jhs77_f_TileCardDa = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5201128059908877541UL, 10865111936391984023UL), () => _ufle12jhs77_f_TileCardDa = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_unitData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_unitData => _ufle12jhs77_f_unitData ?? (_ufle12jhs77_f_unitData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4832644335004946023UL, 16677909979451640761UL), () => _ufle12jhs77_f_unitData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_TilePos;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_TilePos => _ufle12jhs77_f_TilePos ?? (_ufle12jhs77_f_TilePos = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5477621657986745158UL, 3293241283015388857UL), () => _ufle12jhs77_f_TilePos = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_unitBuildData() : base(MetaDefault) {}
	private D_unitBuildData(BGId id) : base(MetaDefault, id) {}
	private D_unitBuildData(BGMetaEntity meta) : base(meta) {}
	private D_unitBuildData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_unitBuildData FindEntity(Predicate<D_unitBuildData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_unitBuildData> FindEntities(Predicate<D_unitBuildData> filter, List<D_unitBuildData> result=null, Comparison<D_unitBuildData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_unitBuildData> action, Predicate<D_unitBuildData> filter=null, Comparison<D_unitBuildData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_unitBuildData GetEntity(BGId entityId) => (D_unitBuildData) MetaDefault.GetEntity(entityId);
	public static D_unitBuildData GetEntity(int index) => (D_unitBuildData) MetaDefault[index];
	public static D_unitBuildData GetEntity(string entityName) => (D_unitBuildData) MetaDefault.GetEntity(entityName);
	public static D_unitBuildData NewEntity() => (D_unitBuildData) MetaDefault.NewEntity();
	public static D_unitBuildData NewEntity(BGId entityId) => (D_unitBuildData) MetaDefault.NewEntity(entityId);
	public static D_unitBuildData NewEntity(Action<D_unitBuildData> callback) => (D_unitBuildData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_unitBuildData)entity)));
	public static D_unitBuildData NewEntity(D_TileCardData owner) => (D_unitBuildData) MetaDefault.NewEntity(owner);
	public static D_unitBuildData NewEntity(D_TileCardData owner, BGId entityId) => (D_unitBuildData) MetaDefault.NewEntity(owner, entityId);
	public static D_unitBuildData NewEntity(D_TileCardData owner, Action<D_unitBuildData> callback) => (D_unitBuildData) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_unitBuildData)entity)));
}

public partial class D_UnitShopChanceData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_UnitShopChanceData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_UnitShopChanceData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "UnitShopChanceData";
		public const string name = "name";
		public const string shopLevel = "shopLevel";
		public const string upgradeCost = "upgradeCost";
		public const string normalGradeChance = "normalGradeChance";
		public const string rareGradeChance = "rareGradeChance";
		public const string epicGradeChance = "epicGradeChance";
		public const string legendaryGradeChance = "legendaryGradeChance";
		public const string mythicGradeChance = "mythicGradeChance";
		public const string ShopLevel = "ShopLevel";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4664970763188900203UL,12080311741352732819UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_shopLevel
	{
		get => _f_shopLevel[Index];
		set => _f_shopLevel[Index] = value;
	}
	public System.Int32 f_upgradeCost
	{
		get => _f_upgradeCost[Index];
		set => _f_upgradeCost[Index] = value;
	}
	public System.Int32 f_normalGradeChance
	{
		get => _f_normalGradeChance[Index];
		set => _f_normalGradeChance[Index] = value;
	}
	public System.Int32 f_rareGradeChance
	{
		get => _f_rareGradeChance[Index];
		set => _f_rareGradeChance[Index] = value;
	}
	public System.Int32 f_epicGradeChance
	{
		get => _f_epicGradeChance[Index];
		set => _f_epicGradeChance[Index] = value;
	}
	public System.Int32 f_legendaryGradeChance
	{
		get => _f_legendaryGradeChance[Index];
		set => _f_legendaryGradeChance[Index] = value;
	}
	public System.Int32 f_mythicGradeChance
	{
		get => _f_mythicGradeChance[Index];
		set => _f_mythicGradeChance[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5700037316086172204UL, 9428115730578618498UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_shopLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _f_shopLevel => _ufle12jhs77_f_shopLevel ?? (_ufle12jhs77_f_shopLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5209453747907503739UL, 16616529657275590799UL), () => _ufle12jhs77_f_shopLevel = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_upgradeCost;
	public static BansheeGz.BGDatabase.BGFieldInt _f_upgradeCost => _ufle12jhs77_f_upgradeCost ?? (_ufle12jhs77_f_upgradeCost = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5544517854502321174UL, 16527826181851315888UL), () => _ufle12jhs77_f_upgradeCost = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_normalGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_normalGradeChance => _ufle12jhs77_f_normalGradeChance ?? (_ufle12jhs77_f_normalGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4747667146126538070UL, 10838641894382133891UL), () => _ufle12jhs77_f_normalGradeChance = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_rareGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_rareGradeChance => _ufle12jhs77_f_rareGradeChance ?? (_ufle12jhs77_f_rareGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4800310075837301652UL, 15965513266530679210UL), () => _ufle12jhs77_f_rareGradeChance = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_epicGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_epicGradeChance => _ufle12jhs77_f_epicGradeChance ?? (_ufle12jhs77_f_epicGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5751856468742030222UL, 11431852624877671084UL), () => _ufle12jhs77_f_epicGradeChance = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_legendaryGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_legendaryGradeChance => _ufle12jhs77_f_legendaryGradeChance ?? (_ufle12jhs77_f_legendaryGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5357090667896251197UL, 8100459591133873333UL), () => _ufle12jhs77_f_legendaryGradeChance = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_mythicGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_mythicGradeChance => _ufle12jhs77_f_mythicGradeChance ?? (_ufle12jhs77_f_mythicGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5683072619301050186UL, 1397330924013920176UL), () => _ufle12jhs77_f_mythicGradeChance = null));
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_ShopLevel;
	public static BansheeGz.BGDatabase.BGKey _ShopLevel => _edeht3sdad33_ShopLevel ?? (_edeht3sdad33_ShopLevel = BGCodeGenUtils.GetKey(MetaDefault, new BGId(5047775113214466118UL, 10985792114965795003UL), () => _edeht3sdad33_ShopLevel = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_UnitShopChanceData() : base(MetaDefault) {}
	private D_UnitShopChanceData(BGId id) : base(MetaDefault, id) {}
	private D_UnitShopChanceData(BGMetaEntity meta) : base(meta) {}
	private D_UnitShopChanceData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_UnitShopChanceData FindEntity(Predicate<D_UnitShopChanceData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_UnitShopChanceData> FindEntities(Predicate<D_UnitShopChanceData> filter, List<D_UnitShopChanceData> result=null, Comparison<D_UnitShopChanceData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_UnitShopChanceData> action, Predicate<D_UnitShopChanceData> filter=null, Comparison<D_UnitShopChanceData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_UnitShopChanceData GetEntity(BGId entityId) => (D_UnitShopChanceData) MetaDefault.GetEntity(entityId);
	public static D_UnitShopChanceData GetEntity(int index) => (D_UnitShopChanceData) MetaDefault[index];
	public static D_UnitShopChanceData GetEntity(string entityName) => (D_UnitShopChanceData) MetaDefault.GetEntity(entityName);
	public static D_UnitShopChanceData NewEntity() => (D_UnitShopChanceData) MetaDefault.NewEntity();
	public static D_UnitShopChanceData NewEntity(BGId entityId) => (D_UnitShopChanceData) MetaDefault.NewEntity(entityId);
	public static D_UnitShopChanceData NewEntity(Action<D_UnitShopChanceData> callback) => (D_UnitShopChanceData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_UnitShopChanceData)entity)));
	public static D_UnitShopChanceData GetEntityByKeyShopLevel(System.Int32 shopLevel) => (D_UnitShopChanceData) _ShopLevel.GetEntityByKey<System.Int32>(shopLevel);
}

public partial class D_ObjectPoolData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_ObjectPoolData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_ObjectPoolData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "ObjectPoolData";
		public const string name = "name";
		public const string initialSize = "initialSize";
		public const string PoolObjectAddressableKey = "PoolObjectAddressableKey";
		public const string SceneType = "SceneType";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5551840002734483211UL,1845652086390232738UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_initialSize
	{
		get => _f_initialSize[Index];
		set => _f_initialSize[Index] = value;
	}
	public System.String f_PoolObjectAddressableKey
	{
		get => _f_PoolObjectAddressableKey[Index];
		set => _f_PoolObjectAddressableKey[Index] = value;
	}
	public BGDatabaseEnum.SceneType f_SceneType
	{
		get => (BGDatabaseEnum.SceneType) _f_SceneType.GetStoredValue(Index);
		set => _f_SceneType.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4726680117178046135UL, 7587749471834620314UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_initialSize;
	public static BansheeGz.BGDatabase.BGFieldInt _f_initialSize => _ufle12jhs77_f_initialSize ?? (_ufle12jhs77_f_initialSize = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5695250943508857660UL, 15712297599622700168UL), () => _ufle12jhs77_f_initialSize = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_PoolObjectAddressableKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_PoolObjectAddressableKey => _ufle12jhs77_f_PoolObjectAddressableKey ?? (_ufle12jhs77_f_PoolObjectAddressableKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5761746857104736445UL, 14334273623888862142UL), () => _ufle12jhs77_f_PoolObjectAddressableKey = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_SceneType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_SceneType => _ufle12jhs77_f_SceneType ?? (_ufle12jhs77_f_SceneType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5559553276269621835UL, 2058884527795876747UL), () => _ufle12jhs77_f_SceneType = null));
	public List<Alias_rifegrt_UnitData> RelatedUnitDataListUsingUnitPoolingKeyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_UnitData>(Alias_rifegrt_UnitData._f_UnitPoolingKey, Id);
	public List<Alias_rifegrt_UnitData> RelatedUnitDataListUsingSkillPoolingKeyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_UnitData>(Alias_rifegrt_UnitData._f_SkillPoolingKey, Id);
	public List<Alias_rifegrt_EnemyData> RelatedEnemyDataListUsingObjectPoolKeyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_EnemyData>(Alias_rifegrt_EnemyData._f_ObjectPoolKey, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_ObjectPoolData() : base(MetaDefault) {}
	private D_ObjectPoolData(BGId id) : base(MetaDefault, id) {}
	private D_ObjectPoolData(BGMetaEntity meta) : base(meta) {}
	private D_ObjectPoolData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_ObjectPoolData FindEntity(Predicate<D_ObjectPoolData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_ObjectPoolData> FindEntities(Predicate<D_ObjectPoolData> filter, List<D_ObjectPoolData> result=null, Comparison<D_ObjectPoolData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_ObjectPoolData> action, Predicate<D_ObjectPoolData> filter=null, Comparison<D_ObjectPoolData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_ObjectPoolData GetEntity(BGId entityId) => (D_ObjectPoolData) MetaDefault.GetEntity(entityId);
	public static D_ObjectPoolData GetEntity(int index) => (D_ObjectPoolData) MetaDefault[index];
	public static D_ObjectPoolData GetEntity(string entityName) => (D_ObjectPoolData) MetaDefault.GetEntity(entityName);
	public static D_ObjectPoolData NewEntity() => (D_ObjectPoolData) MetaDefault.NewEntity();
	public static D_ObjectPoolData NewEntity(BGId entityId) => (D_ObjectPoolData) MetaDefault.NewEntity(entityId);
	public static D_ObjectPoolData NewEntity(Action<D_ObjectPoolData> callback) => (D_ObjectPoolData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_ObjectPoolData)entity)));
}

public partial class D_WaveData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_WaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_WaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "WaveData";
		public const string name = "name";
		public const string SpawnEnemyName = "SpawnEnemyName";
		public const string enemyGroup = "enemyGroup";
		public const string WaveTimeData = "WaveTimeData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4778501538320982376UL,14576375936561994928UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.String f_SpawnEnemyName
	{
		get => _f_SpawnEnemyName[Index];
		set => _f_SpawnEnemyName[Index] = value;
	}
	public List<D_enemyGroup> f_enemyGroup => BGCodeGenUtils.GetNested<D_enemyGroup>(_f_enemyGroup, Index);
	public List<D_WaveTimeData> f_WaveTimeData => BGCodeGenUtils.GetNested<D_WaveTimeData>(_f_WaveTimeData, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4703004299164658167UL, 14816338927607609278UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SpawnEnemyName;
	public static BansheeGz.BGDatabase.BGFieldString _f_SpawnEnemyName => _ufle12jhs77_f_SpawnEnemyName ?? (_ufle12jhs77_f_SpawnEnemyName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5304298841188339061UL, 3832707851484607413UL), () => _ufle12jhs77_f_SpawnEnemyName = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_enemyGroup;
	public static BansheeGz.BGDatabase.BGFieldNested _f_enemyGroup => _ufle12jhs77_f_enemyGroup ?? (_ufle12jhs77_f_enemyGroup = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(4964147500182563407UL, 2594969801821498292UL), () => _ufle12jhs77_f_enemyGroup = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_WaveTimeData;
	public static BansheeGz.BGDatabase.BGFieldNested _f_WaveTimeData => _ufle12jhs77_f_WaveTimeData ?? (_ufle12jhs77_f_WaveTimeData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5680194706508451098UL, 14412226580719047576UL), () => _ufle12jhs77_f_WaveTimeData = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_WaveData() : base(MetaDefault) {}
	private D_WaveData(BGId id) : base(MetaDefault, id) {}
	private D_WaveData(BGMetaEntity meta) : base(meta) {}
	private D_WaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_WaveData FindEntity(Predicate<D_WaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_WaveData> FindEntities(Predicate<D_WaveData> filter, List<D_WaveData> result=null, Comparison<D_WaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_WaveData> action, Predicate<D_WaveData> filter=null, Comparison<D_WaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_WaveData GetEntity(BGId entityId) => (D_WaveData) MetaDefault.GetEntity(entityId);
	public static D_WaveData GetEntity(int index) => (D_WaveData) MetaDefault[index];
	public static D_WaveData GetEntity(string entityName) => (D_WaveData) MetaDefault.GetEntity(entityName);
	public static D_WaveData NewEntity() => (D_WaveData) MetaDefault.NewEntity();
	public static D_WaveData NewEntity(BGId entityId) => (D_WaveData) MetaDefault.NewEntity(entityId);
	public static D_WaveData NewEntity(Action<D_WaveData> callback) => (D_WaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_WaveData)entity)));
}

public partial class D_StageData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_StageData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_StageData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "StageData";
		public const string name = "name";
		public const string EpisodeData = "EpisodeData";
		public const string StageNumber = "StageNumber";
		public const string StageDescription = "StageDescription";
		public const string WaveDummyData = "WaveDummyData";
		public const string StartTilePos = "StartTilePos";
		public const string EndTilePos = "EndTilePos";
		public const string mapData = "mapData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4767129084614671086UL,3391790421238320565UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_EpisodeData f_EpisodeData
	{
		get => (D_EpisodeData) _f_EpisodeData[Index];
		set => _f_EpisodeData[Index] = value;
	}
	public System.Int32 f_StageNumber
	{
		get => _f_StageNumber[Index];
		set => _f_StageNumber[Index] = value;
	}
	public System.String f_StageDescription
	{
		get => _f_StageDescription[Index];
		set => _f_StageDescription[Index] = value;
	}
	public List<D_WaveDummyData> f_WaveDummyData
	{
		get => BGCodeGenUtils.MultipleViewRelationGet<D_WaveDummyData>(_f_WaveDummyData, Index);
		set => BGCodeGenUtils.MultipleViewRelationSet<D_WaveDummyData>(_f_WaveDummyData, Index, value);
	}
	public UnityEngine.Vector2 f_StartTilePos
	{
		get => _f_StartTilePos[Index];
		set => _f_StartTilePos[Index] = value;
	}
	public UnityEngine.Vector2 f_EndTilePos
	{
		get => _f_EndTilePos[Index];
		set => _f_EndTilePos[Index] = value;
	}
	public D_MapData f_mapData
	{
		get => (D_MapData) _f_mapData[Index];
		set => _f_mapData[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5107560990730887598UL, 14806839362490910632UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_EpisodeData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_EpisodeData => _ufle12jhs77_f_EpisodeData ?? (_ufle12jhs77_f_EpisodeData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4784008122447646202UL, 13067861932297786298UL), () => _ufle12jhs77_f_EpisodeData = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_StageNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_StageNumber => _ufle12jhs77_f_StageNumber ?? (_ufle12jhs77_f_StageNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5727885512308789180UL, 5793001234893590713UL), () => _ufle12jhs77_f_StageNumber = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_StageDescription;
	public static BansheeGz.BGDatabase.BGFieldString _f_StageDescription => _ufle12jhs77_f_StageDescription ?? (_ufle12jhs77_f_StageDescription = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4735349357882227549UL, 15837191542169728688UL), () => _ufle12jhs77_f_StageDescription = null));
	private static BansheeGz.BGDatabase.BGFieldViewRelationMultiple _ufle12jhs77_f_WaveDummyData;
	public static BansheeGz.BGDatabase.BGFieldViewRelationMultiple _f_WaveDummyData => _ufle12jhs77_f_WaveDummyData ?? (_ufle12jhs77_f_WaveDummyData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldViewRelationMultiple>(MetaDefault, new BGId(5062158878899521107UL, 8254206695046802093UL), () => _ufle12jhs77_f_WaveDummyData = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_StartTilePos;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_StartTilePos => _ufle12jhs77_f_StartTilePos ?? (_ufle12jhs77_f_StartTilePos = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(5046214170933828315UL, 3336255239437776575UL), () => _ufle12jhs77_f_StartTilePos = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_EndTilePos;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_EndTilePos => _ufle12jhs77_f_EndTilePos ?? (_ufle12jhs77_f_EndTilePos = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(4852896796202598556UL, 14737165945497110928UL), () => _ufle12jhs77_f_EndTilePos = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_mapData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_mapData => _ufle12jhs77_f_mapData ?? (_ufle12jhs77_f_mapData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5561569271858242143UL, 14666200413546411709UL), () => _ufle12jhs77_f_mapData = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_StageData() : base(MetaDefault) {}
	private D_StageData(BGId id) : base(MetaDefault, id) {}
	private D_StageData(BGMetaEntity meta) : base(meta) {}
	private D_StageData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_StageData FindEntity(Predicate<D_StageData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_StageData> FindEntities(Predicate<D_StageData> filter, List<D_StageData> result=null, Comparison<D_StageData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_StageData> action, Predicate<D_StageData> filter=null, Comparison<D_StageData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_StageData GetEntity(BGId entityId) => (D_StageData) MetaDefault.GetEntity(entityId);
	public static D_StageData GetEntity(int index) => (D_StageData) MetaDefault[index];
	public static D_StageData GetEntity(string entityName) => (D_StageData) MetaDefault.GetEntity(entityName);
	public static D_StageData NewEntity() => (D_StageData) MetaDefault.NewEntity();
	public static D_StageData NewEntity(BGId entityId) => (D_StageData) MetaDefault.NewEntity(entityId);
	public static D_StageData NewEntity(Action<D_StageData> callback) => (D_StageData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_StageData)entity)));
}

public partial class D_EnemyData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_EnemyData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_EnemyData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "EnemyData";
		public const string name = "name";
		public const string ObjectPoolKey = "ObjectPoolKey";
		public const string statSubject = "statSubject";
		public const string DeathSpawnEnemyData = "DeathSpawnEnemyData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4684773675657008422UL,7413063395127074720UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_ObjectPoolData f_ObjectPoolKey
	{
		get => (D_ObjectPoolData) _f_ObjectPoolKey[Index];
		set => _f_ObjectPoolKey[Index] = value;
	}
	public List<StatSubject> f_statSubject
	{
		get => BGCodeGenUtils.EnumListGet<StatSubject>(_f_statSubject, Index);
		set => BGCodeGenUtils.EnumListSet<StatSubject>(_f_statSubject, Index, value);
	}
	public D_EnemyData f_DeathSpawnEnemyData
	{
		get => (D_EnemyData) _f_DeathSpawnEnemyData[Index];
		set => _f_DeathSpawnEnemyData[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4938102425506461035UL, 13729837135102970805UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_ObjectPoolKey;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_ObjectPoolKey => _ufle12jhs77_f_ObjectPoolKey ?? (_ufle12jhs77_f_ObjectPoolKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5127858403270080390UL, 8458190447950556807UL), () => _ufle12jhs77_f_ObjectPoolKey = null));
	private static BansheeGz.BGDatabase.BGFieldEnumList _ufle12jhs77_f_statSubject;
	public static BansheeGz.BGDatabase.BGFieldEnumList _f_statSubject => _ufle12jhs77_f_statSubject ?? (_ufle12jhs77_f_statSubject = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnumList>(MetaDefault, new BGId(4734131847471164176UL, 289550755626497706UL), () => _ufle12jhs77_f_statSubject = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_DeathSpawnEnemyData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_DeathSpawnEnemyData => _ufle12jhs77_f_DeathSpawnEnemyData ?? (_ufle12jhs77_f_DeathSpawnEnemyData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5729361341058934591UL, 7318033267427553926UL), () => _ufle12jhs77_f_DeathSpawnEnemyData = null));
	public List<Alias_rifegrt_EnemyData> RelatedEnemyDataListUsingDeathSpawnEnemyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_EnemyData>(Alias_rifegrt_EnemyData._f_DeathSpawnEnemyData, Id);
	public List<Alias_rifegrt_enemyGroup> RelatedenemyGroupListUsingenemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_enemyGroup>(Alias_rifegrt_enemyGroup._f_enemy, Id);
	public List<Alias_rifegrt_BossBattleWaveData> RelatedBossBattleWaveDataListUsingbossEnemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_BossBattleWaveData>(Alias_rifegrt_BossBattleWaveData._f_bossEnemy, Id);
	public List<Alias_rifegrt_enemyGroups> RelatedenemyGroupsListUsingenemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_enemyGroups>(Alias_rifegrt_enemyGroups._f_enemy, Id);
	public List<Alias_rifegrt_eventEnemyGroups> RelatedeventEnemyGroupsListUsingenemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_eventEnemyGroups>(Alias_rifegrt_eventEnemyGroups._f_enemy, Id);
	public List<Alias_rifegrt_HuntingOptionData> RelatedHuntingOptionDataListUsingspawnEnemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_HuntingOptionData>(Alias_rifegrt_HuntingOptionData._f_spawnEnemy, Id);
	public List<Alias_rifegrt_supportEnemys> RelatedsupportEnemysListUsingenemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_supportEnemys>(Alias_rifegrt_supportEnemys._f_enemy, Id);
	public List<Alias_rifegrt_supportEnemyGroups> RelatedsupportEnemyGroupsListUsingenemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_supportEnemyGroups>(Alias_rifegrt_supportEnemyGroups._f_enemy, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_EnemyData() : base(MetaDefault) {}
	private D_EnemyData(BGId id) : base(MetaDefault, id) {}
	private D_EnemyData(BGMetaEntity meta) : base(meta) {}
	private D_EnemyData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_EnemyData FindEntity(Predicate<D_EnemyData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_EnemyData> FindEntities(Predicate<D_EnemyData> filter, List<D_EnemyData> result=null, Comparison<D_EnemyData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_EnemyData> action, Predicate<D_EnemyData> filter=null, Comparison<D_EnemyData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_EnemyData GetEntity(BGId entityId) => (D_EnemyData) MetaDefault.GetEntity(entityId);
	public static D_EnemyData GetEntity(int index) => (D_EnemyData) MetaDefault[index];
	public static D_EnemyData GetEntity(string entityName) => (D_EnemyData) MetaDefault.GetEntity(entityName);
	public static D_EnemyData NewEntity() => (D_EnemyData) MetaDefault.NewEntity();
	public static D_EnemyData NewEntity(BGId entityId) => (D_EnemyData) MetaDefault.NewEntity(entityId);
	public static D_EnemyData NewEntity(Action<D_EnemyData> callback) => (D_EnemyData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_EnemyData)entity)));
}

public partial class D_enemyGroup : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_enemyGroup(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_enemyGroup(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "enemyGroup";
		public const string name = "name";
		public const string WaveData = "WaveData";
		public const string enemy = "enemy";
		public const string amount = "amount";
		public const string startDelay = "startDelay";
		public const string spawnInterval = "spawnInterval";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5687753539830049067UL,8128986279748860323UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_WaveData f_WaveData
	{
		get => (D_WaveData) _f_WaveData[Index];
		set => _f_WaveData[Index] = value;
	}
	public D_EnemyData f_enemy
	{
		get => (D_EnemyData) _f_enemy[Index];
		set => _f_enemy[Index] = value;
	}
	public System.Int32 f_amount
	{
		get => _f_amount[Index];
		set => _f_amount[Index] = value;
	}
	public System.Single f_startDelay
	{
		get => _f_startDelay[Index];
		set => _f_startDelay[Index] = value;
	}
	public System.Single f_spawnInterval
	{
		get => _f_spawnInterval[Index];
		set => _f_spawnInterval[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4768439846877257123UL, 4564271178158591882UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_WaveData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_WaveData => _ufle12jhs77_f_WaveData ?? (_ufle12jhs77_f_WaveData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5178040207927123324UL, 10930269463117227672UL), () => _ufle12jhs77_f_WaveData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_enemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_enemy => _ufle12jhs77_f_enemy ?? (_ufle12jhs77_f_enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5441185937166148425UL, 11239099587523972746UL), () => _ufle12jhs77_f_enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_amount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_amount => _ufle12jhs77_f_amount ?? (_ufle12jhs77_f_amount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4962475149476871349UL, 9923207979067693995UL), () => _ufle12jhs77_f_amount = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_startDelay;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_startDelay => _ufle12jhs77_f_startDelay ?? (_ufle12jhs77_f_startDelay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4846873840890291861UL, 7938845544472428197UL), () => _ufle12jhs77_f_startDelay = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_spawnInterval;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_spawnInterval => _ufle12jhs77_f_spawnInterval ?? (_ufle12jhs77_f_spawnInterval = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5152737681806592036UL, 4657384968853431938UL), () => _ufle12jhs77_f_spawnInterval = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_enemyGroup() : base(MetaDefault) {}
	private D_enemyGroup(BGId id) : base(MetaDefault, id) {}
	private D_enemyGroup(BGMetaEntity meta) : base(meta) {}
	private D_enemyGroup(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_enemyGroup FindEntity(Predicate<D_enemyGroup> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_enemyGroup> FindEntities(Predicate<D_enemyGroup> filter, List<D_enemyGroup> result=null, Comparison<D_enemyGroup> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_enemyGroup> action, Predicate<D_enemyGroup> filter=null, Comparison<D_enemyGroup> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_enemyGroup GetEntity(BGId entityId) => (D_enemyGroup) MetaDefault.GetEntity(entityId);
	public static D_enemyGroup GetEntity(int index) => (D_enemyGroup) MetaDefault[index];
	public static D_enemyGroup GetEntity(string entityName) => (D_enemyGroup) MetaDefault.GetEntity(entityName);
	public static D_enemyGroup NewEntity() => (D_enemyGroup) MetaDefault.NewEntity();
	public static D_enemyGroup NewEntity(BGId entityId) => (D_enemyGroup) MetaDefault.NewEntity(entityId);
	public static D_enemyGroup NewEntity(Action<D_enemyGroup> callback) => (D_enemyGroup) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_enemyGroup)entity)));
	public static D_enemyGroup NewEntity(D_WaveData owner) => (D_enemyGroup) MetaDefault.NewEntity(owner);
	public static D_enemyGroup NewEntity(D_WaveData owner, BGId entityId) => (D_enemyGroup) MetaDefault.NewEntity(owner, entityId);
	public static D_enemyGroup NewEntity(D_WaveData owner, Action<D_enemyGroup> callback) => (D_enemyGroup) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_enemyGroup)entity)));
}

public partial class D_TilePosData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_TilePosData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_TilePosData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "TilePosData";
		public const string name = "name";
		public const string TilePos = "TilePos";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5072550184591445031UL,4049629075303546763UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public UnityEngine.Vector2 f_TilePos
	{
		get => _f_TilePos[Index];
		set => _f_TilePos[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5513647067199918440UL, 3196144259926527926UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_TilePos;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_TilePos => _ufle12jhs77_f_TilePos ?? (_ufle12jhs77_f_TilePos = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(5562668652953843408UL, 2900906368118453686UL), () => _ufle12jhs77_f_TilePos = null));
	public List<Alias_rifegrt_TileCardData> RelatedTileCardDataListUsingmultiTilePositionsRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_TileCardData>(Alias_rifegrt_TileCardData._f_multiTilePositions, Id);
	public List<Alias_rifegrt_unitBuildData> RelatedunitBuildDataListUsingTilePosRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_unitBuildData>(Alias_rifegrt_unitBuildData._f_TilePos, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_TilePosData() : base(MetaDefault) {}
	private D_TilePosData(BGId id) : base(MetaDefault, id) {}
	private D_TilePosData(BGMetaEntity meta) : base(meta) {}
	private D_TilePosData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_TilePosData FindEntity(Predicate<D_TilePosData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_TilePosData> FindEntities(Predicate<D_TilePosData> filter, List<D_TilePosData> result=null, Comparison<D_TilePosData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_TilePosData> action, Predicate<D_TilePosData> filter=null, Comparison<D_TilePosData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_TilePosData GetEntity(BGId entityId) => (D_TilePosData) MetaDefault.GetEntity(entityId);
	public static D_TilePosData GetEntity(int index) => (D_TilePosData) MetaDefault[index];
	public static D_TilePosData GetEntity(string entityName) => (D_TilePosData) MetaDefault.GetEntity(entityName);
	public static D_TilePosData NewEntity() => (D_TilePosData) MetaDefault.NewEntity();
	public static D_TilePosData NewEntity(BGId entityId) => (D_TilePosData) MetaDefault.NewEntity(entityId);
	public static D_TilePosData NewEntity(Action<D_TilePosData> callback) => (D_TilePosData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_TilePosData)entity)));
}

public partial class D_ObstacleTileMapData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_ObstacleTileMapData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_ObstacleTileMapData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "ObstacleTileMapData";
		public const string name = "name";
		public const string StageNumber = "StageNumber";
		public const string ObstacleAddressableKey = "ObstacleAddressableKey";
		public const string ObstacleTileType = "ObstacleTileType";
		public const string StageID = "StageID";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5758885724365639225UL,6985595781335644047UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_StageNumber
	{
		get => _f_StageNumber[Index];
		set => _f_StageNumber[Index] = value;
	}
	public System.String f_ObstacleAddressableKey
	{
		get => _f_ObstacleAddressableKey[Index];
		set => _f_ObstacleAddressableKey[Index] = value;
	}
	public BGDatabaseEnum.ObstacleTileType f_ObstacleTileType
	{
		get => (BGDatabaseEnum.ObstacleTileType) _f_ObstacleTileType.GetStoredValue(Index);
		set => _f_ObstacleTileType.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5122076134020259029UL, 17981120585241953922UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_StageNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_StageNumber => _ufle12jhs77_f_StageNumber ?? (_ufle12jhs77_f_StageNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5556671979502578053UL, 12474159028423526542UL), () => _ufle12jhs77_f_StageNumber = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_ObstacleAddressableKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_ObstacleAddressableKey => _ufle12jhs77_f_ObstacleAddressableKey ?? (_ufle12jhs77_f_ObstacleAddressableKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4994500594652544960UL, 15342156812932836766UL), () => _ufle12jhs77_f_ObstacleAddressableKey = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_ObstacleTileType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_ObstacleTileType => _ufle12jhs77_f_ObstacleTileType ?? (_ufle12jhs77_f_ObstacleTileType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5693260011756325544UL, 12672970599089641917UL), () => _ufle12jhs77_f_ObstacleTileType = null));
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_StageID;
	public static BansheeGz.BGDatabase.BGKey _StageID => _edeht3sdad33_StageID ?? (_edeht3sdad33_StageID = BGCodeGenUtils.GetKey(MetaDefault, new BGId(4722294791348354641UL, 4966515860168714379UL), () => _edeht3sdad33_StageID = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_ObstacleTileMapData() : base(MetaDefault) {}
	private D_ObstacleTileMapData(BGId id) : base(MetaDefault, id) {}
	private D_ObstacleTileMapData(BGMetaEntity meta) : base(meta) {}
	private D_ObstacleTileMapData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_ObstacleTileMapData FindEntity(Predicate<D_ObstacleTileMapData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_ObstacleTileMapData> FindEntities(Predicate<D_ObstacleTileMapData> filter, List<D_ObstacleTileMapData> result=null, Comparison<D_ObstacleTileMapData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_ObstacleTileMapData> action, Predicate<D_ObstacleTileMapData> filter=null, Comparison<D_ObstacleTileMapData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_ObstacleTileMapData GetEntity(BGId entityId) => (D_ObstacleTileMapData) MetaDefault.GetEntity(entityId);
	public static D_ObstacleTileMapData GetEntity(int index) => (D_ObstacleTileMapData) MetaDefault[index];
	public static D_ObstacleTileMapData GetEntity(string entityName) => (D_ObstacleTileMapData) MetaDefault.GetEntity(entityName);
	public static D_ObstacleTileMapData NewEntity() => (D_ObstacleTileMapData) MetaDefault.NewEntity();
	public static D_ObstacleTileMapData NewEntity(BGId entityId) => (D_ObstacleTileMapData) MetaDefault.NewEntity(entityId);
	public static D_ObstacleTileMapData NewEntity(Action<D_ObstacleTileMapData> callback) => (D_ObstacleTileMapData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_ObstacleTileMapData)entity)));
	public static D_ObstacleTileMapData GetEntityByKeyStageID(System.Int32 StageNumber) => (D_ObstacleTileMapData) _StageID.GetEntityByKey<System.Int32>(StageNumber);
}

public partial class D_MapData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_MapData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_MapData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "MapData";
		public const string name = "name";
		public const string specialTiles = "specialTiles";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4908545487314207604UL,18299589279296068736UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public List<D_SpecialTile> f_specialTiles => BGCodeGenUtils.GetNested<D_SpecialTile>(_f_specialTiles, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5719801111616681580UL, 17245377735577054864UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_specialTiles;
	public static BansheeGz.BGDatabase.BGFieldNested _f_specialTiles => _ufle12jhs77_f_specialTiles ?? (_ufle12jhs77_f_specialTiles = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5244751714002308515UL, 5836463201650911643UL), () => _ufle12jhs77_f_specialTiles = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingmapDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_mapData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_MapData() : base(MetaDefault) {}
	private D_MapData(BGId id) : base(MetaDefault, id) {}
	private D_MapData(BGMetaEntity meta) : base(meta) {}
	private D_MapData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_MapData FindEntity(Predicate<D_MapData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_MapData> FindEntities(Predicate<D_MapData> filter, List<D_MapData> result=null, Comparison<D_MapData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_MapData> action, Predicate<D_MapData> filter=null, Comparison<D_MapData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_MapData GetEntity(BGId entityId) => (D_MapData) MetaDefault.GetEntity(entityId);
	public static D_MapData GetEntity(int index) => (D_MapData) MetaDefault[index];
	public static D_MapData GetEntity(string entityName) => (D_MapData) MetaDefault.GetEntity(entityName);
	public static D_MapData NewEntity() => (D_MapData) MetaDefault.NewEntity();
	public static D_MapData NewEntity(BGId entityId) => (D_MapData) MetaDefault.NewEntity(entityId);
	public static D_MapData NewEntity(Action<D_MapData> callback) => (D_MapData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_MapData)entity)));
}

public partial class D_SpecialTile : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_SpecialTile(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_SpecialTile(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "SpecialTile";
		public const string name = "name";
		public const string MapData = "MapData";
		public const string specialObject = "specialObject";
		public const string cellPosition = "cellPosition";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5262619728582080424UL,5342422265480733882UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_MapData f_MapData
	{
		get => (D_MapData) _f_MapData[Index];
		set => _f_MapData[Index] = value;
	}
	public D_UnitData f_specialObject
	{
		get => (D_UnitData) _f_specialObject[Index];
		set => _f_specialObject[Index] = value;
	}
	public UnityEngine.Vector2 f_cellPosition
	{
		get => _f_cellPosition[Index];
		set => _f_cellPosition[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4992590249030401474UL, 2817537600547812777UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_MapData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_MapData => _ufle12jhs77_f_MapData ?? (_ufle12jhs77_f_MapData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5484946033078379939UL, 14582839010964032951UL), () => _ufle12jhs77_f_MapData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_specialObject;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_specialObject => _ufle12jhs77_f_specialObject ?? (_ufle12jhs77_f_specialObject = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4613129631453140980UL, 5136207368358008742UL), () => _ufle12jhs77_f_specialObject = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_cellPosition;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_cellPosition => _ufle12jhs77_f_cellPosition ?? (_ufle12jhs77_f_cellPosition = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(5511294158484053841UL, 2904814911090748580UL), () => _ufle12jhs77_f_cellPosition = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_SpecialTile() : base(MetaDefault) {}
	private D_SpecialTile(BGId id) : base(MetaDefault, id) {}
	private D_SpecialTile(BGMetaEntity meta) : base(meta) {}
	private D_SpecialTile(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_SpecialTile FindEntity(Predicate<D_SpecialTile> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_SpecialTile> FindEntities(Predicate<D_SpecialTile> filter, List<D_SpecialTile> result=null, Comparison<D_SpecialTile> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_SpecialTile> action, Predicate<D_SpecialTile> filter=null, Comparison<D_SpecialTile> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_SpecialTile GetEntity(BGId entityId) => (D_SpecialTile) MetaDefault.GetEntity(entityId);
	public static D_SpecialTile GetEntity(int index) => (D_SpecialTile) MetaDefault[index];
	public static D_SpecialTile GetEntity(string entityName) => (D_SpecialTile) MetaDefault.GetEntity(entityName);
	public static D_SpecialTile NewEntity() => (D_SpecialTile) MetaDefault.NewEntity();
	public static D_SpecialTile NewEntity(BGId entityId) => (D_SpecialTile) MetaDefault.NewEntity(entityId);
	public static D_SpecialTile NewEntity(Action<D_SpecialTile> callback) => (D_SpecialTile) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_SpecialTile)entity)));
	public static D_SpecialTile NewEntity(D_MapData owner) => (D_SpecialTile) MetaDefault.NewEntity(owner);
	public static D_SpecialTile NewEntity(D_MapData owner, BGId entityId) => (D_SpecialTile) MetaDefault.NewEntity(owner, entityId);
	public static D_SpecialTile NewEntity(D_MapData owner, Action<D_SpecialTile> callback) => (D_SpecialTile) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_SpecialTile)entity)));
}

public partial class D_WildCardData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_WildCardData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_WildCardData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "WildCardData";
		public const string name = "name";
		public const string WildCardName = "WildCardName";
		public const string Description = "Description";
		public const string Grade = "Grade";
		public const string BuffData = "BuffData";
		public const string KeyGrade = "KeyGrade";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4872301963196228080UL,7765206360331939715UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.String f_WildCardName
	{
		get => _f_WildCardName[Index];
		set => _f_WildCardName[Index] = value;
	}
	public System.String f_Description
	{
		get => _f_Description[Index];
		set => _f_Description[Index] = value;
	}
	public CardGrade f_Grade
	{
		get => (CardGrade) _f_Grade.GetStoredValue(Index);
		set => _f_Grade.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_BuffData> f_BuffData
	{
		get => BGCodeGenUtils.MultipleRelationGet<D_BuffData>(_f_BuffData, Index);
		set => BGCodeGenUtils.MultipleRelationSet<D_BuffData>(_f_BuffData, Index, value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5727612212447465347UL, 8930124116492062357UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_WildCardName;
	public static BansheeGz.BGDatabase.BGFieldString _f_WildCardName => _ufle12jhs77_f_WildCardName ?? (_ufle12jhs77_f_WildCardName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5424515673354722464UL, 11574133637044617349UL), () => _ufle12jhs77_f_WildCardName = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_Description;
	public static BansheeGz.BGDatabase.BGFieldString _f_Description => _ufle12jhs77_f_Description ?? (_ufle12jhs77_f_Description = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4660221550547562453UL, 2006736635375945130UL), () => _ufle12jhs77_f_Description = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_Grade;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_Grade => _ufle12jhs77_f_Grade ?? (_ufle12jhs77_f_Grade = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5642949185260688049UL, 9640977806420772543UL), () => _ufle12jhs77_f_Grade = null));
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_BuffData;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_BuffData => _ufle12jhs77_f_BuffData ?? (_ufle12jhs77_f_BuffData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationMultiple>(MetaDefault, new BGId(5706463212952813793UL, 17658644526782138270UL), () => _ufle12jhs77_f_BuffData = null));
	public List<Alias_rifegrt_WildCardWaveData> RelatedWildCardWaveDataListUsingwildCardPoolRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_WildCardWaveData>(Alias_rifegrt_WildCardWaveData._f_wildCardPool, Id);
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_KeyGrade;
	public static BansheeGz.BGDatabase.BGKey _KeyGrade => _edeht3sdad33_KeyGrade ?? (_edeht3sdad33_KeyGrade = BGCodeGenUtils.GetKey(MetaDefault, new BGId(5165735758975412737UL, 2219348547570594239UL), () => _edeht3sdad33_KeyGrade = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_WildCardData() : base(MetaDefault) {}
	private D_WildCardData(BGId id) : base(MetaDefault, id) {}
	private D_WildCardData(BGMetaEntity meta) : base(meta) {}
	private D_WildCardData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_WildCardData FindEntity(Predicate<D_WildCardData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_WildCardData> FindEntities(Predicate<D_WildCardData> filter, List<D_WildCardData> result=null, Comparison<D_WildCardData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_WildCardData> action, Predicate<D_WildCardData> filter=null, Comparison<D_WildCardData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_WildCardData GetEntity(BGId entityId) => (D_WildCardData) MetaDefault.GetEntity(entityId);
	public static D_WildCardData GetEntity(int index) => (D_WildCardData) MetaDefault[index];
	public static D_WildCardData GetEntity(string entityName) => (D_WildCardData) MetaDefault.GetEntity(entityName);
	public static D_WildCardData NewEntity() => (D_WildCardData) MetaDefault.NewEntity();
	public static D_WildCardData NewEntity(BGId entityId) => (D_WildCardData) MetaDefault.NewEntity(entityId);
	public static D_WildCardData NewEntity(Action<D_WildCardData> callback) => (D_WildCardData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_WildCardData)entity)));
	public void f_BuffData_Add(D_BuffData related) => BGCodeGenUtils.MultipleRelationAdd(_f_BuffData, Index, related);
	public void f_BuffData_Remove(D_BuffData related) => BGCodeGenUtils.MultipleRelationRemove(_f_BuffData, Index, related);
	public static D_WildCardData GetEntityByKeyKeyGrade(CardGrade Grade) => (D_WildCardData) _KeyGrade.GetEntityByKey<CardGrade>(Grade);
	public static List<D_WildCardData> GetEntitiesByKeyKeyGrade(CardGrade Grade, List<D_WildCardData> result=null) => _KeyGrade.GetEntitiesByKey<D_WildCardData, CardGrade>(result, Grade);
}

public partial class D_WaveTimeData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_WaveTimeData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_WaveTimeData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "WaveTimeData";
		public const string name = "name";
		public const string WaveData = "WaveData";
		public const string StatName = "StatName";
		public const string StatValue = "StatValue";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4819225711913907305UL,15009537095344397230UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_WaveData f_WaveData
	{
		get => (D_WaveData) _f_WaveData[Index];
		set => _f_WaveData[Index] = value;
	}
	public StatName f_StatName
	{
		get => (StatName) _f_StatName.GetStoredValue(Index);
		set => _f_StatName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Single f_StatValue
	{
		get => _f_StatValue[Index];
		set => _f_StatValue[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4825676132994645936UL, 2849090759877740935UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_WaveData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_WaveData => _ufle12jhs77_f_WaveData ?? (_ufle12jhs77_f_WaveData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5683295658827204306UL, 5871050844131991199UL), () => _ufle12jhs77_f_WaveData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_StatName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_StatName => _ufle12jhs77_f_StatName ?? (_ufle12jhs77_f_StatName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5658350409613004392UL, 10174500961762633900UL), () => _ufle12jhs77_f_StatName = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_StatValue;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_StatValue => _ufle12jhs77_f_StatValue ?? (_ufle12jhs77_f_StatValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5155147655809922890UL, 4214448104098481302UL), () => _ufle12jhs77_f_StatValue = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_WaveTimeData() : base(MetaDefault) {}
	private D_WaveTimeData(BGId id) : base(MetaDefault, id) {}
	private D_WaveTimeData(BGMetaEntity meta) : base(meta) {}
	private D_WaveTimeData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_WaveTimeData FindEntity(Predicate<D_WaveTimeData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_WaveTimeData> FindEntities(Predicate<D_WaveTimeData> filter, List<D_WaveTimeData> result=null, Comparison<D_WaveTimeData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_WaveTimeData> action, Predicate<D_WaveTimeData> filter=null, Comparison<D_WaveTimeData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_WaveTimeData GetEntity(BGId entityId) => (D_WaveTimeData) MetaDefault.GetEntity(entityId);
	public static D_WaveTimeData GetEntity(int index) => (D_WaveTimeData) MetaDefault[index];
	public static D_WaveTimeData GetEntity(string entityName) => (D_WaveTimeData) MetaDefault.GetEntity(entityName);
	public static D_WaveTimeData NewEntity() => (D_WaveTimeData) MetaDefault.NewEntity();
	public static D_WaveTimeData NewEntity(BGId entityId) => (D_WaveTimeData) MetaDefault.NewEntity(entityId);
	public static D_WaveTimeData NewEntity(Action<D_WaveTimeData> callback) => (D_WaveTimeData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_WaveTimeData)entity)));
	public static D_WaveTimeData NewEntity(D_WaveData owner) => (D_WaveTimeData) MetaDefault.NewEntity(owner);
	public static D_WaveTimeData NewEntity(D_WaveData owner, BGId entityId) => (D_WaveTimeData) MetaDefault.NewEntity(owner, entityId);
	public static D_WaveTimeData NewEntity(D_WaveData owner, Action<D_WaveTimeData> callback) => (D_WaveTimeData) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_WaveTimeData)entity)));
}

public partial class D_BuffData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_BuffData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_BuffData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "BuffData";
		public const string name = "name";
		public const string buffType = "buffType";
		public const string duration = "duration";
		public const string tickInterval = "tickInterval";
		public const string startDelayTime = "startDelayTime";
		public const string targetSubject = "targetSubject";
		public const string buffEffects = "buffEffects";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5480432703501431684UL,2679937273658348675UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public BuffType f_buffType
	{
		get => (BuffType) _f_buffType.GetStoredValue(Index);
		set => _f_buffType.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Single f_duration
	{
		get => _f_duration[Index];
		set => _f_duration[Index] = value;
	}
	public System.Single f_tickInterval
	{
		get => _f_tickInterval[Index];
		set => _f_tickInterval[Index] = value;
	}
	public System.Int32 f_startDelayTime
	{
		get => _f_startDelayTime[Index];
		set => _f_startDelayTime[Index] = value;
	}
	public StatSubject f_targetSubject
	{
		get => (StatSubject) _f_targetSubject.GetStoredValue(Index);
		set => _f_targetSubject.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_buffEffects> f_buffEffects => BGCodeGenUtils.GetNested<D_buffEffects>(_f_buffEffects, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5132302282938406455UL, 16194391721837298597UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_buffType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_buffType => _ufle12jhs77_f_buffType ?? (_ufle12jhs77_f_buffType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4851296489865721995UL, 11280547529833641871UL), () => _ufle12jhs77_f_buffType = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_duration;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_duration => _ufle12jhs77_f_duration ?? (_ufle12jhs77_f_duration = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5604027641232083368UL, 6438707996669211787UL), () => _ufle12jhs77_f_duration = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_tickInterval;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_tickInterval => _ufle12jhs77_f_tickInterval ?? (_ufle12jhs77_f_tickInterval = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4690010415295022485UL, 14268751412956003969UL), () => _ufle12jhs77_f_tickInterval = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_startDelayTime;
	public static BansheeGz.BGDatabase.BGFieldInt _f_startDelayTime => _ufle12jhs77_f_startDelayTime ?? (_ufle12jhs77_f_startDelayTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5643119041523169710UL, 16115676842799606964UL), () => _ufle12jhs77_f_startDelayTime = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_targetSubject;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_targetSubject => _ufle12jhs77_f_targetSubject ?? (_ufle12jhs77_f_targetSubject = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5201219649389349169UL, 3802183932482509222UL), () => _ufle12jhs77_f_targetSubject = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_buffEffects;
	public static BansheeGz.BGDatabase.BGFieldNested _f_buffEffects => _ufle12jhs77_f_buffEffects ?? (_ufle12jhs77_f_buffEffects = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5555988630792564783UL, 7606948226480331923UL), () => _ufle12jhs77_f_buffEffects = null));
	public List<Alias_rifegrt_WildCardData> RelatedWildCardDataListUsingBuffDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_WildCardData>(Alias_rifegrt_WildCardData._f_BuffData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_BuffData() : base(MetaDefault) {}
	private D_BuffData(BGId id) : base(MetaDefault, id) {}
	private D_BuffData(BGMetaEntity meta) : base(meta) {}
	private D_BuffData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_BuffData FindEntity(Predicate<D_BuffData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_BuffData> FindEntities(Predicate<D_BuffData> filter, List<D_BuffData> result=null, Comparison<D_BuffData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_BuffData> action, Predicate<D_BuffData> filter=null, Comparison<D_BuffData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_BuffData GetEntity(BGId entityId) => (D_BuffData) MetaDefault.GetEntity(entityId);
	public static D_BuffData GetEntity(int index) => (D_BuffData) MetaDefault[index];
	public static D_BuffData GetEntity(string entityName) => (D_BuffData) MetaDefault.GetEntity(entityName);
	public static D_BuffData NewEntity() => (D_BuffData) MetaDefault.NewEntity();
	public static D_BuffData NewEntity(BGId entityId) => (D_BuffData) MetaDefault.NewEntity(entityId);
	public static D_BuffData NewEntity(Action<D_BuffData> callback) => (D_BuffData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_BuffData)entity)));
}

public partial class D_buffEffects : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_buffEffects(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_buffEffects(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "buffEffects";
		public const string name = "name";
		public const string BuffData = "BuffData";
		public const string statName = "statName";
		public const string value = "value";
		public const string valueMultiply = "valueMultiply";
		public const string buffTickType = "buffTickType";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5631040277948286811UL,13007909191616308359UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_BuffData f_BuffData
	{
		get => (D_BuffData) _f_BuffData[Index];
		set => _f_BuffData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_value
	{
		get => _f_value[Index];
		set => _f_value[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	public BuffTickType f_buffTickType
	{
		get => (BuffTickType) _f_buffTickType.GetStoredValue(Index);
		set => _f_buffTickType.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5092157275259816070UL, 4385982813115435139UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_BuffData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_BuffData => _ufle12jhs77_f_BuffData ?? (_ufle12jhs77_f_BuffData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5516401778010689734UL, 243574926929816725UL), () => _ufle12jhs77_f_BuffData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5130250489602307827UL, 10870334875760719517UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_value;
	public static BansheeGz.BGDatabase.BGFieldInt _f_value => _ufle12jhs77_f_value ?? (_ufle12jhs77_f_value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5384050326230750970UL, 5440153106100768445UL), () => _ufle12jhs77_f_value = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5530346178345344594UL, 4454355475631574712UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_buffTickType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_buffTickType => _ufle12jhs77_f_buffTickType ?? (_ufle12jhs77_f_buffTickType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5175313155979603135UL, 10701216334338136488UL), () => _ufle12jhs77_f_buffTickType = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_buffEffects() : base(MetaDefault) {}
	private D_buffEffects(BGId id) : base(MetaDefault, id) {}
	private D_buffEffects(BGMetaEntity meta) : base(meta) {}
	private D_buffEffects(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_buffEffects FindEntity(Predicate<D_buffEffects> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_buffEffects> FindEntities(Predicate<D_buffEffects> filter, List<D_buffEffects> result=null, Comparison<D_buffEffects> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_buffEffects> action, Predicate<D_buffEffects> filter=null, Comparison<D_buffEffects> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_buffEffects GetEntity(BGId entityId) => (D_buffEffects) MetaDefault.GetEntity(entityId);
	public static D_buffEffects GetEntity(int index) => (D_buffEffects) MetaDefault[index];
	public static D_buffEffects GetEntity(string entityName) => (D_buffEffects) MetaDefault.GetEntity(entityName);
	public static D_buffEffects NewEntity() => (D_buffEffects) MetaDefault.NewEntity();
	public static D_buffEffects NewEntity(BGId entityId) => (D_buffEffects) MetaDefault.NewEntity(entityId);
	public static D_buffEffects NewEntity(Action<D_buffEffects> callback) => (D_buffEffects) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_buffEffects)entity)));
	public static D_buffEffects NewEntity(D_BuffData owner) => (D_buffEffects) MetaDefault.NewEntity(owner);
	public static D_buffEffects NewEntity(D_BuffData owner, BGId entityId) => (D_buffEffects) MetaDefault.NewEntity(owner, entityId);
	public static D_buffEffects NewEntity(D_BuffData owner, Action<D_buffEffects> callback) => (D_buffEffects) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_buffEffects)entity)));
}

public partial class D_StatSubjectData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_StatSubjectData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_StatSubjectData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "StatSubjectData";
		public const string name = "name";
		public const string subjectType = "subjectType";
		public const string subjectStats = "subjectStats";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4734955719791994127UL,8120858761871956103UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public StatSubject f_subjectType
	{
		get => (StatSubject) _f_subjectType.GetStoredValue(Index);
		set => _f_subjectType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_subjectStats> f_subjectStats => BGCodeGenUtils.GetNested<D_subjectStats>(_f_subjectStats, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4634033563269898025UL, 7259599322686501282UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_subjectType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_subjectType => _ufle12jhs77_f_subjectType ?? (_ufle12jhs77_f_subjectType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4957358118511177372UL, 302977254177934983UL), () => _ufle12jhs77_f_subjectType = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_subjectStats;
	public static BansheeGz.BGDatabase.BGFieldNested _f_subjectStats => _ufle12jhs77_f_subjectStats ?? (_ufle12jhs77_f_subjectStats = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(4646824329052271832UL, 13834163337199789985UL), () => _ufle12jhs77_f_subjectStats = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_StatSubjectData() : base(MetaDefault) {}
	private D_StatSubjectData(BGId id) : base(MetaDefault, id) {}
	private D_StatSubjectData(BGMetaEntity meta) : base(meta) {}
	private D_StatSubjectData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_StatSubjectData FindEntity(Predicate<D_StatSubjectData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_StatSubjectData> FindEntities(Predicate<D_StatSubjectData> filter, List<D_StatSubjectData> result=null, Comparison<D_StatSubjectData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_StatSubjectData> action, Predicate<D_StatSubjectData> filter=null, Comparison<D_StatSubjectData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_StatSubjectData GetEntity(BGId entityId) => (D_StatSubjectData) MetaDefault.GetEntity(entityId);
	public static D_StatSubjectData GetEntity(int index) => (D_StatSubjectData) MetaDefault[index];
	public static D_StatSubjectData GetEntity(string entityName) => (D_StatSubjectData) MetaDefault.GetEntity(entityName);
	public static D_StatSubjectData NewEntity() => (D_StatSubjectData) MetaDefault.NewEntity();
	public static D_StatSubjectData NewEntity(BGId entityId) => (D_StatSubjectData) MetaDefault.NewEntity(entityId);
	public static D_StatSubjectData NewEntity(Action<D_StatSubjectData> callback) => (D_StatSubjectData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_StatSubjectData)entity)));
}

public partial class D_subjectStats : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_subjectStats(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_subjectStats(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "subjectStats";
		public const string name = "name";
		public const string StatSubjectData = "StatSubjectData";
		public const string statName = "statName";
		public const string statValue = "statValue";
		public const string valueMultiply = "valueMultiply";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4900928973168497858UL,12874494567445823110UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_StatSubjectData f_StatSubjectData
	{
		get => (D_StatSubjectData) _f_StatSubjectData[Index];
		set => _f_StatSubjectData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_statValue
	{
		get => _f_statValue[Index];
		set => _f_statValue[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5246071232527706149UL, 6178172169890432649UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_StatSubjectData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_StatSubjectData => _ufle12jhs77_f_StatSubjectData ?? (_ufle12jhs77_f_StatSubjectData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4613144741793272004UL, 2500786080963298690UL), () => _ufle12jhs77_f_StatSubjectData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5416216000735258644UL, 1583226806036143765UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_statValue;
	public static BansheeGz.BGDatabase.BGFieldInt _f_statValue => _ufle12jhs77_f_statValue ?? (_ufle12jhs77_f_statValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5281267495795349850UL, 16377994696293795253UL), () => _ufle12jhs77_f_statValue = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5539391753433803353UL, 11360062638014334634UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_subjectStats() : base(MetaDefault) {}
	private D_subjectStats(BGId id) : base(MetaDefault, id) {}
	private D_subjectStats(BGMetaEntity meta) : base(meta) {}
	private D_subjectStats(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_subjectStats FindEntity(Predicate<D_subjectStats> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_subjectStats> FindEntities(Predicate<D_subjectStats> filter, List<D_subjectStats> result=null, Comparison<D_subjectStats> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_subjectStats> action, Predicate<D_subjectStats> filter=null, Comparison<D_subjectStats> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_subjectStats GetEntity(BGId entityId) => (D_subjectStats) MetaDefault.GetEntity(entityId);
	public static D_subjectStats GetEntity(int index) => (D_subjectStats) MetaDefault[index];
	public static D_subjectStats GetEntity(string entityName) => (D_subjectStats) MetaDefault.GetEntity(entityName);
	public static D_subjectStats NewEntity() => (D_subjectStats) MetaDefault.NewEntity();
	public static D_subjectStats NewEntity(BGId entityId) => (D_subjectStats) MetaDefault.NewEntity(entityId);
	public static D_subjectStats NewEntity(Action<D_subjectStats> callback) => (D_subjectStats) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_subjectStats)entity)));
	public static D_subjectStats NewEntity(D_StatSubjectData owner) => (D_subjectStats) MetaDefault.NewEntity(owner);
	public static D_subjectStats NewEntity(D_StatSubjectData owner, BGId entityId) => (D_subjectStats) MetaDefault.NewEntity(owner, entityId);
	public static D_subjectStats NewEntity(D_StatSubjectData owner, Action<D_subjectStats> callback) => (D_subjectStats) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_subjectStats)entity)));
}

public partial class D_EpisodeData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_EpisodeData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_EpisodeData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "EpisodeData";
		public const string name = "name";
		public const string episodeNumber = "episodeNumber";
		public const string episodeTitle = "episodeTitle";
		public const string episodeDescription = "episodeDescription";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4748811259824635660UL,2691968706770037180UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_episodeNumber
	{
		get => _f_episodeNumber[Index];
		set => _f_episodeNumber[Index] = value;
	}
	public System.String f_episodeTitle
	{
		get => _f_episodeTitle[Index];
		set => _f_episodeTitle[Index] = value;
	}
	public System.String f_episodeDescription
	{
		get => _f_episodeDescription[Index];
		set => _f_episodeDescription[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4673367198392211597UL, 10796729627121814147UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_episodeNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_episodeNumber => _ufle12jhs77_f_episodeNumber ?? (_ufle12jhs77_f_episodeNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5734194201930936214UL, 17034143442782541238UL), () => _ufle12jhs77_f_episodeNumber = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_episodeTitle;
	public static BansheeGz.BGDatabase.BGFieldString _f_episodeTitle => _ufle12jhs77_f_episodeTitle ?? (_ufle12jhs77_f_episodeTitle = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5209109661268413002UL, 15590832163721709754UL), () => _ufle12jhs77_f_episodeTitle = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_episodeDescription;
	public static BansheeGz.BGDatabase.BGFieldString _f_episodeDescription => _ufle12jhs77_f_episodeDescription ?? (_ufle12jhs77_f_episodeDescription = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5596414729176742488UL, 13995345094606251674UL), () => _ufle12jhs77_f_episodeDescription = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingEpisodeDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_EpisodeData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_EpisodeData() : base(MetaDefault) {}
	private D_EpisodeData(BGId id) : base(MetaDefault, id) {}
	private D_EpisodeData(BGMetaEntity meta) : base(meta) {}
	private D_EpisodeData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_EpisodeData FindEntity(Predicate<D_EpisodeData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_EpisodeData> FindEntities(Predicate<D_EpisodeData> filter, List<D_EpisodeData> result=null, Comparison<D_EpisodeData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_EpisodeData> action, Predicate<D_EpisodeData> filter=null, Comparison<D_EpisodeData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_EpisodeData GetEntity(BGId entityId) => (D_EpisodeData) MetaDefault.GetEntity(entityId);
	public static D_EpisodeData GetEntity(int index) => (D_EpisodeData) MetaDefault[index];
	public static D_EpisodeData GetEntity(string entityName) => (D_EpisodeData) MetaDefault.GetEntity(entityName);
	public static D_EpisodeData NewEntity() => (D_EpisodeData) MetaDefault.NewEntity();
	public static D_EpisodeData NewEntity(BGId entityId) => (D_EpisodeData) MetaDefault.NewEntity(entityId);
	public static D_EpisodeData NewEntity(Action<D_EpisodeData> callback) => (D_EpisodeData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_EpisodeData)entity)));
}

public partial class D_NormalBattleWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_NormalBattleWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_NormalBattleWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "NormalBattleWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string enemyGroups = "enemyGroups";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4999377484231959274UL,5641040283909218478UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_enemyGroups> f_enemyGroups => BGCodeGenUtils.GetNested<D_enemyGroups>(_f_enemyGroups, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5198096744199374732UL, 12583835185553226120UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4701626643325239214UL, 16981198359215634358UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_enemyGroups;
	public static BansheeGz.BGDatabase.BGFieldNested _f_enemyGroups => _ufle12jhs77_f_enemyGroups ?? (_ufle12jhs77_f_enemyGroups = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5172849092912884667UL, 17811197957680909980UL), () => _ufle12jhs77_f_enemyGroups = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_NormalBattleWaveData() : base(MetaDefault) {}
	private D_NormalBattleWaveData(BGId id) : base(MetaDefault, id) {}
	private D_NormalBattleWaveData(BGMetaEntity meta) : base(meta) {}
	private D_NormalBattleWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_NormalBattleWaveData FindEntity(Predicate<D_NormalBattleWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_NormalBattleWaveData> FindEntities(Predicate<D_NormalBattleWaveData> filter, List<D_NormalBattleWaveData> result=null, Comparison<D_NormalBattleWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_NormalBattleWaveData> action, Predicate<D_NormalBattleWaveData> filter=null, Comparison<D_NormalBattleWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_NormalBattleWaveData GetEntity(BGId entityId) => (D_NormalBattleWaveData) MetaDefault.GetEntity(entityId);
	public static D_NormalBattleWaveData GetEntity(int index) => (D_NormalBattleWaveData) MetaDefault[index];
	public static D_NormalBattleWaveData GetEntity(string entityName) => (D_NormalBattleWaveData) MetaDefault.GetEntity(entityName);
	public static D_NormalBattleWaveData NewEntity() => (D_NormalBattleWaveData) MetaDefault.NewEntity();
	public static D_NormalBattleWaveData NewEntity(BGId entityId) => (D_NormalBattleWaveData) MetaDefault.NewEntity(entityId);
	public static D_NormalBattleWaveData NewEntity(Action<D_NormalBattleWaveData> callback) => (D_NormalBattleWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_NormalBattleWaveData)entity)));
}

public partial class D_BossBattleWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_BossBattleWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_BossBattleWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "BossBattleWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string bossEnemy = "bossEnemy";
		public const string bossHp = "bossHp";
		public const string startDelay = "startDelay";
		public const string supportEnemyGroups = "supportEnemyGroups";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5350997232416358719UL,7550749901726769284UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public D_EnemyData f_bossEnemy
	{
		get => (D_EnemyData) _f_bossEnemy[Index];
		set => _f_bossEnemy[Index] = value;
	}
	public System.Int32 f_bossHp
	{
		get => _f_bossHp[Index];
		set => _f_bossHp[Index] = value;
	}
	public System.Single f_startDelay
	{
		get => _f_startDelay[Index];
		set => _f_startDelay[Index] = value;
	}
	public List<D_supportEnemyGroups> f_supportEnemyGroups => BGCodeGenUtils.GetNested<D_supportEnemyGroups>(_f_supportEnemyGroups, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4648556790777620570UL, 10818428577091893122UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5305157338052161875UL, 13104404023960258490UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_bossEnemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_bossEnemy => _ufle12jhs77_f_bossEnemy ?? (_ufle12jhs77_f_bossEnemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5398663689755495180UL, 17581176995848287386UL), () => _ufle12jhs77_f_bossEnemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_bossHp;
	public static BansheeGz.BGDatabase.BGFieldInt _f_bossHp => _ufle12jhs77_f_bossHp ?? (_ufle12jhs77_f_bossHp = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5583733647517555600UL, 2947613467864531370UL), () => _ufle12jhs77_f_bossHp = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_startDelay;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_startDelay => _ufle12jhs77_f_startDelay ?? (_ufle12jhs77_f_startDelay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5089286857605021011UL, 15989192875252017323UL), () => _ufle12jhs77_f_startDelay = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_supportEnemyGroups;
	public static BansheeGz.BGDatabase.BGFieldNested _f_supportEnemyGroups => _ufle12jhs77_f_supportEnemyGroups ?? (_ufle12jhs77_f_supportEnemyGroups = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5174288980624180766UL, 6608948672316262042UL), () => _ufle12jhs77_f_supportEnemyGroups = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_BossBattleWaveData() : base(MetaDefault) {}
	private D_BossBattleWaveData(BGId id) : base(MetaDefault, id) {}
	private D_BossBattleWaveData(BGMetaEntity meta) : base(meta) {}
	private D_BossBattleWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_BossBattleWaveData FindEntity(Predicate<D_BossBattleWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_BossBattleWaveData> FindEntities(Predicate<D_BossBattleWaveData> filter, List<D_BossBattleWaveData> result=null, Comparison<D_BossBattleWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_BossBattleWaveData> action, Predicate<D_BossBattleWaveData> filter=null, Comparison<D_BossBattleWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_BossBattleWaveData GetEntity(BGId entityId) => (D_BossBattleWaveData) MetaDefault.GetEntity(entityId);
	public static D_BossBattleWaveData GetEntity(int index) => (D_BossBattleWaveData) MetaDefault[index];
	public static D_BossBattleWaveData GetEntity(string entityName) => (D_BossBattleWaveData) MetaDefault.GetEntity(entityName);
	public static D_BossBattleWaveData NewEntity() => (D_BossBattleWaveData) MetaDefault.NewEntity();
	public static D_BossBattleWaveData NewEntity(BGId entityId) => (D_BossBattleWaveData) MetaDefault.NewEntity(entityId);
	public static D_BossBattleWaveData NewEntity(Action<D_BossBattleWaveData> callback) => (D_BossBattleWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_BossBattleWaveData)entity)));
}

public partial class D_WildCardWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_WildCardWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_WildCardWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "WildCardWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string selectionTime = "selectionTime";
		public const string minSelectionTime = "minSelectionTime";
		public const string wildCardPool = "wildCardPool";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5146719602937660752UL,17503680545558939813UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Single f_selectionTime
	{
		get => _f_selectionTime[Index];
		set => _f_selectionTime[Index] = value;
	}
	public System.Single f_minSelectionTime
	{
		get => _f_minSelectionTime[Index];
		set => _f_minSelectionTime[Index] = value;
	}
	public List<D_WildCardData> f_wildCardPool
	{
		get => BGCodeGenUtils.MultipleRelationGet<D_WildCardData>(_f_wildCardPool, Index);
		set => BGCodeGenUtils.MultipleRelationSet<D_WildCardData>(_f_wildCardPool, Index, value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4723267896339647800UL, 14378766748157478560UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4612140196011147467UL, 16714563746265830035UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_selectionTime;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_selectionTime => _ufle12jhs77_f_selectionTime ?? (_ufle12jhs77_f_selectionTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5470029004488476974UL, 4693715411505821355UL), () => _ufle12jhs77_f_selectionTime = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_minSelectionTime;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_minSelectionTime => _ufle12jhs77_f_minSelectionTime ?? (_ufle12jhs77_f_minSelectionTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4745070809095324590UL, 13515748607729780378UL), () => _ufle12jhs77_f_minSelectionTime = null));
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_wildCardPool;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_wildCardPool => _ufle12jhs77_f_wildCardPool ?? (_ufle12jhs77_f_wildCardPool = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationMultiple>(MetaDefault, new BGId(4936371166208896379UL, 11880145986698001842UL), () => _ufle12jhs77_f_wildCardPool = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_WildCardWaveData() : base(MetaDefault) {}
	private D_WildCardWaveData(BGId id) : base(MetaDefault, id) {}
	private D_WildCardWaveData(BGMetaEntity meta) : base(meta) {}
	private D_WildCardWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_WildCardWaveData FindEntity(Predicate<D_WildCardWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_WildCardWaveData> FindEntities(Predicate<D_WildCardWaveData> filter, List<D_WildCardWaveData> result=null, Comparison<D_WildCardWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_WildCardWaveData> action, Predicate<D_WildCardWaveData> filter=null, Comparison<D_WildCardWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_WildCardWaveData GetEntity(BGId entityId) => (D_WildCardWaveData) MetaDefault.GetEntity(entityId);
	public static D_WildCardWaveData GetEntity(int index) => (D_WildCardWaveData) MetaDefault[index];
	public static D_WildCardWaveData GetEntity(string entityName) => (D_WildCardWaveData) MetaDefault.GetEntity(entityName);
	public static D_WildCardWaveData NewEntity() => (D_WildCardWaveData) MetaDefault.NewEntity();
	public static D_WildCardWaveData NewEntity(BGId entityId) => (D_WildCardWaveData) MetaDefault.NewEntity(entityId);
	public static D_WildCardWaveData NewEntity(Action<D_WildCardWaveData> callback) => (D_WildCardWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_WildCardWaveData)entity)));
	public void f_wildCardPool_Add(D_WildCardData related) => BGCodeGenUtils.MultipleRelationAdd(_f_wildCardPool, Index, related);
	public void f_wildCardPool_Remove(D_WildCardData related) => BGCodeGenUtils.MultipleRelationRemove(_f_wildCardPool, Index, related);
}

public partial class D_HuntingSelectTimeWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_HuntingSelectTimeWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_HuntingSelectTimeWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "HuntingSelectTimeWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string huntingOptions = "huntingOptions";
		public const string selectionTime = "selectionTime";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5355806510897219477UL,1872667755167838855UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_HuntingOptionData> f_huntingOptions
	{
		get => BGCodeGenUtils.MultipleRelationGet<D_HuntingOptionData>(_f_huntingOptions, Index);
		set => BGCodeGenUtils.MultipleRelationSet<D_HuntingOptionData>(_f_huntingOptions, Index, value);
	}
	public System.Single f_selectionTime
	{
		get => _f_selectionTime[Index];
		set => _f_selectionTime[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5279180682772361936UL, 11781508780659629758UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5575223739616318164UL, 3236898760159510695UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_huntingOptions;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_huntingOptions => _ufle12jhs77_f_huntingOptions ?? (_ufle12jhs77_f_huntingOptions = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationMultiple>(MetaDefault, new BGId(5448698770901340276UL, 15088888142893992333UL), () => _ufle12jhs77_f_huntingOptions = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_selectionTime;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_selectionTime => _ufle12jhs77_f_selectionTime ?? (_ufle12jhs77_f_selectionTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5678239700829138959UL, 12609033964209551269UL), () => _ufle12jhs77_f_selectionTime = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_HuntingSelectTimeWaveData() : base(MetaDefault) {}
	private D_HuntingSelectTimeWaveData(BGId id) : base(MetaDefault, id) {}
	private D_HuntingSelectTimeWaveData(BGMetaEntity meta) : base(meta) {}
	private D_HuntingSelectTimeWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_HuntingSelectTimeWaveData FindEntity(Predicate<D_HuntingSelectTimeWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_HuntingSelectTimeWaveData> FindEntities(Predicate<D_HuntingSelectTimeWaveData> filter, List<D_HuntingSelectTimeWaveData> result=null, Comparison<D_HuntingSelectTimeWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_HuntingSelectTimeWaveData> action, Predicate<D_HuntingSelectTimeWaveData> filter=null, Comparison<D_HuntingSelectTimeWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_HuntingSelectTimeWaveData GetEntity(BGId entityId) => (D_HuntingSelectTimeWaveData) MetaDefault.GetEntity(entityId);
	public static D_HuntingSelectTimeWaveData GetEntity(int index) => (D_HuntingSelectTimeWaveData) MetaDefault[index];
	public static D_HuntingSelectTimeWaveData GetEntity(string entityName) => (D_HuntingSelectTimeWaveData) MetaDefault.GetEntity(entityName);
	public static D_HuntingSelectTimeWaveData NewEntity() => (D_HuntingSelectTimeWaveData) MetaDefault.NewEntity();
	public static D_HuntingSelectTimeWaveData NewEntity(BGId entityId) => (D_HuntingSelectTimeWaveData) MetaDefault.NewEntity(entityId);
	public static D_HuntingSelectTimeWaveData NewEntity(Action<D_HuntingSelectTimeWaveData> callback) => (D_HuntingSelectTimeWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_HuntingSelectTimeWaveData)entity)));
	public void f_huntingOptions_Add(D_HuntingOptionData related) => BGCodeGenUtils.MultipleRelationAdd(_f_huntingOptions, Index, related);
	public void f_huntingOptions_Remove(D_HuntingOptionData related) => BGCodeGenUtils.MultipleRelationRemove(_f_huntingOptions, Index, related);
}

public partial class D_PrizeHuntingWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_PrizeHuntingWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_PrizeHuntingWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "PrizeHuntingWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string supportEnemys = "supportEnemys";
		public const string rewardMuliply = "rewardMuliply";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5611583930951548014UL,5993143906111744697UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_supportEnemys> f_supportEnemys => BGCodeGenUtils.GetNested<D_supportEnemys>(_f_supportEnemys, Index);
	public System.Single f_rewardMuliply
	{
		get => _f_rewardMuliply[Index];
		set => _f_rewardMuliply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5164155889470865134UL, 2740344724493640330UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4949906846277046348UL, 3254931597210127545UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_supportEnemys;
	public static BansheeGz.BGDatabase.BGFieldNested _f_supportEnemys => _ufle12jhs77_f_supportEnemys ?? (_ufle12jhs77_f_supportEnemys = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5154366643864154395UL, 13690184846337934736UL), () => _ufle12jhs77_f_supportEnemys = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_rewardMuliply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_rewardMuliply => _ufle12jhs77_f_rewardMuliply ?? (_ufle12jhs77_f_rewardMuliply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5133528091699256518UL, 12472597788064952464UL), () => _ufle12jhs77_f_rewardMuliply = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	public List<Alias_rifegrt_HuntingOptionData> RelatedHuntingOptionDataListUsingprizeHuntingDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_HuntingOptionData>(Alias_rifegrt_HuntingOptionData._f_prizeHuntingData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_PrizeHuntingWaveData() : base(MetaDefault) {}
	private D_PrizeHuntingWaveData(BGId id) : base(MetaDefault, id) {}
	private D_PrizeHuntingWaveData(BGMetaEntity meta) : base(meta) {}
	private D_PrizeHuntingWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_PrizeHuntingWaveData FindEntity(Predicate<D_PrizeHuntingWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_PrizeHuntingWaveData> FindEntities(Predicate<D_PrizeHuntingWaveData> filter, List<D_PrizeHuntingWaveData> result=null, Comparison<D_PrizeHuntingWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_PrizeHuntingWaveData> action, Predicate<D_PrizeHuntingWaveData> filter=null, Comparison<D_PrizeHuntingWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_PrizeHuntingWaveData GetEntity(BGId entityId) => (D_PrizeHuntingWaveData) MetaDefault.GetEntity(entityId);
	public static D_PrizeHuntingWaveData GetEntity(int index) => (D_PrizeHuntingWaveData) MetaDefault[index];
	public static D_PrizeHuntingWaveData GetEntity(string entityName) => (D_PrizeHuntingWaveData) MetaDefault.GetEntity(entityName);
	public static D_PrizeHuntingWaveData NewEntity() => (D_PrizeHuntingWaveData) MetaDefault.NewEntity();
	public static D_PrizeHuntingWaveData NewEntity(BGId entityId) => (D_PrizeHuntingWaveData) MetaDefault.NewEntity(entityId);
	public static D_PrizeHuntingWaveData NewEntity(Action<D_PrizeHuntingWaveData> callback) => (D_PrizeHuntingWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_PrizeHuntingWaveData)entity)));
}

public partial class D_EventEnemyWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_EventEnemyWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_EventEnemyWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "EventEnemyWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string eventEnemyGroups = "eventEnemyGroups";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5205932451465649274UL,6690423199984566686UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_eventEnemyGroups> f_eventEnemyGroups => BGCodeGenUtils.GetNested<D_eventEnemyGroups>(_f_eventEnemyGroups, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4741738928606390407UL, 15540059557401017780UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5634264694695657963UL, 7247178406659141007UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_eventEnemyGroups;
	public static BansheeGz.BGDatabase.BGFieldNested _f_eventEnemyGroups => _ufle12jhs77_f_eventEnemyGroups ?? (_ufle12jhs77_f_eventEnemyGroups = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(4945516378100874704UL, 14425904970668611736UL), () => _ufle12jhs77_f_eventEnemyGroups = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_EventEnemyWaveData() : base(MetaDefault) {}
	private D_EventEnemyWaveData(BGId id) : base(MetaDefault, id) {}
	private D_EventEnemyWaveData(BGMetaEntity meta) : base(meta) {}
	private D_EventEnemyWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_EventEnemyWaveData FindEntity(Predicate<D_EventEnemyWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_EventEnemyWaveData> FindEntities(Predicate<D_EventEnemyWaveData> filter, List<D_EventEnemyWaveData> result=null, Comparison<D_EventEnemyWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_EventEnemyWaveData> action, Predicate<D_EventEnemyWaveData> filter=null, Comparison<D_EventEnemyWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_EventEnemyWaveData GetEntity(BGId entityId) => (D_EventEnemyWaveData) MetaDefault.GetEntity(entityId);
	public static D_EventEnemyWaveData GetEntity(int index) => (D_EventEnemyWaveData) MetaDefault[index];
	public static D_EventEnemyWaveData GetEntity(string entityName) => (D_EventEnemyWaveData) MetaDefault.GetEntity(entityName);
	public static D_EventEnemyWaveData NewEntity() => (D_EventEnemyWaveData) MetaDefault.NewEntity();
	public static D_EventEnemyWaveData NewEntity(BGId entityId) => (D_EventEnemyWaveData) MetaDefault.NewEntity(entityId);
	public static D_EventEnemyWaveData NewEntity(Action<D_EventEnemyWaveData> callback) => (D_EventEnemyWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_EventEnemyWaveData)entity)));
}

public partial class D_enemyGroups : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_enemyGroups(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_enemyGroups(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "enemyGroups";
		public const string name = "name";
		public const string NormalBattleWaveData = "NormalBattleWaveData";
		public const string enemy = "enemy";
		public const string amount = "amount";
		public const string startDelay = "startDelay";
		public const string spawnInterval = "spawnInterval";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5572311145210933879UL,7563200510926775201UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_NormalBattleWaveData f_NormalBattleWaveData
	{
		get => (D_NormalBattleWaveData) _f_NormalBattleWaveData[Index];
		set => _f_NormalBattleWaveData[Index] = value;
	}
	public D_EnemyData f_enemy
	{
		get => (D_EnemyData) _f_enemy[Index];
		set => _f_enemy[Index] = value;
	}
	public System.Int32 f_amount
	{
		get => _f_amount[Index];
		set => _f_amount[Index] = value;
	}
	public System.Single f_startDelay
	{
		get => _f_startDelay[Index];
		set => _f_startDelay[Index] = value;
	}
	public System.Single f_spawnInterval
	{
		get => _f_spawnInterval[Index];
		set => _f_spawnInterval[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5038163328612525559UL, 15929138475061095592UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_NormalBattleWaveData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_NormalBattleWaveData => _ufle12jhs77_f_NormalBattleWaveData ?? (_ufle12jhs77_f_NormalBattleWaveData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5543101935332725939UL, 17205127580418407343UL), () => _ufle12jhs77_f_NormalBattleWaveData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_enemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_enemy => _ufle12jhs77_f_enemy ?? (_ufle12jhs77_f_enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5372526711535969942UL, 7967627309530633119UL), () => _ufle12jhs77_f_enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_amount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_amount => _ufle12jhs77_f_amount ?? (_ufle12jhs77_f_amount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4620231744031655326UL, 15413228034535967896UL), () => _ufle12jhs77_f_amount = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_startDelay;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_startDelay => _ufle12jhs77_f_startDelay ?? (_ufle12jhs77_f_startDelay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4746755855330187311UL, 12384430583430897816UL), () => _ufle12jhs77_f_startDelay = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_spawnInterval;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_spawnInterval => _ufle12jhs77_f_spawnInterval ?? (_ufle12jhs77_f_spawnInterval = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5135458425188321857UL, 10050492424633496228UL), () => _ufle12jhs77_f_spawnInterval = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_enemyGroups() : base(MetaDefault) {}
	private D_enemyGroups(BGId id) : base(MetaDefault, id) {}
	private D_enemyGroups(BGMetaEntity meta) : base(meta) {}
	private D_enemyGroups(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_enemyGroups FindEntity(Predicate<D_enemyGroups> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_enemyGroups> FindEntities(Predicate<D_enemyGroups> filter, List<D_enemyGroups> result=null, Comparison<D_enemyGroups> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_enemyGroups> action, Predicate<D_enemyGroups> filter=null, Comparison<D_enemyGroups> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_enemyGroups GetEntity(BGId entityId) => (D_enemyGroups) MetaDefault.GetEntity(entityId);
	public static D_enemyGroups GetEntity(int index) => (D_enemyGroups) MetaDefault[index];
	public static D_enemyGroups GetEntity(string entityName) => (D_enemyGroups) MetaDefault.GetEntity(entityName);
	public static D_enemyGroups NewEntity() => (D_enemyGroups) MetaDefault.NewEntity();
	public static D_enemyGroups NewEntity(BGId entityId) => (D_enemyGroups) MetaDefault.NewEntity(entityId);
	public static D_enemyGroups NewEntity(Action<D_enemyGroups> callback) => (D_enemyGroups) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_enemyGroups)entity)));
	public static D_enemyGroups NewEntity(D_NormalBattleWaveData owner) => (D_enemyGroups) MetaDefault.NewEntity(owner);
	public static D_enemyGroups NewEntity(D_NormalBattleWaveData owner, BGId entityId) => (D_enemyGroups) MetaDefault.NewEntity(owner, entityId);
	public static D_enemyGroups NewEntity(D_NormalBattleWaveData owner, Action<D_enemyGroups> callback) => (D_enemyGroups) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_enemyGroups)entity)));
}

public partial class D_eventEnemyGroups : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_eventEnemyGroups(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_eventEnemyGroups(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "eventEnemyGroups";
		public const string name = "name";
		public const string EventEnemyWaveData = "EventEnemyWaveData";
		public const string enemy = "enemy";
		public const string amount = "amount";
		public const string startDelay = "startDelay";
		public const string spawnInterval = "spawnInterval";
		public const string DropItem = "DropItem";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4895298204942174592UL,6438946908012187048UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_EventEnemyWaveData f_EventEnemyWaveData
	{
		get => (D_EventEnemyWaveData) _f_EventEnemyWaveData[Index];
		set => _f_EventEnemyWaveData[Index] = value;
	}
	public D_EnemyData f_enemy
	{
		get => (D_EnemyData) _f_enemy[Index];
		set => _f_enemy[Index] = value;
	}
	public System.Int32 f_amount
	{
		get => _f_amount[Index];
		set => _f_amount[Index] = value;
	}
	public System.Single f_startDelay
	{
		get => _f_startDelay[Index];
		set => _f_startDelay[Index] = value;
	}
	public System.Single f_spawnInterval
	{
		get => _f_spawnInterval[Index];
		set => _f_spawnInterval[Index] = value;
	}
	public D_ItemData f_DropItem
	{
		get => (D_ItemData) _f_DropItem[Index];
		set => _f_DropItem[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5668417547983427612UL, 9095147252298308249UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_EventEnemyWaveData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_EventEnemyWaveData => _ufle12jhs77_f_EventEnemyWaveData ?? (_ufle12jhs77_f_EventEnemyWaveData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5589513024312378556UL, 4074506813577772459UL), () => _ufle12jhs77_f_EventEnemyWaveData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_enemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_enemy => _ufle12jhs77_f_enemy ?? (_ufle12jhs77_f_enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5454715832937606795UL, 14550341362457555617UL), () => _ufle12jhs77_f_enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_amount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_amount => _ufle12jhs77_f_amount ?? (_ufle12jhs77_f_amount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5165326797557723190UL, 10760134389465675682UL), () => _ufle12jhs77_f_amount = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_startDelay;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_startDelay => _ufle12jhs77_f_startDelay ?? (_ufle12jhs77_f_startDelay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5488461168284859661UL, 15191731622099008409UL), () => _ufle12jhs77_f_startDelay = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_spawnInterval;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_spawnInterval => _ufle12jhs77_f_spawnInterval ?? (_ufle12jhs77_f_spawnInterval = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4618735360583894413UL, 4074289431108769941UL), () => _ufle12jhs77_f_spawnInterval = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_DropItem;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_DropItem => _ufle12jhs77_f_DropItem ?? (_ufle12jhs77_f_DropItem = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5655781804240440156UL, 12235158152955609221UL), () => _ufle12jhs77_f_DropItem = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_eventEnemyGroups() : base(MetaDefault) {}
	private D_eventEnemyGroups(BGId id) : base(MetaDefault, id) {}
	private D_eventEnemyGroups(BGMetaEntity meta) : base(meta) {}
	private D_eventEnemyGroups(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_eventEnemyGroups FindEntity(Predicate<D_eventEnemyGroups> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_eventEnemyGroups> FindEntities(Predicate<D_eventEnemyGroups> filter, List<D_eventEnemyGroups> result=null, Comparison<D_eventEnemyGroups> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_eventEnemyGroups> action, Predicate<D_eventEnemyGroups> filter=null, Comparison<D_eventEnemyGroups> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_eventEnemyGroups GetEntity(BGId entityId) => (D_eventEnemyGroups) MetaDefault.GetEntity(entityId);
	public static D_eventEnemyGroups GetEntity(int index) => (D_eventEnemyGroups) MetaDefault[index];
	public static D_eventEnemyGroups GetEntity(string entityName) => (D_eventEnemyGroups) MetaDefault.GetEntity(entityName);
	public static D_eventEnemyGroups NewEntity() => (D_eventEnemyGroups) MetaDefault.NewEntity();
	public static D_eventEnemyGroups NewEntity(BGId entityId) => (D_eventEnemyGroups) MetaDefault.NewEntity(entityId);
	public static D_eventEnemyGroups NewEntity(Action<D_eventEnemyGroups> callback) => (D_eventEnemyGroups) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_eventEnemyGroups)entity)));
	public static D_eventEnemyGroups NewEntity(D_EventEnemyWaveData owner) => (D_eventEnemyGroups) MetaDefault.NewEntity(owner);
	public static D_eventEnemyGroups NewEntity(D_EventEnemyWaveData owner, BGId entityId) => (D_eventEnemyGroups) MetaDefault.NewEntity(owner, entityId);
	public static D_eventEnemyGroups NewEntity(D_EventEnemyWaveData owner, Action<D_eventEnemyGroups> callback) => (D_eventEnemyGroups) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_eventEnemyGroups)entity)));
}

public partial class D_ItemData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_ItemData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_ItemData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "ItemData";
		public const string name = "name";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5706445817663690673UL,15716619024669096100UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4688380460305922721UL, 5488213706877374094UL), () => _ufle12jhs77_f_name = null));
	public List<Alias_rifegrt_eventEnemyGroups> RelatedeventEnemyGroupsListUsingDropItemRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_eventEnemyGroups>(Alias_rifegrt_eventEnemyGroups._f_DropItem, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_ItemData() : base(MetaDefault) {}
	private D_ItemData(BGId id) : base(MetaDefault, id) {}
	private D_ItemData(BGMetaEntity meta) : base(meta) {}
	private D_ItemData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_ItemData FindEntity(Predicate<D_ItemData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_ItemData> FindEntities(Predicate<D_ItemData> filter, List<D_ItemData> result=null, Comparison<D_ItemData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_ItemData> action, Predicate<D_ItemData> filter=null, Comparison<D_ItemData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_ItemData GetEntity(BGId entityId) => (D_ItemData) MetaDefault.GetEntity(entityId);
	public static D_ItemData GetEntity(int index) => (D_ItemData) MetaDefault[index];
	public static D_ItemData GetEntity(string entityName) => (D_ItemData) MetaDefault.GetEntity(entityName);
	public static D_ItemData NewEntity() => (D_ItemData) MetaDefault.NewEntity();
	public static D_ItemData NewEntity(BGId entityId) => (D_ItemData) MetaDefault.NewEntity(entityId);
	public static D_ItemData NewEntity(Action<D_ItemData> callback) => (D_ItemData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_ItemData)entity)));
}

public partial class D_HuntingOptionData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_HuntingOptionData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_HuntingOptionData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "HuntingOptionData";
		public const string name = "name";
		public const string title = "title";
		public const string description = "description";
		public const string spawnEnemy = "spawnEnemy";
		public const string huntingReward = "huntingReward";
		public const string huntingRisk = "huntingRisk";
		public const string prizeHuntingData = "prizeHuntingData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5381664928725939677UL,3173302106784987041UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.String f_title
	{
		get => _f_title[Index];
		set => _f_title[Index] = value;
	}
	public System.String f_description
	{
		get => _f_description[Index];
		set => _f_description[Index] = value;
	}
	public D_EnemyData f_spawnEnemy
	{
		get => (D_EnemyData) _f_spawnEnemy[Index];
		set => _f_spawnEnemy[Index] = value;
	}
	public List<D_huntingReward> f_huntingReward => BGCodeGenUtils.GetNested<D_huntingReward>(_f_huntingReward, Index);
	public List<D_huntingRisk> f_huntingRisk => BGCodeGenUtils.GetNested<D_huntingRisk>(_f_huntingRisk, Index);
	public D_PrizeHuntingWaveData f_prizeHuntingData
	{
		get => (D_PrizeHuntingWaveData) _f_prizeHuntingData[Index];
		set => _f_prizeHuntingData[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5632793469073674763UL, 15312157263250495362UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_title;
	public static BansheeGz.BGDatabase.BGFieldString _f_title => _ufle12jhs77_f_title ?? (_ufle12jhs77_f_title = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4879348127332380067UL, 1588136262267987901UL), () => _ufle12jhs77_f_title = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_description;
	public static BansheeGz.BGDatabase.BGFieldString _f_description => _ufle12jhs77_f_description ?? (_ufle12jhs77_f_description = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5562242753916143619UL, 15882605752197836984UL), () => _ufle12jhs77_f_description = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_spawnEnemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_spawnEnemy => _ufle12jhs77_f_spawnEnemy ?? (_ufle12jhs77_f_spawnEnemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5045409566211158908UL, 9253219390523044537UL), () => _ufle12jhs77_f_spawnEnemy = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_huntingReward;
	public static BansheeGz.BGDatabase.BGFieldNested _f_huntingReward => _ufle12jhs77_f_huntingReward ?? (_ufle12jhs77_f_huntingReward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5278750313338539653UL, 116098376903985325UL), () => _ufle12jhs77_f_huntingReward = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_huntingRisk;
	public static BansheeGz.BGDatabase.BGFieldNested _f_huntingRisk => _ufle12jhs77_f_huntingRisk ?? (_ufle12jhs77_f_huntingRisk = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5347818645389763292UL, 4413640911447275672UL), () => _ufle12jhs77_f_huntingRisk = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_prizeHuntingData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_prizeHuntingData => _ufle12jhs77_f_prizeHuntingData ?? (_ufle12jhs77_f_prizeHuntingData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5691757458297165726UL, 10460524771639610559UL), () => _ufle12jhs77_f_prizeHuntingData = null));
	public List<Alias_rifegrt_HuntingSelectTimeWaveData> RelatedHuntingSelectTimeWaveDataListUsinghuntingOptionsRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_HuntingSelectTimeWaveData>(Alias_rifegrt_HuntingSelectTimeWaveData._f_huntingOptions, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_HuntingOptionData() : base(MetaDefault) {}
	private D_HuntingOptionData(BGId id) : base(MetaDefault, id) {}
	private D_HuntingOptionData(BGMetaEntity meta) : base(meta) {}
	private D_HuntingOptionData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_HuntingOptionData FindEntity(Predicate<D_HuntingOptionData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_HuntingOptionData> FindEntities(Predicate<D_HuntingOptionData> filter, List<D_HuntingOptionData> result=null, Comparison<D_HuntingOptionData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_HuntingOptionData> action, Predicate<D_HuntingOptionData> filter=null, Comparison<D_HuntingOptionData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_HuntingOptionData GetEntity(BGId entityId) => (D_HuntingOptionData) MetaDefault.GetEntity(entityId);
	public static D_HuntingOptionData GetEntity(int index) => (D_HuntingOptionData) MetaDefault[index];
	public static D_HuntingOptionData GetEntity(string entityName) => (D_HuntingOptionData) MetaDefault.GetEntity(entityName);
	public static D_HuntingOptionData NewEntity() => (D_HuntingOptionData) MetaDefault.NewEntity();
	public static D_HuntingOptionData NewEntity(BGId entityId) => (D_HuntingOptionData) MetaDefault.NewEntity(entityId);
	public static D_HuntingOptionData NewEntity(Action<D_HuntingOptionData> callback) => (D_HuntingOptionData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_HuntingOptionData)entity)));
}

public partial class D_huntingReward : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_huntingReward(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_huntingReward(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "huntingReward";
		public const string name = "name";
		public const string HuntingOptionData = "HuntingOptionData";
		public const string statName = "statName";
		public const string value = "value";
		public const string valueMultiply = "valueMultiply";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4807751091952143854UL,17774875899487446670UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_HuntingOptionData f_HuntingOptionData
	{
		get => (D_HuntingOptionData) _f_HuntingOptionData[Index];
		set => _f_HuntingOptionData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_value
	{
		get => _f_value[Index];
		set => _f_value[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4767559766153589343UL, 1035765729740235170UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_HuntingOptionData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_HuntingOptionData => _ufle12jhs77_f_HuntingOptionData ?? (_ufle12jhs77_f_HuntingOptionData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5589335258544303844UL, 6238070593071876283UL), () => _ufle12jhs77_f_HuntingOptionData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5759354256606185785UL, 3474354405051410593UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_value;
	public static BansheeGz.BGDatabase.BGFieldInt _f_value => _ufle12jhs77_f_value ?? (_ufle12jhs77_f_value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5115408021252353781UL, 2940980615061012102UL), () => _ufle12jhs77_f_value = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5709446886483301900UL, 9647046658204248194UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_huntingReward() : base(MetaDefault) {}
	private D_huntingReward(BGId id) : base(MetaDefault, id) {}
	private D_huntingReward(BGMetaEntity meta) : base(meta) {}
	private D_huntingReward(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_huntingReward FindEntity(Predicate<D_huntingReward> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_huntingReward> FindEntities(Predicate<D_huntingReward> filter, List<D_huntingReward> result=null, Comparison<D_huntingReward> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_huntingReward> action, Predicate<D_huntingReward> filter=null, Comparison<D_huntingReward> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_huntingReward GetEntity(BGId entityId) => (D_huntingReward) MetaDefault.GetEntity(entityId);
	public static D_huntingReward GetEntity(int index) => (D_huntingReward) MetaDefault[index];
	public static D_huntingReward GetEntity(string entityName) => (D_huntingReward) MetaDefault.GetEntity(entityName);
	public static D_huntingReward NewEntity() => (D_huntingReward) MetaDefault.NewEntity();
	public static D_huntingReward NewEntity(BGId entityId) => (D_huntingReward) MetaDefault.NewEntity(entityId);
	public static D_huntingReward NewEntity(Action<D_huntingReward> callback) => (D_huntingReward) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_huntingReward)entity)));
	public static D_huntingReward NewEntity(D_HuntingOptionData owner) => (D_huntingReward) MetaDefault.NewEntity(owner);
	public static D_huntingReward NewEntity(D_HuntingOptionData owner, BGId entityId) => (D_huntingReward) MetaDefault.NewEntity(owner, entityId);
	public static D_huntingReward NewEntity(D_HuntingOptionData owner, Action<D_huntingReward> callback) => (D_huntingReward) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_huntingReward)entity)));
}

public partial class D_huntingRisk : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_huntingRisk(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_huntingRisk(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "huntingRisk";
		public const string name = "name";
		public const string HuntingOptionData = "HuntingOptionData";
		public const string statName = "statName";
		public const string value = "value";
		public const string valueMultiply = "valueMultiply";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5193281499204930993UL,8126367542010743195UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_HuntingOptionData f_HuntingOptionData
	{
		get => (D_HuntingOptionData) _f_HuntingOptionData[Index];
		set => _f_HuntingOptionData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_value
	{
		get => _f_value[Index];
		set => _f_value[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5361911760733470271UL, 2637356350871549334UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_HuntingOptionData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_HuntingOptionData => _ufle12jhs77_f_HuntingOptionData ?? (_ufle12jhs77_f_HuntingOptionData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4686832928190949775UL, 1357236513642251172UL), () => _ufle12jhs77_f_HuntingOptionData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4738147694662960627UL, 3394706093966033024UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_value;
	public static BansheeGz.BGDatabase.BGFieldInt _f_value => _ufle12jhs77_f_value ?? (_ufle12jhs77_f_value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5146288378361260847UL, 13892399325673393550UL), () => _ufle12jhs77_f_value = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5647860076045685610UL, 2173440064273157280UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_huntingRisk() : base(MetaDefault) {}
	private D_huntingRisk(BGId id) : base(MetaDefault, id) {}
	private D_huntingRisk(BGMetaEntity meta) : base(meta) {}
	private D_huntingRisk(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_huntingRisk FindEntity(Predicate<D_huntingRisk> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_huntingRisk> FindEntities(Predicate<D_huntingRisk> filter, List<D_huntingRisk> result=null, Comparison<D_huntingRisk> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_huntingRisk> action, Predicate<D_huntingRisk> filter=null, Comparison<D_huntingRisk> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_huntingRisk GetEntity(BGId entityId) => (D_huntingRisk) MetaDefault.GetEntity(entityId);
	public static D_huntingRisk GetEntity(int index) => (D_huntingRisk) MetaDefault[index];
	public static D_huntingRisk GetEntity(string entityName) => (D_huntingRisk) MetaDefault.GetEntity(entityName);
	public static D_huntingRisk NewEntity() => (D_huntingRisk) MetaDefault.NewEntity();
	public static D_huntingRisk NewEntity(BGId entityId) => (D_huntingRisk) MetaDefault.NewEntity(entityId);
	public static D_huntingRisk NewEntity(Action<D_huntingRisk> callback) => (D_huntingRisk) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_huntingRisk)entity)));
	public static D_huntingRisk NewEntity(D_HuntingOptionData owner) => (D_huntingRisk) MetaDefault.NewEntity(owner);
	public static D_huntingRisk NewEntity(D_HuntingOptionData owner, BGId entityId) => (D_huntingRisk) MetaDefault.NewEntity(owner, entityId);
	public static D_huntingRisk NewEntity(D_HuntingOptionData owner, Action<D_huntingRisk> callback) => (D_huntingRisk) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_huntingRisk)entity)));
}

public partial class D_supportEnemys : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_supportEnemys(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_supportEnemys(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "supportEnemys";
		public const string name = "name";
		public const string PrizeHuntingWaveData = "PrizeHuntingWaveData";
		public const string enemy = "enemy";
		public const string amount = "amount";
		public const string startDelay = "startDelay";
		public const string spawnInterval = "spawnInterval";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4950246528042244235UL,14614487806402997917UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_PrizeHuntingWaveData f_PrizeHuntingWaveData
	{
		get => (D_PrizeHuntingWaveData) _f_PrizeHuntingWaveData[Index];
		set => _f_PrizeHuntingWaveData[Index] = value;
	}
	public D_EnemyData f_enemy
	{
		get => (D_EnemyData) _f_enemy[Index];
		set => _f_enemy[Index] = value;
	}
	public System.Int32 f_amount
	{
		get => _f_amount[Index];
		set => _f_amount[Index] = value;
	}
	public System.Single f_startDelay
	{
		get => _f_startDelay[Index];
		set => _f_startDelay[Index] = value;
	}
	public System.Single f_spawnInterval
	{
		get => _f_spawnInterval[Index];
		set => _f_spawnInterval[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5432290323361383866UL, 5977005245499774096UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_PrizeHuntingWaveData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_PrizeHuntingWaveData => _ufle12jhs77_f_PrizeHuntingWaveData ?? (_ufle12jhs77_f_PrizeHuntingWaveData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5351415399645401156UL, 15385136228119368081UL), () => _ufle12jhs77_f_PrizeHuntingWaveData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_enemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_enemy => _ufle12jhs77_f_enemy ?? (_ufle12jhs77_f_enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4892697776862337650UL, 645114319961422743UL), () => _ufle12jhs77_f_enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_amount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_amount => _ufle12jhs77_f_amount ?? (_ufle12jhs77_f_amount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5237349046338497700UL, 5421518682704987293UL), () => _ufle12jhs77_f_amount = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_startDelay;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_startDelay => _ufle12jhs77_f_startDelay ?? (_ufle12jhs77_f_startDelay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5747638831457700975UL, 18298567752827606408UL), () => _ufle12jhs77_f_startDelay = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_spawnInterval;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_spawnInterval => _ufle12jhs77_f_spawnInterval ?? (_ufle12jhs77_f_spawnInterval = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5391812215729597124UL, 15504113221566305674UL), () => _ufle12jhs77_f_spawnInterval = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_supportEnemys() : base(MetaDefault) {}
	private D_supportEnemys(BGId id) : base(MetaDefault, id) {}
	private D_supportEnemys(BGMetaEntity meta) : base(meta) {}
	private D_supportEnemys(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_supportEnemys FindEntity(Predicate<D_supportEnemys> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_supportEnemys> FindEntities(Predicate<D_supportEnemys> filter, List<D_supportEnemys> result=null, Comparison<D_supportEnemys> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_supportEnemys> action, Predicate<D_supportEnemys> filter=null, Comparison<D_supportEnemys> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_supportEnemys GetEntity(BGId entityId) => (D_supportEnemys) MetaDefault.GetEntity(entityId);
	public static D_supportEnemys GetEntity(int index) => (D_supportEnemys) MetaDefault[index];
	public static D_supportEnemys GetEntity(string entityName) => (D_supportEnemys) MetaDefault.GetEntity(entityName);
	public static D_supportEnemys NewEntity() => (D_supportEnemys) MetaDefault.NewEntity();
	public static D_supportEnemys NewEntity(BGId entityId) => (D_supportEnemys) MetaDefault.NewEntity(entityId);
	public static D_supportEnemys NewEntity(Action<D_supportEnemys> callback) => (D_supportEnemys) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_supportEnemys)entity)));
	public static D_supportEnemys NewEntity(D_PrizeHuntingWaveData owner) => (D_supportEnemys) MetaDefault.NewEntity(owner);
	public static D_supportEnemys NewEntity(D_PrizeHuntingWaveData owner, BGId entityId) => (D_supportEnemys) MetaDefault.NewEntity(owner, entityId);
	public static D_supportEnemys NewEntity(D_PrizeHuntingWaveData owner, Action<D_supportEnemys> callback) => (D_supportEnemys) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_supportEnemys)entity)));
}

public partial class D_supportEnemyGroups : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_supportEnemyGroups(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_supportEnemyGroups(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "supportEnemyGroups";
		public const string name = "name";
		public const string BossBattleWaveData = "BossBattleWaveData";
		public const string enemy = "enemy";
		public const string amount = "amount";
		public const string startDelay = "startDelay";
		public const string spawnInterval = "spawnInterval";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4924694860503880319UL,5424575393983852937UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_BossBattleWaveData f_BossBattleWaveData
	{
		get => (D_BossBattleWaveData) _f_BossBattleWaveData[Index];
		set => _f_BossBattleWaveData[Index] = value;
	}
	public D_EnemyData f_enemy
	{
		get => (D_EnemyData) _f_enemy[Index];
		set => _f_enemy[Index] = value;
	}
	public System.Int32 f_amount
	{
		get => _f_amount[Index];
		set => _f_amount[Index] = value;
	}
	public System.Single f_startDelay
	{
		get => _f_startDelay[Index];
		set => _f_startDelay[Index] = value;
	}
	public System.Single f_spawnInterval
	{
		get => _f_spawnInterval[Index];
		set => _f_spawnInterval[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4796746008283244305UL, 1706386953291059117UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_BossBattleWaveData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_BossBattleWaveData => _ufle12jhs77_f_BossBattleWaveData ?? (_ufle12jhs77_f_BossBattleWaveData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4992097409164070597UL, 1668326814659343027UL), () => _ufle12jhs77_f_BossBattleWaveData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_enemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_enemy => _ufle12jhs77_f_enemy ?? (_ufle12jhs77_f_enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4742221552628461878UL, 12319941153233842586UL), () => _ufle12jhs77_f_enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_amount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_amount => _ufle12jhs77_f_amount ?? (_ufle12jhs77_f_amount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5230058905675451543UL, 7895154733554640301UL), () => _ufle12jhs77_f_amount = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_startDelay;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_startDelay => _ufle12jhs77_f_startDelay ?? (_ufle12jhs77_f_startDelay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5340412892615738349UL, 3745797179653814707UL), () => _ufle12jhs77_f_startDelay = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_spawnInterval;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_spawnInterval => _ufle12jhs77_f_spawnInterval ?? (_ufle12jhs77_f_spawnInterval = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4918178015867468418UL, 7784890349851683462UL), () => _ufle12jhs77_f_spawnInterval = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_enemyGroups.Factory _factory27_PFS = new D_enemyGroups.Factory();
	private static readonly D_eventEnemyGroups.Factory _factory28_PFS = new D_eventEnemyGroups.Factory();
	private static readonly D_ItemData.Factory _factory29_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory30_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory31_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory32_PFS = new D_huntingRisk.Factory();
	private static readonly D_supportEnemys.Factory _factory33_PFS = new D_supportEnemys.Factory();
	private static readonly D_supportEnemyGroups.Factory _factory34_PFS = new D_supportEnemyGroups.Factory();
	private D_supportEnemyGroups() : base(MetaDefault) {}
	private D_supportEnemyGroups(BGId id) : base(MetaDefault, id) {}
	private D_supportEnemyGroups(BGMetaEntity meta) : base(meta) {}
	private D_supportEnemyGroups(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_supportEnemyGroups FindEntity(Predicate<D_supportEnemyGroups> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_supportEnemyGroups> FindEntities(Predicate<D_supportEnemyGroups> filter, List<D_supportEnemyGroups> result=null, Comparison<D_supportEnemyGroups> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_supportEnemyGroups> action, Predicate<D_supportEnemyGroups> filter=null, Comparison<D_supportEnemyGroups> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_supportEnemyGroups GetEntity(BGId entityId) => (D_supportEnemyGroups) MetaDefault.GetEntity(entityId);
	public static D_supportEnemyGroups GetEntity(int index) => (D_supportEnemyGroups) MetaDefault[index];
	public static D_supportEnemyGroups GetEntity(string entityName) => (D_supportEnemyGroups) MetaDefault.GetEntity(entityName);
	public static D_supportEnemyGroups NewEntity() => (D_supportEnemyGroups) MetaDefault.NewEntity();
	public static D_supportEnemyGroups NewEntity(BGId entityId) => (D_supportEnemyGroups) MetaDefault.NewEntity(entityId);
	public static D_supportEnemyGroups NewEntity(Action<D_supportEnemyGroups> callback) => (D_supportEnemyGroups) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_supportEnemyGroups)entity)));
	public static D_supportEnemyGroups NewEntity(D_BossBattleWaveData owner) => (D_supportEnemyGroups) MetaDefault.NewEntity(owner);
	public static D_supportEnemyGroups NewEntity(D_BossBattleWaveData owner, BGId entityId) => (D_supportEnemyGroups) MetaDefault.NewEntity(owner, entityId);
	public static D_supportEnemyGroups NewEntity(D_BossBattleWaveData owner, Action<D_supportEnemyGroups> callback) => (D_supportEnemyGroups) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_supportEnemyGroups)entity)));
}

public partial interface D_WaveDummyData  : BGAbstractEntityI
{
	System.String f_name {get; set;}
}
#pragma warning restore 414
