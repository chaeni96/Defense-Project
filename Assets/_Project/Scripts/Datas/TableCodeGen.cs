using System;
using System.Collections.Generic;
using BansheeGz.BGDatabase;
using Alias_rifegrt_unitBuildData = D_unitBuildData;
using Alias_rifegrt_SpecialTile = D_SpecialTile;
using Alias_rifegrt_UnitData = D_UnitData;
using Alias_rifegrt_EnemyData = D_EnemyData;
using Alias_rifegrt_enemyGroup = D_enemyGroup;
using Alias_rifegrt_BossBattleWaveData = D_BossBattleWaveData;
using Alias_rifegrt_HuntingOptionData = D_HuntingOptionData;
using Alias_rifegrt_SpawnEnemyEventData = D_SpawnEnemyEventData;
using Alias_rifegrt_cellData = D_cellData;
using Alias_rifegrt_StageData = D_StageData;
using Alias_rifegrt_WildCardWaveData = D_WildCardWaveData;
using Alias_rifegrt_WildCardData = D_WildCardData;
using Alias_rifegrt_itemList = D_itemList;
using Alias_rifegrt_HuntingSelectTimeWaveData = D_HuntingSelectTimeWaveData;
using Alias_rifegrt_ItemData = D_ItemData;
using Alias_rifegrt_DropItemEventData = D_DropItemEventData;
using Alias_rifegrt_NormalBattleWaveData = D_NormalBattleWaveData;
using Alias_rifegrt_EventEnemyWaveData = D_EventEnemyWaveData;

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

#pragma warning disable 414

public partial class D_TileCardData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_TileCardData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_TileCardData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "TileCardData";
		public const string name = "name";
		public const string unitBuildData = "unitBuildData";
		public const string grade = "grade";
		public const string Cost = "Cost";
		public const string isMultiTileUinit = "isMultiTileUinit";
		public const string TileShpae = "TileShpae";
		public const string ShopGrade = "ShopGrade";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5526519764914468050UL,4239600642928235181UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public List<D_unitBuildData> f_unitBuildData => BGCodeGenUtils.GetNested<D_unitBuildData>(_f_unitBuildData, Index);
	public BGDatabaseEnum.UnitGrade f_grade
	{
		get => (BGDatabaseEnum.UnitGrade) _f_grade.GetStoredValue(Index);
		set => _f_grade.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_Cost
	{
		get => _f_Cost[Index];
		set => _f_Cost[Index] = value;
	}
	public System.Boolean f_isMultiTileUinit
	{
		get => _f_isMultiTileUinit[Index];
		set => _f_isMultiTileUinit[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4612699089538755472UL, 15389567449175696803UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_unitBuildData;
	public static BansheeGz.BGDatabase.BGFieldNested _f_unitBuildData => _ufle12jhs77_f_unitBuildData ?? (_ufle12jhs77_f_unitBuildData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5267104093635224925UL, 11893930471853365640UL), () => _ufle12jhs77_f_unitBuildData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_grade;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_grade => _ufle12jhs77_f_grade ?? (_ufle12jhs77_f_grade = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5085254489454765700UL, 2735600988159512248UL), () => _ufle12jhs77_f_grade = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_Cost;
	public static BansheeGz.BGDatabase.BGFieldInt _f_Cost => _ufle12jhs77_f_Cost ?? (_ufle12jhs77_f_Cost = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5033112527408708228UL, 18365848753655382442UL), () => _ufle12jhs77_f_Cost = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_isMultiTileUinit;
	public static BansheeGz.BGDatabase.BGFieldBool _f_isMultiTileUinit => _ufle12jhs77_f_isMultiTileUinit ?? (_ufle12jhs77_f_isMultiTileUinit = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5471129788307511410UL, 7282507863895441290UL), () => _ufle12jhs77_f_isMultiTileUinit = null));
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_TileShpae;
	public static BansheeGz.BGDatabase.BGKey _TileShpae => _edeht3sdad33_TileShpae ?? (_edeht3sdad33_TileShpae = BGCodeGenUtils.GetKey(MetaDefault, new BGId(4974985753661443278UL, 14549488637077833392UL), () => _edeht3sdad33_TileShpae = null));
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_ShopGrade;
	public static BansheeGz.BGDatabase.BGKey _ShopGrade => _edeht3sdad33_ShopGrade ?? (_edeht3sdad33_ShopGrade = BGCodeGenUtils.GetKey(MetaDefault, new BGId(5679847359208220457UL, 15582120046338116030UL), () => _edeht3sdad33_ShopGrade = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_TileCardData() : base(MetaDefault) {}
	private D_TileCardData(BGId id) : base(MetaDefault, id) {}
	private D_TileCardData(BGMetaEntity meta) : base(meta) {}
	private D_TileCardData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_TileCardData FindEntity(Predicate<D_TileCardData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_TileCardData> FindEntities(Predicate<D_TileCardData> filter, List<D_TileCardData> result=null, Comparison<D_TileCardData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_TileCardData> action, Predicate<D_TileCardData> filter=null, Comparison<D_TileCardData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_TileCardData GetEntity(BGId entityId) => (D_TileCardData) MetaDefault.GetEntity(entityId);
	public static D_TileCardData GetEntity(int index) => (D_TileCardData) MetaDefault[index];
	public static D_TileCardData GetEntity(string entityName) => (D_TileCardData) MetaDefault.GetEntity(entityName);
	public static D_TileCardData NewEntity() => (D_TileCardData) MetaDefault.NewEntity();
	public static D_TileCardData NewEntity(BGId entityId) => (D_TileCardData) MetaDefault.NewEntity(entityId);
	public static D_TileCardData NewEntity(Action<D_TileCardData> callback) => (D_TileCardData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_TileCardData)entity)));
	public static D_TileCardData GetEntityByKeyTileShpae(System.String name) => (D_TileCardData) _TileShpae.GetEntityByKey<System.String>(name);
	public static D_TileCardData GetEntityByKeyShopGrade(BGDatabaseEnum.UnitGrade grade) => (D_TileCardData) _ShopGrade.GetEntityByKey<BGDatabaseEnum.UnitGrade>(grade);
}

public partial class D_LocalUserData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_LocalUserData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_LocalUserData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "LocalUserData";
		public const string name = "name";
		public const string clearEpisodeNumber = "clearEpisodeNumber";
		public const string lastClearedStageNumber = "lastClearedStageNumber";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4625932937206405802UL,11707112876743021752UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_clearEpisodeNumber
	{
		get => _f_clearEpisodeNumber[Index];
		set => _f_clearEpisodeNumber[Index] = value;
	}
	public System.Int32 f_lastClearedStageNumber
	{
		get => _f_lastClearedStageNumber[Index];
		set => _f_lastClearedStageNumber[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5570864947923372496UL, 16114093359231942036UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_clearEpisodeNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_clearEpisodeNumber => _ufle12jhs77_f_clearEpisodeNumber ?? (_ufle12jhs77_f_clearEpisodeNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5371381866835969752UL, 2168720030824874419UL), () => _ufle12jhs77_f_clearEpisodeNumber = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_lastClearedStageNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_lastClearedStageNumber => _ufle12jhs77_f_lastClearedStageNumber ?? (_ufle12jhs77_f_lastClearedStageNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5612662480888816242UL, 14296249210567434408UL), () => _ufle12jhs77_f_lastClearedStageNumber = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_LocalUserData() : base(MetaDefault) {}
	private D_LocalUserData(BGId id) : base(MetaDefault, id) {}
	private D_LocalUserData(BGMetaEntity meta) : base(meta) {}
	private D_LocalUserData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_LocalUserData FindEntity(Predicate<D_LocalUserData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_LocalUserData> FindEntities(Predicate<D_LocalUserData> filter, List<D_LocalUserData> result=null, Comparison<D_LocalUserData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_LocalUserData> action, Predicate<D_LocalUserData> filter=null, Comparison<D_LocalUserData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_LocalUserData GetEntity(BGId entityId) => (D_LocalUserData) MetaDefault.GetEntity(entityId);
	public static D_LocalUserData GetEntity(int index) => (D_LocalUserData) MetaDefault[index];
	public static D_LocalUserData GetEntity(string entityName) => (D_LocalUserData) MetaDefault.GetEntity(entityName);
	public static D_LocalUserData NewEntity() => (D_LocalUserData) MetaDefault.NewEntity();
	public static D_LocalUserData NewEntity(BGId entityId) => (D_LocalUserData) MetaDefault.NewEntity(entityId);
	public static D_LocalUserData NewEntity(Action<D_LocalUserData> callback) => (D_LocalUserData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_LocalUserData)entity)));
}

public partial class D_UnitData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_UnitData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_UnitData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "UnitData";
		public const string name = "name";
		public const string UnitType = "UnitType";
		public const string StatSubject = "StatSubject";
		public const string SkillAttackType = "SkillAttackType";
		public const string UnitPoolingKey = "UnitPoolingKey";
		public const string SkillPoolingKey = "SkillPoolingKey";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5098187849243670608UL,7590059858118427043UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public UnitType f_UnitType
	{
		get => (UnitType) _f_UnitType.GetStoredValue(Index);
		set => _f_UnitType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<StatSubject> f_StatSubject
	{
		get => BGCodeGenUtils.EnumListGet<StatSubject>(_f_StatSubject, Index);
		set => BGCodeGenUtils.EnumListSet<StatSubject>(_f_StatSubject, Index, value);
	}
	public BGDatabaseEnum.SkillAttackType f_SkillAttackType
	{
		get => (BGDatabaseEnum.SkillAttackType) _f_SkillAttackType.GetStoredValue(Index);
		set => _f_SkillAttackType.SetStoredValue(Index, (System.Int32) value);
	}
	public D_ObjectPoolData f_UnitPoolingKey
	{
		get => (D_ObjectPoolData) _f_UnitPoolingKey[Index];
		set => _f_UnitPoolingKey[Index] = value;
	}
	public D_ObjectPoolData f_SkillPoolingKey
	{
		get => (D_ObjectPoolData) _f_SkillPoolingKey[Index];
		set => _f_SkillPoolingKey[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4978381386621882592UL, 9377071611302703509UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_UnitType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_UnitType => _ufle12jhs77_f_UnitType ?? (_ufle12jhs77_f_UnitType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4766701231171255779UL, 8920734757428101046UL), () => _ufle12jhs77_f_UnitType = null));
	private static BansheeGz.BGDatabase.BGFieldEnumList _ufle12jhs77_f_StatSubject;
	public static BansheeGz.BGDatabase.BGFieldEnumList _f_StatSubject => _ufle12jhs77_f_StatSubject ?? (_ufle12jhs77_f_StatSubject = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnumList>(MetaDefault, new BGId(5195431396154430378UL, 4516171086743362447UL), () => _ufle12jhs77_f_StatSubject = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_SkillAttackType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_SkillAttackType => _ufle12jhs77_f_SkillAttackType ?? (_ufle12jhs77_f_SkillAttackType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5274816935596477599UL, 15588288739445877685UL), () => _ufle12jhs77_f_SkillAttackType = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_UnitPoolingKey;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_UnitPoolingKey => _ufle12jhs77_f_UnitPoolingKey ?? (_ufle12jhs77_f_UnitPoolingKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4766850798404632622UL, 6480570574369079984UL), () => _ufle12jhs77_f_UnitPoolingKey = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_SkillPoolingKey;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_SkillPoolingKey => _ufle12jhs77_f_SkillPoolingKey ?? (_ufle12jhs77_f_SkillPoolingKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4721613304390874734UL, 7492828072908847792UL), () => _ufle12jhs77_f_SkillPoolingKey = null));
	public List<Alias_rifegrt_unitBuildData> RelatedunitBuildDataListUsingunitDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_unitBuildData>(Alias_rifegrt_unitBuildData._f_unitData, Id);
	public List<Alias_rifegrt_SpecialTile> RelatedSpecialTileListUsingspecialObjectRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_SpecialTile>(Alias_rifegrt_SpecialTile._f_specialObject, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_UnitData() : base(MetaDefault) {}
	private D_UnitData(BGId id) : base(MetaDefault, id) {}
	private D_UnitData(BGMetaEntity meta) : base(meta) {}
	private D_UnitData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_UnitData FindEntity(Predicate<D_UnitData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_UnitData> FindEntities(Predicate<D_UnitData> filter, List<D_UnitData> result=null, Comparison<D_UnitData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_UnitData> action, Predicate<D_UnitData> filter=null, Comparison<D_UnitData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_UnitData GetEntity(BGId entityId) => (D_UnitData) MetaDefault.GetEntity(entityId);
	public static D_UnitData GetEntity(int index) => (D_UnitData) MetaDefault[index];
	public static D_UnitData GetEntity(string entityName) => (D_UnitData) MetaDefault.GetEntity(entityName);
	public static D_UnitData NewEntity() => (D_UnitData) MetaDefault.NewEntity();
	public static D_UnitData NewEntity(BGId entityId) => (D_UnitData) MetaDefault.NewEntity(entityId);
	public static D_UnitData NewEntity(Action<D_UnitData> callback) => (D_UnitData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_UnitData)entity)));
}

public partial class D_unitBuildData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_unitBuildData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_unitBuildData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "unitBuildData";
		public const string name = "name";
		public const string TileCardDa = "TileCardDa";
		public const string unitData = "unitData";
		public const string TilePosData = "TilePosData";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4799327628856687378UL,3776090101215706293UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_TileCardData f_TileCardDa
	{
		get => (D_TileCardData) _f_TileCardDa[Index];
		set => _f_TileCardDa[Index] = value;
	}
	public D_UnitData f_unitData
	{
		get => (D_UnitData) _f_unitData[Index];
		set => _f_unitData[Index] = value;
	}
	public D_TilePosData f_TilePosData
	{
		get => (D_TilePosData) _f_TilePosData[Index];
		set => _f_TilePosData[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5119949781748048341UL, 1974210095801998015UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_TileCardDa;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_TileCardDa => _ufle12jhs77_f_TileCardDa ?? (_ufle12jhs77_f_TileCardDa = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5201128059908877541UL, 10865111936391984023UL), () => _ufle12jhs77_f_TileCardDa = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_unitData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_unitData => _ufle12jhs77_f_unitData ?? (_ufle12jhs77_f_unitData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4832644335004946023UL, 16677909979451640761UL), () => _ufle12jhs77_f_unitData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_TilePosData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_TilePosData => _ufle12jhs77_f_TilePosData ?? (_ufle12jhs77_f_TilePosData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5477621657986745158UL, 3293241283015388857UL), () => _ufle12jhs77_f_TilePosData = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_unitBuildData() : base(MetaDefault) {}
	private D_unitBuildData(BGId id) : base(MetaDefault, id) {}
	private D_unitBuildData(BGMetaEntity meta) : base(meta) {}
	private D_unitBuildData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_unitBuildData FindEntity(Predicate<D_unitBuildData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_unitBuildData> FindEntities(Predicate<D_unitBuildData> filter, List<D_unitBuildData> result=null, Comparison<D_unitBuildData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_unitBuildData> action, Predicate<D_unitBuildData> filter=null, Comparison<D_unitBuildData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_unitBuildData GetEntity(BGId entityId) => (D_unitBuildData) MetaDefault.GetEntity(entityId);
	public static D_unitBuildData GetEntity(int index) => (D_unitBuildData) MetaDefault[index];
	public static D_unitBuildData GetEntity(string entityName) => (D_unitBuildData) MetaDefault.GetEntity(entityName);
	public static D_unitBuildData NewEntity() => (D_unitBuildData) MetaDefault.NewEntity();
	public static D_unitBuildData NewEntity(BGId entityId) => (D_unitBuildData) MetaDefault.NewEntity(entityId);
	public static D_unitBuildData NewEntity(Action<D_unitBuildData> callback) => (D_unitBuildData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_unitBuildData)entity)));
	public static D_unitBuildData NewEntity(D_TileCardData owner) => (D_unitBuildData) MetaDefault.NewEntity(owner);
	public static D_unitBuildData NewEntity(D_TileCardData owner, BGId entityId) => (D_unitBuildData) MetaDefault.NewEntity(owner, entityId);
	public static D_unitBuildData NewEntity(D_TileCardData owner, Action<D_unitBuildData> callback) => (D_unitBuildData) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_unitBuildData)entity)));
}

public partial class D_UnitShopChanceData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_UnitShopChanceData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_UnitShopChanceData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "UnitShopChanceData";
		public const string name = "name";
		public const string shopLevel = "shopLevel";
		public const string upgradeCost = "upgradeCost";
		public const string normalGradeChance = "normalGradeChance";
		public const string rareGradeChance = "rareGradeChance";
		public const string epicGradeChance = "epicGradeChance";
		public const string legendaryGradeChance = "legendaryGradeChance";
		public const string mythicGradeChance = "mythicGradeChance";
		public const string ShopLevel = "ShopLevel";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4664970763188900203UL,12080311741352732819UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_shopLevel
	{
		get => _f_shopLevel[Index];
		set => _f_shopLevel[Index] = value;
	}
	public System.Int32 f_upgradeCost
	{
		get => _f_upgradeCost[Index];
		set => _f_upgradeCost[Index] = value;
	}
	public System.Int32 f_normalGradeChance
	{
		get => _f_normalGradeChance[Index];
		set => _f_normalGradeChance[Index] = value;
	}
	public System.Int32 f_rareGradeChance
	{
		get => _f_rareGradeChance[Index];
		set => _f_rareGradeChance[Index] = value;
	}
	public System.Int32 f_epicGradeChance
	{
		get => _f_epicGradeChance[Index];
		set => _f_epicGradeChance[Index] = value;
	}
	public System.Int32 f_legendaryGradeChance
	{
		get => _f_legendaryGradeChance[Index];
		set => _f_legendaryGradeChance[Index] = value;
	}
	public System.Int32 f_mythicGradeChance
	{
		get => _f_mythicGradeChance[Index];
		set => _f_mythicGradeChance[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5700037316086172204UL, 9428115730578618498UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_shopLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _f_shopLevel => _ufle12jhs77_f_shopLevel ?? (_ufle12jhs77_f_shopLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5209453747907503739UL, 16616529657275590799UL), () => _ufle12jhs77_f_shopLevel = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_upgradeCost;
	public static BansheeGz.BGDatabase.BGFieldInt _f_upgradeCost => _ufle12jhs77_f_upgradeCost ?? (_ufle12jhs77_f_upgradeCost = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5544517854502321174UL, 16527826181851315888UL), () => _ufle12jhs77_f_upgradeCost = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_normalGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_normalGradeChance => _ufle12jhs77_f_normalGradeChance ?? (_ufle12jhs77_f_normalGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4747667146126538070UL, 10838641894382133891UL), () => _ufle12jhs77_f_normalGradeChance = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_rareGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_rareGradeChance => _ufle12jhs77_f_rareGradeChance ?? (_ufle12jhs77_f_rareGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4800310075837301652UL, 15965513266530679210UL), () => _ufle12jhs77_f_rareGradeChance = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_epicGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_epicGradeChance => _ufle12jhs77_f_epicGradeChance ?? (_ufle12jhs77_f_epicGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5751856468742030222UL, 11431852624877671084UL), () => _ufle12jhs77_f_epicGradeChance = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_legendaryGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_legendaryGradeChance => _ufle12jhs77_f_legendaryGradeChance ?? (_ufle12jhs77_f_legendaryGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5357090667896251197UL, 8100459591133873333UL), () => _ufle12jhs77_f_legendaryGradeChance = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_mythicGradeChance;
	public static BansheeGz.BGDatabase.BGFieldInt _f_mythicGradeChance => _ufle12jhs77_f_mythicGradeChance ?? (_ufle12jhs77_f_mythicGradeChance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5683072619301050186UL, 1397330924013920176UL), () => _ufle12jhs77_f_mythicGradeChance = null));
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_ShopLevel;
	public static BansheeGz.BGDatabase.BGKey _ShopLevel => _edeht3sdad33_ShopLevel ?? (_edeht3sdad33_ShopLevel = BGCodeGenUtils.GetKey(MetaDefault, new BGId(5047775113214466118UL, 10985792114965795003UL), () => _edeht3sdad33_ShopLevel = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_UnitShopChanceData() : base(MetaDefault) {}
	private D_UnitShopChanceData(BGId id) : base(MetaDefault, id) {}
	private D_UnitShopChanceData(BGMetaEntity meta) : base(meta) {}
	private D_UnitShopChanceData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_UnitShopChanceData FindEntity(Predicate<D_UnitShopChanceData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_UnitShopChanceData> FindEntities(Predicate<D_UnitShopChanceData> filter, List<D_UnitShopChanceData> result=null, Comparison<D_UnitShopChanceData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_UnitShopChanceData> action, Predicate<D_UnitShopChanceData> filter=null, Comparison<D_UnitShopChanceData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_UnitShopChanceData GetEntity(BGId entityId) => (D_UnitShopChanceData) MetaDefault.GetEntity(entityId);
	public static D_UnitShopChanceData GetEntity(int index) => (D_UnitShopChanceData) MetaDefault[index];
	public static D_UnitShopChanceData GetEntity(string entityName) => (D_UnitShopChanceData) MetaDefault.GetEntity(entityName);
	public static D_UnitShopChanceData NewEntity() => (D_UnitShopChanceData) MetaDefault.NewEntity();
	public static D_UnitShopChanceData NewEntity(BGId entityId) => (D_UnitShopChanceData) MetaDefault.NewEntity(entityId);
	public static D_UnitShopChanceData NewEntity(Action<D_UnitShopChanceData> callback) => (D_UnitShopChanceData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_UnitShopChanceData)entity)));
	public static D_UnitShopChanceData GetEntityByKeyShopLevel(System.Int32 shopLevel) => (D_UnitShopChanceData) _ShopLevel.GetEntityByKey<System.Int32>(shopLevel);
}

public partial class D_ObjectPoolData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_ObjectPoolData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_ObjectPoolData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "ObjectPoolData";
		public const string name = "name";
		public const string initialSize = "initialSize";
		public const string PoolObjectAddressableKey = "PoolObjectAddressableKey";
		public const string SceneType = "SceneType";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5551840002734483211UL,1845652086390232738UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_initialSize
	{
		get => _f_initialSize[Index];
		set => _f_initialSize[Index] = value;
	}
	public System.String f_PoolObjectAddressableKey
	{
		get => _f_PoolObjectAddressableKey[Index];
		set => _f_PoolObjectAddressableKey[Index] = value;
	}
	public BGDatabaseEnum.SceneType f_SceneType
	{
		get => (BGDatabaseEnum.SceneType) _f_SceneType.GetStoredValue(Index);
		set => _f_SceneType.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4726680117178046135UL, 7587749471834620314UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_initialSize;
	public static BansheeGz.BGDatabase.BGFieldInt _f_initialSize => _ufle12jhs77_f_initialSize ?? (_ufle12jhs77_f_initialSize = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5695250943508857660UL, 15712297599622700168UL), () => _ufle12jhs77_f_initialSize = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_PoolObjectAddressableKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_PoolObjectAddressableKey => _ufle12jhs77_f_PoolObjectAddressableKey ?? (_ufle12jhs77_f_PoolObjectAddressableKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5761746857104736445UL, 14334273623888862142UL), () => _ufle12jhs77_f_PoolObjectAddressableKey = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_SceneType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_SceneType => _ufle12jhs77_f_SceneType ?? (_ufle12jhs77_f_SceneType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5559553276269621835UL, 2058884527795876747UL), () => _ufle12jhs77_f_SceneType = null));
	public List<Alias_rifegrt_UnitData> RelatedUnitDataListUsingUnitPoolingKeyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_UnitData>(Alias_rifegrt_UnitData._f_UnitPoolingKey, Id);
	public List<Alias_rifegrt_UnitData> RelatedUnitDataListUsingSkillPoolingKeyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_UnitData>(Alias_rifegrt_UnitData._f_SkillPoolingKey, Id);
	public List<Alias_rifegrt_EnemyData> RelatedEnemyDataListUsingObjectPoolKeyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_EnemyData>(Alias_rifegrt_EnemyData._f_ObjectPoolKey, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_ObjectPoolData() : base(MetaDefault) {}
	private D_ObjectPoolData(BGId id) : base(MetaDefault, id) {}
	private D_ObjectPoolData(BGMetaEntity meta) : base(meta) {}
	private D_ObjectPoolData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_ObjectPoolData FindEntity(Predicate<D_ObjectPoolData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_ObjectPoolData> FindEntities(Predicate<D_ObjectPoolData> filter, List<D_ObjectPoolData> result=null, Comparison<D_ObjectPoolData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_ObjectPoolData> action, Predicate<D_ObjectPoolData> filter=null, Comparison<D_ObjectPoolData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_ObjectPoolData GetEntity(BGId entityId) => (D_ObjectPoolData) MetaDefault.GetEntity(entityId);
	public static D_ObjectPoolData GetEntity(int index) => (D_ObjectPoolData) MetaDefault[index];
	public static D_ObjectPoolData GetEntity(string entityName) => (D_ObjectPoolData) MetaDefault.GetEntity(entityName);
	public static D_ObjectPoolData NewEntity() => (D_ObjectPoolData) MetaDefault.NewEntity();
	public static D_ObjectPoolData NewEntity(BGId entityId) => (D_ObjectPoolData) MetaDefault.NewEntity(entityId);
	public static D_ObjectPoolData NewEntity(Action<D_ObjectPoolData> callback) => (D_ObjectPoolData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_ObjectPoolData)entity)));
}

public partial class D_WaveData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_WaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_WaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "WaveData";
		public const string name = "name";
		public const string SpawnEnemyName = "SpawnEnemyName";
		public const string enemyGroup = "enemyGroup";
		public const string WaveTimeData = "WaveTimeData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4778501538320982376UL,14576375936561994928UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.String f_SpawnEnemyName
	{
		get => _f_SpawnEnemyName[Index];
		set => _f_SpawnEnemyName[Index] = value;
	}
	public List<D_enemyGroup> f_enemyGroup => BGCodeGenUtils.GetNested<D_enemyGroup>(_f_enemyGroup, Index);
	public List<D_WaveTimeData> f_WaveTimeData => BGCodeGenUtils.GetNested<D_WaveTimeData>(_f_WaveTimeData, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4703004299164658167UL, 14816338927607609278UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SpawnEnemyName;
	public static BansheeGz.BGDatabase.BGFieldString _f_SpawnEnemyName => _ufle12jhs77_f_SpawnEnemyName ?? (_ufle12jhs77_f_SpawnEnemyName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5304298841188339061UL, 3832707851484607413UL), () => _ufle12jhs77_f_SpawnEnemyName = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_enemyGroup;
	public static BansheeGz.BGDatabase.BGFieldNested _f_enemyGroup => _ufle12jhs77_f_enemyGroup ?? (_ufle12jhs77_f_enemyGroup = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(4964147500182563407UL, 2594969801821498292UL), () => _ufle12jhs77_f_enemyGroup = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_WaveTimeData;
	public static BansheeGz.BGDatabase.BGFieldNested _f_WaveTimeData => _ufle12jhs77_f_WaveTimeData ?? (_ufle12jhs77_f_WaveTimeData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5680194706508451098UL, 14412226580719047576UL), () => _ufle12jhs77_f_WaveTimeData = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_WaveData() : base(MetaDefault) {}
	private D_WaveData(BGId id) : base(MetaDefault, id) {}
	private D_WaveData(BGMetaEntity meta) : base(meta) {}
	private D_WaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_WaveData FindEntity(Predicate<D_WaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_WaveData> FindEntities(Predicate<D_WaveData> filter, List<D_WaveData> result=null, Comparison<D_WaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_WaveData> action, Predicate<D_WaveData> filter=null, Comparison<D_WaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_WaveData GetEntity(BGId entityId) => (D_WaveData) MetaDefault.GetEntity(entityId);
	public static D_WaveData GetEntity(int index) => (D_WaveData) MetaDefault[index];
	public static D_WaveData GetEntity(string entityName) => (D_WaveData) MetaDefault.GetEntity(entityName);
	public static D_WaveData NewEntity() => (D_WaveData) MetaDefault.NewEntity();
	public static D_WaveData NewEntity(BGId entityId) => (D_WaveData) MetaDefault.NewEntity(entityId);
	public static D_WaveData NewEntity(Action<D_WaveData> callback) => (D_WaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_WaveData)entity)));
}

public partial class D_StageData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_StageData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_StageData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "StageData";
		public const string name = "name";
		public const string EpisodeData = "EpisodeData";
		public const string StageNumber = "StageNumber";
		public const string StageDescription = "StageDescription";
		public const string WaveDummyData = "WaveDummyData";
		public const string StartTilePos = "StartTilePos";
		public const string EndTilePos = "EndTilePos";
		public const string mapData = "mapData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4767129084614671086UL,3391790421238320565UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_EpisodeData f_EpisodeData
	{
		get => (D_EpisodeData) _f_EpisodeData[Index];
		set => _f_EpisodeData[Index] = value;
	}
	public System.Int32 f_StageNumber
	{
		get => _f_StageNumber[Index];
		set => _f_StageNumber[Index] = value;
	}
	public System.String f_StageDescription
	{
		get => _f_StageDescription[Index];
		set => _f_StageDescription[Index] = value;
	}
	public List<D_WaveDummyData> f_WaveDummyData
	{
		get => BGCodeGenUtils.MultipleViewRelationGet<D_WaveDummyData>(_f_WaveDummyData, Index);
		set => BGCodeGenUtils.MultipleViewRelationSet<D_WaveDummyData>(_f_WaveDummyData, Index, value);
	}
	public UnityEngine.Vector2 f_StartTilePos
	{
		get => _f_StartTilePos[Index];
		set => _f_StartTilePos[Index] = value;
	}
	public UnityEngine.Vector2 f_EndTilePos
	{
		get => _f_EndTilePos[Index];
		set => _f_EndTilePos[Index] = value;
	}
	public D_MapData f_mapData
	{
		get => (D_MapData) _f_mapData[Index];
		set => _f_mapData[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5107560990730887598UL, 14806839362490910632UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_EpisodeData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_EpisodeData => _ufle12jhs77_f_EpisodeData ?? (_ufle12jhs77_f_EpisodeData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4784008122447646202UL, 13067861932297786298UL), () => _ufle12jhs77_f_EpisodeData = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_StageNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_StageNumber => _ufle12jhs77_f_StageNumber ?? (_ufle12jhs77_f_StageNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5727885512308789180UL, 5793001234893590713UL), () => _ufle12jhs77_f_StageNumber = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_StageDescription;
	public static BansheeGz.BGDatabase.BGFieldString _f_StageDescription => _ufle12jhs77_f_StageDescription ?? (_ufle12jhs77_f_StageDescription = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4735349357882227549UL, 15837191542169728688UL), () => _ufle12jhs77_f_StageDescription = null));
	private static BansheeGz.BGDatabase.BGFieldViewRelationMultiple _ufle12jhs77_f_WaveDummyData;
	public static BansheeGz.BGDatabase.BGFieldViewRelationMultiple _f_WaveDummyData => _ufle12jhs77_f_WaveDummyData ?? (_ufle12jhs77_f_WaveDummyData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldViewRelationMultiple>(MetaDefault, new BGId(5062158878899521107UL, 8254206695046802093UL), () => _ufle12jhs77_f_WaveDummyData = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_StartTilePos;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_StartTilePos => _ufle12jhs77_f_StartTilePos ?? (_ufle12jhs77_f_StartTilePos = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(5046214170933828315UL, 3336255239437776575UL), () => _ufle12jhs77_f_StartTilePos = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_EndTilePos;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_EndTilePos => _ufle12jhs77_f_EndTilePos ?? (_ufle12jhs77_f_EndTilePos = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(4852896796202598556UL, 14737165945497110928UL), () => _ufle12jhs77_f_EndTilePos = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_mapData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_mapData => _ufle12jhs77_f_mapData ?? (_ufle12jhs77_f_mapData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5561569271858242143UL, 14666200413546411709UL), () => _ufle12jhs77_f_mapData = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_StageData() : base(MetaDefault) {}
	private D_StageData(BGId id) : base(MetaDefault, id) {}
	private D_StageData(BGMetaEntity meta) : base(meta) {}
	private D_StageData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_StageData FindEntity(Predicate<D_StageData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_StageData> FindEntities(Predicate<D_StageData> filter, List<D_StageData> result=null, Comparison<D_StageData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_StageData> action, Predicate<D_StageData> filter=null, Comparison<D_StageData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_StageData GetEntity(BGId entityId) => (D_StageData) MetaDefault.GetEntity(entityId);
	public static D_StageData GetEntity(int index) => (D_StageData) MetaDefault[index];
	public static D_StageData GetEntity(string entityName) => (D_StageData) MetaDefault.GetEntity(entityName);
	public static D_StageData NewEntity() => (D_StageData) MetaDefault.NewEntity();
	public static D_StageData NewEntity(BGId entityId) => (D_StageData) MetaDefault.NewEntity(entityId);
	public static D_StageData NewEntity(Action<D_StageData> callback) => (D_StageData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_StageData)entity)));
}

public partial class D_EnemyData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_EnemyData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_EnemyData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "EnemyData";
		public const string name = "name";
		public const string ObjectPoolKey = "ObjectPoolKey";
		public const string statSubject = "statSubject";
		public const string evnets = "evnets";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4684773675657008422UL,7413063395127074720UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_ObjectPoolData f_ObjectPoolKey
	{
		get => (D_ObjectPoolData) _f_ObjectPoolKey[Index];
		set => _f_ObjectPoolKey[Index] = value;
	}
	public List<StatSubject> f_statSubject
	{
		get => BGCodeGenUtils.EnumListGet<StatSubject>(_f_statSubject, Index);
		set => BGCodeGenUtils.EnumListSet<StatSubject>(_f_statSubject, Index, value);
	}
	public List<D_EventDummyData> f_evnets
	{
		get => BGCodeGenUtils.MultipleViewRelationGet<D_EventDummyData>(_f_evnets, Index);
		set => BGCodeGenUtils.MultipleViewRelationSet<D_EventDummyData>(_f_evnets, Index, value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4938102425506461035UL, 13729837135102970805UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_ObjectPoolKey;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_ObjectPoolKey => _ufle12jhs77_f_ObjectPoolKey ?? (_ufle12jhs77_f_ObjectPoolKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5127858403270080390UL, 8458190447950556807UL), () => _ufle12jhs77_f_ObjectPoolKey = null));
	private static BansheeGz.BGDatabase.BGFieldEnumList _ufle12jhs77_f_statSubject;
	public static BansheeGz.BGDatabase.BGFieldEnumList _f_statSubject => _ufle12jhs77_f_statSubject ?? (_ufle12jhs77_f_statSubject = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnumList>(MetaDefault, new BGId(4734131847471164176UL, 289550755626497706UL), () => _ufle12jhs77_f_statSubject = null));
	private static BansheeGz.BGDatabase.BGFieldViewRelationMultiple _ufle12jhs77_f_evnets;
	public static BansheeGz.BGDatabase.BGFieldViewRelationMultiple _f_evnets => _ufle12jhs77_f_evnets ?? (_ufle12jhs77_f_evnets = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldViewRelationMultiple>(MetaDefault, new BGId(5494723654661476776UL, 16053045210241367169UL), () => _ufle12jhs77_f_evnets = null));
	public List<Alias_rifegrt_enemyGroup> RelatedenemyGroupListUsingenemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_enemyGroup>(Alias_rifegrt_enemyGroup._f_enemy, Id);
	public List<Alias_rifegrt_BossBattleWaveData> RelatedBossBattleWaveDataListUsingbossEnemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_BossBattleWaveData>(Alias_rifegrt_BossBattleWaveData._f_bossEnemy, Id);
	public List<Alias_rifegrt_HuntingOptionData> RelatedHuntingOptionDataListUsingspawnEnemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_HuntingOptionData>(Alias_rifegrt_HuntingOptionData._f_spawnEnemy, Id);
	public List<Alias_rifegrt_SpawnEnemyEventData> RelatedSpawnEnemyEventDataListUsingenemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_SpawnEnemyEventData>(Alias_rifegrt_SpawnEnemyEventData._f_enemy, Id);
	public List<Alias_rifegrt_cellData> RelatedcellDataListUsingenemyRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_cellData>(Alias_rifegrt_cellData._f_enemy, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_EnemyData() : base(MetaDefault) {}
	private D_EnemyData(BGId id) : base(MetaDefault, id) {}
	private D_EnemyData(BGMetaEntity meta) : base(meta) {}
	private D_EnemyData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_EnemyData FindEntity(Predicate<D_EnemyData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_EnemyData> FindEntities(Predicate<D_EnemyData> filter, List<D_EnemyData> result=null, Comparison<D_EnemyData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_EnemyData> action, Predicate<D_EnemyData> filter=null, Comparison<D_EnemyData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_EnemyData GetEntity(BGId entityId) => (D_EnemyData) MetaDefault.GetEntity(entityId);
	public static D_EnemyData GetEntity(int index) => (D_EnemyData) MetaDefault[index];
	public static D_EnemyData GetEntity(string entityName) => (D_EnemyData) MetaDefault.GetEntity(entityName);
	public static D_EnemyData NewEntity() => (D_EnemyData) MetaDefault.NewEntity();
	public static D_EnemyData NewEntity(BGId entityId) => (D_EnemyData) MetaDefault.NewEntity(entityId);
	public static D_EnemyData NewEntity(Action<D_EnemyData> callback) => (D_EnemyData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_EnemyData)entity)));
}

public partial class D_enemyGroup : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_enemyGroup(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_enemyGroup(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "enemyGroup";
		public const string name = "name";
		public const string WaveData = "WaveData";
		public const string enemy = "enemy";
		public const string amount = "amount";
		public const string startDelay = "startDelay";
		public const string spawnInterval = "spawnInterval";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5687753539830049067UL,8128986279748860323UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_WaveData f_WaveData
	{
		get => (D_WaveData) _f_WaveData[Index];
		set => _f_WaveData[Index] = value;
	}
	public D_EnemyData f_enemy
	{
		get => (D_EnemyData) _f_enemy[Index];
		set => _f_enemy[Index] = value;
	}
	public System.Int32 f_amount
	{
		get => _f_amount[Index];
		set => _f_amount[Index] = value;
	}
	public System.Single f_startDelay
	{
		get => _f_startDelay[Index];
		set => _f_startDelay[Index] = value;
	}
	public System.Single f_spawnInterval
	{
		get => _f_spawnInterval[Index];
		set => _f_spawnInterval[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4768439846877257123UL, 4564271178158591882UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_WaveData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_WaveData => _ufle12jhs77_f_WaveData ?? (_ufle12jhs77_f_WaveData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5178040207927123324UL, 10930269463117227672UL), () => _ufle12jhs77_f_WaveData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_enemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_enemy => _ufle12jhs77_f_enemy ?? (_ufle12jhs77_f_enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5441185937166148425UL, 11239099587523972746UL), () => _ufle12jhs77_f_enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_amount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_amount => _ufle12jhs77_f_amount ?? (_ufle12jhs77_f_amount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4962475149476871349UL, 9923207979067693995UL), () => _ufle12jhs77_f_amount = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_startDelay;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_startDelay => _ufle12jhs77_f_startDelay ?? (_ufle12jhs77_f_startDelay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4846873840890291861UL, 7938845544472428197UL), () => _ufle12jhs77_f_startDelay = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_spawnInterval;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_spawnInterval => _ufle12jhs77_f_spawnInterval ?? (_ufle12jhs77_f_spawnInterval = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5152737681806592036UL, 4657384968853431938UL), () => _ufle12jhs77_f_spawnInterval = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_enemyGroup() : base(MetaDefault) {}
	private D_enemyGroup(BGId id) : base(MetaDefault, id) {}
	private D_enemyGroup(BGMetaEntity meta) : base(meta) {}
	private D_enemyGroup(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_enemyGroup FindEntity(Predicate<D_enemyGroup> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_enemyGroup> FindEntities(Predicate<D_enemyGroup> filter, List<D_enemyGroup> result=null, Comparison<D_enemyGroup> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_enemyGroup> action, Predicate<D_enemyGroup> filter=null, Comparison<D_enemyGroup> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_enemyGroup GetEntity(BGId entityId) => (D_enemyGroup) MetaDefault.GetEntity(entityId);
	public static D_enemyGroup GetEntity(int index) => (D_enemyGroup) MetaDefault[index];
	public static D_enemyGroup GetEntity(string entityName) => (D_enemyGroup) MetaDefault.GetEntity(entityName);
	public static D_enemyGroup NewEntity() => (D_enemyGroup) MetaDefault.NewEntity();
	public static D_enemyGroup NewEntity(BGId entityId) => (D_enemyGroup) MetaDefault.NewEntity(entityId);
	public static D_enemyGroup NewEntity(Action<D_enemyGroup> callback) => (D_enemyGroup) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_enemyGroup)entity)));
	public static D_enemyGroup NewEntity(D_WaveData owner) => (D_enemyGroup) MetaDefault.NewEntity(owner);
	public static D_enemyGroup NewEntity(D_WaveData owner, BGId entityId) => (D_enemyGroup) MetaDefault.NewEntity(owner, entityId);
	public static D_enemyGroup NewEntity(D_WaveData owner, Action<D_enemyGroup> callback) => (D_enemyGroup) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_enemyGroup)entity)));
}

public partial class D_TilePosData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_TilePosData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_TilePosData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "TilePosData";
		public const string name = "name";
		public const string TilePos = "TilePos";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5072550184591445031UL,4049629075303546763UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public UnityEngine.Vector2 f_TilePos
	{
		get => _f_TilePos[Index];
		set => _f_TilePos[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5513647067199918440UL, 3196144259926527926UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_TilePos;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_TilePos => _ufle12jhs77_f_TilePos ?? (_ufle12jhs77_f_TilePos = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(5562668652953843408UL, 2900906368118453686UL), () => _ufle12jhs77_f_TilePos = null));
	public List<Alias_rifegrt_unitBuildData> RelatedunitBuildDataListUsingTilePosDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_unitBuildData>(Alias_rifegrt_unitBuildData._f_TilePosData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_TilePosData() : base(MetaDefault) {}
	private D_TilePosData(BGId id) : base(MetaDefault, id) {}
	private D_TilePosData(BGMetaEntity meta) : base(meta) {}
	private D_TilePosData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_TilePosData FindEntity(Predicate<D_TilePosData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_TilePosData> FindEntities(Predicate<D_TilePosData> filter, List<D_TilePosData> result=null, Comparison<D_TilePosData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_TilePosData> action, Predicate<D_TilePosData> filter=null, Comparison<D_TilePosData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_TilePosData GetEntity(BGId entityId) => (D_TilePosData) MetaDefault.GetEntity(entityId);
	public static D_TilePosData GetEntity(int index) => (D_TilePosData) MetaDefault[index];
	public static D_TilePosData GetEntity(string entityName) => (D_TilePosData) MetaDefault.GetEntity(entityName);
	public static D_TilePosData NewEntity() => (D_TilePosData) MetaDefault.NewEntity();
	public static D_TilePosData NewEntity(BGId entityId) => (D_TilePosData) MetaDefault.NewEntity(entityId);
	public static D_TilePosData NewEntity(Action<D_TilePosData> callback) => (D_TilePosData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_TilePosData)entity)));
}

public partial class D_ObstacleTileMapData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_ObstacleTileMapData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_ObstacleTileMapData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "ObstacleTileMapData";
		public const string name = "name";
		public const string StageNumber = "StageNumber";
		public const string ObstacleAddressableKey = "ObstacleAddressableKey";
		public const string ObstacleTileType = "ObstacleTileType";
		public const string StageID = "StageID";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5758885724365639225UL,6985595781335644047UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_StageNumber
	{
		get => _f_StageNumber[Index];
		set => _f_StageNumber[Index] = value;
	}
	public System.String f_ObstacleAddressableKey
	{
		get => _f_ObstacleAddressableKey[Index];
		set => _f_ObstacleAddressableKey[Index] = value;
	}
	public BGDatabaseEnum.ObstacleTileType f_ObstacleTileType
	{
		get => (BGDatabaseEnum.ObstacleTileType) _f_ObstacleTileType.GetStoredValue(Index);
		set => _f_ObstacleTileType.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5122076134020259029UL, 17981120585241953922UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_StageNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_StageNumber => _ufle12jhs77_f_StageNumber ?? (_ufle12jhs77_f_StageNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5556671979502578053UL, 12474159028423526542UL), () => _ufle12jhs77_f_StageNumber = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_ObstacleAddressableKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_ObstacleAddressableKey => _ufle12jhs77_f_ObstacleAddressableKey ?? (_ufle12jhs77_f_ObstacleAddressableKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4994500594652544960UL, 15342156812932836766UL), () => _ufle12jhs77_f_ObstacleAddressableKey = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_ObstacleTileType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_ObstacleTileType => _ufle12jhs77_f_ObstacleTileType ?? (_ufle12jhs77_f_ObstacleTileType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5693260011756325544UL, 12672970599089641917UL), () => _ufle12jhs77_f_ObstacleTileType = null));
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_StageID;
	public static BansheeGz.BGDatabase.BGKey _StageID => _edeht3sdad33_StageID ?? (_edeht3sdad33_StageID = BGCodeGenUtils.GetKey(MetaDefault, new BGId(4722294791348354641UL, 4966515860168714379UL), () => _edeht3sdad33_StageID = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_ObstacleTileMapData() : base(MetaDefault) {}
	private D_ObstacleTileMapData(BGId id) : base(MetaDefault, id) {}
	private D_ObstacleTileMapData(BGMetaEntity meta) : base(meta) {}
	private D_ObstacleTileMapData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_ObstacleTileMapData FindEntity(Predicate<D_ObstacleTileMapData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_ObstacleTileMapData> FindEntities(Predicate<D_ObstacleTileMapData> filter, List<D_ObstacleTileMapData> result=null, Comparison<D_ObstacleTileMapData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_ObstacleTileMapData> action, Predicate<D_ObstacleTileMapData> filter=null, Comparison<D_ObstacleTileMapData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_ObstacleTileMapData GetEntity(BGId entityId) => (D_ObstacleTileMapData) MetaDefault.GetEntity(entityId);
	public static D_ObstacleTileMapData GetEntity(int index) => (D_ObstacleTileMapData) MetaDefault[index];
	public static D_ObstacleTileMapData GetEntity(string entityName) => (D_ObstacleTileMapData) MetaDefault.GetEntity(entityName);
	public static D_ObstacleTileMapData NewEntity() => (D_ObstacleTileMapData) MetaDefault.NewEntity();
	public static D_ObstacleTileMapData NewEntity(BGId entityId) => (D_ObstacleTileMapData) MetaDefault.NewEntity(entityId);
	public static D_ObstacleTileMapData NewEntity(Action<D_ObstacleTileMapData> callback) => (D_ObstacleTileMapData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_ObstacleTileMapData)entity)));
	public static D_ObstacleTileMapData GetEntityByKeyStageID(System.Int32 StageNumber) => (D_ObstacleTileMapData) _StageID.GetEntityByKey<System.Int32>(StageNumber);
}

public partial class D_MapData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_MapData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_MapData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "MapData";
		public const string name = "name";
		public const string specialTiles = "specialTiles";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4908545487314207604UL,18299589279296068736UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public List<D_SpecialTile> f_specialTiles => BGCodeGenUtils.GetNested<D_SpecialTile>(_f_specialTiles, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5719801111616681580UL, 17245377735577054864UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_specialTiles;
	public static BansheeGz.BGDatabase.BGFieldNested _f_specialTiles => _ufle12jhs77_f_specialTiles ?? (_ufle12jhs77_f_specialTiles = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5244751714002308515UL, 5836463201650911643UL), () => _ufle12jhs77_f_specialTiles = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingmapDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_mapData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_MapData() : base(MetaDefault) {}
	private D_MapData(BGId id) : base(MetaDefault, id) {}
	private D_MapData(BGMetaEntity meta) : base(meta) {}
	private D_MapData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_MapData FindEntity(Predicate<D_MapData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_MapData> FindEntities(Predicate<D_MapData> filter, List<D_MapData> result=null, Comparison<D_MapData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_MapData> action, Predicate<D_MapData> filter=null, Comparison<D_MapData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_MapData GetEntity(BGId entityId) => (D_MapData) MetaDefault.GetEntity(entityId);
	public static D_MapData GetEntity(int index) => (D_MapData) MetaDefault[index];
	public static D_MapData GetEntity(string entityName) => (D_MapData) MetaDefault.GetEntity(entityName);
	public static D_MapData NewEntity() => (D_MapData) MetaDefault.NewEntity();
	public static D_MapData NewEntity(BGId entityId) => (D_MapData) MetaDefault.NewEntity(entityId);
	public static D_MapData NewEntity(Action<D_MapData> callback) => (D_MapData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_MapData)entity)));
}

public partial class D_SpecialTile : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_SpecialTile(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_SpecialTile(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "SpecialTile";
		public const string name = "name";
		public const string MapData = "MapData";
		public const string specialObject = "specialObject";
		public const string cellPosition = "cellPosition";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5262619728582080424UL,5342422265480733882UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_MapData f_MapData
	{
		get => (D_MapData) _f_MapData[Index];
		set => _f_MapData[Index] = value;
	}
	public D_UnitData f_specialObject
	{
		get => (D_UnitData) _f_specialObject[Index];
		set => _f_specialObject[Index] = value;
	}
	public UnityEngine.Vector2 f_cellPosition
	{
		get => _f_cellPosition[Index];
		set => _f_cellPosition[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4992590249030401474UL, 2817537600547812777UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_MapData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_MapData => _ufle12jhs77_f_MapData ?? (_ufle12jhs77_f_MapData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5484946033078379939UL, 14582839010964032951UL), () => _ufle12jhs77_f_MapData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_specialObject;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_specialObject => _ufle12jhs77_f_specialObject ?? (_ufle12jhs77_f_specialObject = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4613129631453140980UL, 5136207368358008742UL), () => _ufle12jhs77_f_specialObject = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_cellPosition;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_cellPosition => _ufle12jhs77_f_cellPosition ?? (_ufle12jhs77_f_cellPosition = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(5511294158484053841UL, 2904814911090748580UL), () => _ufle12jhs77_f_cellPosition = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_SpecialTile() : base(MetaDefault) {}
	private D_SpecialTile(BGId id) : base(MetaDefault, id) {}
	private D_SpecialTile(BGMetaEntity meta) : base(meta) {}
	private D_SpecialTile(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_SpecialTile FindEntity(Predicate<D_SpecialTile> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_SpecialTile> FindEntities(Predicate<D_SpecialTile> filter, List<D_SpecialTile> result=null, Comparison<D_SpecialTile> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_SpecialTile> action, Predicate<D_SpecialTile> filter=null, Comparison<D_SpecialTile> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_SpecialTile GetEntity(BGId entityId) => (D_SpecialTile) MetaDefault.GetEntity(entityId);
	public static D_SpecialTile GetEntity(int index) => (D_SpecialTile) MetaDefault[index];
	public static D_SpecialTile GetEntity(string entityName) => (D_SpecialTile) MetaDefault.GetEntity(entityName);
	public static D_SpecialTile NewEntity() => (D_SpecialTile) MetaDefault.NewEntity();
	public static D_SpecialTile NewEntity(BGId entityId) => (D_SpecialTile) MetaDefault.NewEntity(entityId);
	public static D_SpecialTile NewEntity(Action<D_SpecialTile> callback) => (D_SpecialTile) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_SpecialTile)entity)));
	public static D_SpecialTile NewEntity(D_MapData owner) => (D_SpecialTile) MetaDefault.NewEntity(owner);
	public static D_SpecialTile NewEntity(D_MapData owner, BGId entityId) => (D_SpecialTile) MetaDefault.NewEntity(owner, entityId);
	public static D_SpecialTile NewEntity(D_MapData owner, Action<D_SpecialTile> callback) => (D_SpecialTile) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_SpecialTile)entity)));
}

public partial class D_WildCardData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_WildCardData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_WildCardData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "WildCardData";
		public const string name = "name";
		public const string WildCardName = "WildCardName";
		public const string Description = "Description";
		public const string Grade = "Grade";
		public const string BuffData = "BuffData";
		public const string KeyGrade = "KeyGrade";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4872301963196228080UL,7765206360331939715UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.String f_WildCardName
	{
		get => _f_WildCardName[Index];
		set => _f_WildCardName[Index] = value;
	}
	public System.String f_Description
	{
		get => _f_Description[Index];
		set => _f_Description[Index] = value;
	}
	public CardGrade f_Grade
	{
		get => (CardGrade) _f_Grade.GetStoredValue(Index);
		set => _f_Grade.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_BuffData> f_BuffData
	{
		get => BGCodeGenUtils.MultipleRelationGet<D_BuffData>(_f_BuffData, Index);
		set => BGCodeGenUtils.MultipleRelationSet<D_BuffData>(_f_BuffData, Index, value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5727612212447465347UL, 8930124116492062357UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_WildCardName;
	public static BansheeGz.BGDatabase.BGFieldString _f_WildCardName => _ufle12jhs77_f_WildCardName ?? (_ufle12jhs77_f_WildCardName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5424515673354722464UL, 11574133637044617349UL), () => _ufle12jhs77_f_WildCardName = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_Description;
	public static BansheeGz.BGDatabase.BGFieldString _f_Description => _ufle12jhs77_f_Description ?? (_ufle12jhs77_f_Description = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4660221550547562453UL, 2006736635375945130UL), () => _ufle12jhs77_f_Description = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_Grade;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_Grade => _ufle12jhs77_f_Grade ?? (_ufle12jhs77_f_Grade = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5642949185260688049UL, 9640977806420772543UL), () => _ufle12jhs77_f_Grade = null));
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_BuffData;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_BuffData => _ufle12jhs77_f_BuffData ?? (_ufle12jhs77_f_BuffData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationMultiple>(MetaDefault, new BGId(5706463212952813793UL, 17658644526782138270UL), () => _ufle12jhs77_f_BuffData = null));
	public List<Alias_rifegrt_WildCardWaveData> RelatedWildCardWaveDataListUsingwildCardPoolRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_WildCardWaveData>(Alias_rifegrt_WildCardWaveData._f_wildCardPool, Id);
	private static BansheeGz.BGDatabase.BGKey _edeht3sdad33_KeyGrade;
	public static BansheeGz.BGDatabase.BGKey _KeyGrade => _edeht3sdad33_KeyGrade ?? (_edeht3sdad33_KeyGrade = BGCodeGenUtils.GetKey(MetaDefault, new BGId(5165735758975412737UL, 2219348547570594239UL), () => _edeht3sdad33_KeyGrade = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_WildCardData() : base(MetaDefault) {}
	private D_WildCardData(BGId id) : base(MetaDefault, id) {}
	private D_WildCardData(BGMetaEntity meta) : base(meta) {}
	private D_WildCardData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_WildCardData FindEntity(Predicate<D_WildCardData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_WildCardData> FindEntities(Predicate<D_WildCardData> filter, List<D_WildCardData> result=null, Comparison<D_WildCardData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_WildCardData> action, Predicate<D_WildCardData> filter=null, Comparison<D_WildCardData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_WildCardData GetEntity(BGId entityId) => (D_WildCardData) MetaDefault.GetEntity(entityId);
	public static D_WildCardData GetEntity(int index) => (D_WildCardData) MetaDefault[index];
	public static D_WildCardData GetEntity(string entityName) => (D_WildCardData) MetaDefault.GetEntity(entityName);
	public static D_WildCardData NewEntity() => (D_WildCardData) MetaDefault.NewEntity();
	public static D_WildCardData NewEntity(BGId entityId) => (D_WildCardData) MetaDefault.NewEntity(entityId);
	public static D_WildCardData NewEntity(Action<D_WildCardData> callback) => (D_WildCardData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_WildCardData)entity)));
	public void f_BuffData_Add(D_BuffData related) => BGCodeGenUtils.MultipleRelationAdd(_f_BuffData, Index, related);
	public void f_BuffData_Remove(D_BuffData related) => BGCodeGenUtils.MultipleRelationRemove(_f_BuffData, Index, related);
	public static D_WildCardData GetEntityByKeyKeyGrade(CardGrade Grade) => (D_WildCardData) _KeyGrade.GetEntityByKey<CardGrade>(Grade);
	public static List<D_WildCardData> GetEntitiesByKeyKeyGrade(CardGrade Grade, List<D_WildCardData> result=null) => _KeyGrade.GetEntitiesByKey<D_WildCardData, CardGrade>(result, Grade);
}

public partial class D_WaveTimeData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_WaveTimeData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_WaveTimeData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "WaveTimeData";
		public const string name = "name";
		public const string WaveData = "WaveData";
		public const string StatName = "StatName";
		public const string StatValue = "StatValue";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4819225711913907305UL,15009537095344397230UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_WaveData f_WaveData
	{
		get => (D_WaveData) _f_WaveData[Index];
		set => _f_WaveData[Index] = value;
	}
	public StatName f_StatName
	{
		get => (StatName) _f_StatName.GetStoredValue(Index);
		set => _f_StatName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Single f_StatValue
	{
		get => _f_StatValue[Index];
		set => _f_StatValue[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4825676132994645936UL, 2849090759877740935UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_WaveData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_WaveData => _ufle12jhs77_f_WaveData ?? (_ufle12jhs77_f_WaveData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5683295658827204306UL, 5871050844131991199UL), () => _ufle12jhs77_f_WaveData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_StatName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_StatName => _ufle12jhs77_f_StatName ?? (_ufle12jhs77_f_StatName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5658350409613004392UL, 10174500961762633900UL), () => _ufle12jhs77_f_StatName = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_StatValue;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_StatValue => _ufle12jhs77_f_StatValue ?? (_ufle12jhs77_f_StatValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5155147655809922890UL, 4214448104098481302UL), () => _ufle12jhs77_f_StatValue = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_WaveTimeData() : base(MetaDefault) {}
	private D_WaveTimeData(BGId id) : base(MetaDefault, id) {}
	private D_WaveTimeData(BGMetaEntity meta) : base(meta) {}
	private D_WaveTimeData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_WaveTimeData FindEntity(Predicate<D_WaveTimeData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_WaveTimeData> FindEntities(Predicate<D_WaveTimeData> filter, List<D_WaveTimeData> result=null, Comparison<D_WaveTimeData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_WaveTimeData> action, Predicate<D_WaveTimeData> filter=null, Comparison<D_WaveTimeData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_WaveTimeData GetEntity(BGId entityId) => (D_WaveTimeData) MetaDefault.GetEntity(entityId);
	public static D_WaveTimeData GetEntity(int index) => (D_WaveTimeData) MetaDefault[index];
	public static D_WaveTimeData GetEntity(string entityName) => (D_WaveTimeData) MetaDefault.GetEntity(entityName);
	public static D_WaveTimeData NewEntity() => (D_WaveTimeData) MetaDefault.NewEntity();
	public static D_WaveTimeData NewEntity(BGId entityId) => (D_WaveTimeData) MetaDefault.NewEntity(entityId);
	public static D_WaveTimeData NewEntity(Action<D_WaveTimeData> callback) => (D_WaveTimeData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_WaveTimeData)entity)));
	public static D_WaveTimeData NewEntity(D_WaveData owner) => (D_WaveTimeData) MetaDefault.NewEntity(owner);
	public static D_WaveTimeData NewEntity(D_WaveData owner, BGId entityId) => (D_WaveTimeData) MetaDefault.NewEntity(owner, entityId);
	public static D_WaveTimeData NewEntity(D_WaveData owner, Action<D_WaveTimeData> callback) => (D_WaveTimeData) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_WaveTimeData)entity)));
}

public partial class D_BuffData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_BuffData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_BuffData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "BuffData";
		public const string name = "name";
		public const string buffType = "buffType";
		public const string duration = "duration";
		public const string tickInterval = "tickInterval";
		public const string startDelayTime = "startDelayTime";
		public const string targetSubject = "targetSubject";
		public const string buffEffects = "buffEffects";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5480432703501431684UL,2679937273658348675UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public BuffType f_buffType
	{
		get => (BuffType) _f_buffType.GetStoredValue(Index);
		set => _f_buffType.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Single f_duration
	{
		get => _f_duration[Index];
		set => _f_duration[Index] = value;
	}
	public System.Single f_tickInterval
	{
		get => _f_tickInterval[Index];
		set => _f_tickInterval[Index] = value;
	}
	public System.Int32 f_startDelayTime
	{
		get => _f_startDelayTime[Index];
		set => _f_startDelayTime[Index] = value;
	}
	public StatSubject f_targetSubject
	{
		get => (StatSubject) _f_targetSubject.GetStoredValue(Index);
		set => _f_targetSubject.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_buffEffects> f_buffEffects => BGCodeGenUtils.GetNested<D_buffEffects>(_f_buffEffects, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5132302282938406455UL, 16194391721837298597UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_buffType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_buffType => _ufle12jhs77_f_buffType ?? (_ufle12jhs77_f_buffType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4851296489865721995UL, 11280547529833641871UL), () => _ufle12jhs77_f_buffType = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_duration;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_duration => _ufle12jhs77_f_duration ?? (_ufle12jhs77_f_duration = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5604027641232083368UL, 6438707996669211787UL), () => _ufle12jhs77_f_duration = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_tickInterval;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_tickInterval => _ufle12jhs77_f_tickInterval ?? (_ufle12jhs77_f_tickInterval = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4690010415295022485UL, 14268751412956003969UL), () => _ufle12jhs77_f_tickInterval = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_startDelayTime;
	public static BansheeGz.BGDatabase.BGFieldInt _f_startDelayTime => _ufle12jhs77_f_startDelayTime ?? (_ufle12jhs77_f_startDelayTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5643119041523169710UL, 16115676842799606964UL), () => _ufle12jhs77_f_startDelayTime = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_targetSubject;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_targetSubject => _ufle12jhs77_f_targetSubject ?? (_ufle12jhs77_f_targetSubject = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5201219649389349169UL, 3802183932482509222UL), () => _ufle12jhs77_f_targetSubject = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_buffEffects;
	public static BansheeGz.BGDatabase.BGFieldNested _f_buffEffects => _ufle12jhs77_f_buffEffects ?? (_ufle12jhs77_f_buffEffects = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5555988630792564783UL, 7606948226480331923UL), () => _ufle12jhs77_f_buffEffects = null));
	public List<Alias_rifegrt_WildCardData> RelatedWildCardDataListUsingBuffDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_WildCardData>(Alias_rifegrt_WildCardData._f_BuffData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_BuffData() : base(MetaDefault) {}
	private D_BuffData(BGId id) : base(MetaDefault, id) {}
	private D_BuffData(BGMetaEntity meta) : base(meta) {}
	private D_BuffData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_BuffData FindEntity(Predicate<D_BuffData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_BuffData> FindEntities(Predicate<D_BuffData> filter, List<D_BuffData> result=null, Comparison<D_BuffData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_BuffData> action, Predicate<D_BuffData> filter=null, Comparison<D_BuffData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_BuffData GetEntity(BGId entityId) => (D_BuffData) MetaDefault.GetEntity(entityId);
	public static D_BuffData GetEntity(int index) => (D_BuffData) MetaDefault[index];
	public static D_BuffData GetEntity(string entityName) => (D_BuffData) MetaDefault.GetEntity(entityName);
	public static D_BuffData NewEntity() => (D_BuffData) MetaDefault.NewEntity();
	public static D_BuffData NewEntity(BGId entityId) => (D_BuffData) MetaDefault.NewEntity(entityId);
	public static D_BuffData NewEntity(Action<D_BuffData> callback) => (D_BuffData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_BuffData)entity)));
}

public partial class D_buffEffects : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_buffEffects(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_buffEffects(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "buffEffects";
		public const string name = "name";
		public const string BuffData = "BuffData";
		public const string statName = "statName";
		public const string value = "value";
		public const string valueMultiply = "valueMultiply";
		public const string buffTickType = "buffTickType";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5631040277948286811UL,13007909191616308359UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_BuffData f_BuffData
	{
		get => (D_BuffData) _f_BuffData[Index];
		set => _f_BuffData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_value
	{
		get => _f_value[Index];
		set => _f_value[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	public BuffTickType f_buffTickType
	{
		get => (BuffTickType) _f_buffTickType.GetStoredValue(Index);
		set => _f_buffTickType.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5092157275259816070UL, 4385982813115435139UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_BuffData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_BuffData => _ufle12jhs77_f_BuffData ?? (_ufle12jhs77_f_BuffData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5516401778010689734UL, 243574926929816725UL), () => _ufle12jhs77_f_BuffData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5130250489602307827UL, 10870334875760719517UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_value;
	public static BansheeGz.BGDatabase.BGFieldInt _f_value => _ufle12jhs77_f_value ?? (_ufle12jhs77_f_value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5384050326230750970UL, 5440153106100768445UL), () => _ufle12jhs77_f_value = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5530346178345344594UL, 4454355475631574712UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_buffTickType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_buffTickType => _ufle12jhs77_f_buffTickType ?? (_ufle12jhs77_f_buffTickType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5175313155979603135UL, 10701216334338136488UL), () => _ufle12jhs77_f_buffTickType = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_buffEffects() : base(MetaDefault) {}
	private D_buffEffects(BGId id) : base(MetaDefault, id) {}
	private D_buffEffects(BGMetaEntity meta) : base(meta) {}
	private D_buffEffects(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_buffEffects FindEntity(Predicate<D_buffEffects> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_buffEffects> FindEntities(Predicate<D_buffEffects> filter, List<D_buffEffects> result=null, Comparison<D_buffEffects> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_buffEffects> action, Predicate<D_buffEffects> filter=null, Comparison<D_buffEffects> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_buffEffects GetEntity(BGId entityId) => (D_buffEffects) MetaDefault.GetEntity(entityId);
	public static D_buffEffects GetEntity(int index) => (D_buffEffects) MetaDefault[index];
	public static D_buffEffects GetEntity(string entityName) => (D_buffEffects) MetaDefault.GetEntity(entityName);
	public static D_buffEffects NewEntity() => (D_buffEffects) MetaDefault.NewEntity();
	public static D_buffEffects NewEntity(BGId entityId) => (D_buffEffects) MetaDefault.NewEntity(entityId);
	public static D_buffEffects NewEntity(Action<D_buffEffects> callback) => (D_buffEffects) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_buffEffects)entity)));
	public static D_buffEffects NewEntity(D_BuffData owner) => (D_buffEffects) MetaDefault.NewEntity(owner);
	public static D_buffEffects NewEntity(D_BuffData owner, BGId entityId) => (D_buffEffects) MetaDefault.NewEntity(owner, entityId);
	public static D_buffEffects NewEntity(D_BuffData owner, Action<D_buffEffects> callback) => (D_buffEffects) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_buffEffects)entity)));
}

public partial class D_StatSubjectData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_StatSubjectData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_StatSubjectData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "StatSubjectData";
		public const string name = "name";
		public const string subjectType = "subjectType";
		public const string subjectStats = "subjectStats";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4734955719791994127UL,8120858761871956103UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public StatSubject f_subjectType
	{
		get => (StatSubject) _f_subjectType.GetStoredValue(Index);
		set => _f_subjectType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_subjectStats> f_subjectStats => BGCodeGenUtils.GetNested<D_subjectStats>(_f_subjectStats, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4634033563269898025UL, 7259599322686501282UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_subjectType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_subjectType => _ufle12jhs77_f_subjectType ?? (_ufle12jhs77_f_subjectType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4957358118511177372UL, 302977254177934983UL), () => _ufle12jhs77_f_subjectType = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_subjectStats;
	public static BansheeGz.BGDatabase.BGFieldNested _f_subjectStats => _ufle12jhs77_f_subjectStats ?? (_ufle12jhs77_f_subjectStats = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(4646824329052271832UL, 13834163337199789985UL), () => _ufle12jhs77_f_subjectStats = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_StatSubjectData() : base(MetaDefault) {}
	private D_StatSubjectData(BGId id) : base(MetaDefault, id) {}
	private D_StatSubjectData(BGMetaEntity meta) : base(meta) {}
	private D_StatSubjectData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_StatSubjectData FindEntity(Predicate<D_StatSubjectData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_StatSubjectData> FindEntities(Predicate<D_StatSubjectData> filter, List<D_StatSubjectData> result=null, Comparison<D_StatSubjectData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_StatSubjectData> action, Predicate<D_StatSubjectData> filter=null, Comparison<D_StatSubjectData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_StatSubjectData GetEntity(BGId entityId) => (D_StatSubjectData) MetaDefault.GetEntity(entityId);
	public static D_StatSubjectData GetEntity(int index) => (D_StatSubjectData) MetaDefault[index];
	public static D_StatSubjectData GetEntity(string entityName) => (D_StatSubjectData) MetaDefault.GetEntity(entityName);
	public static D_StatSubjectData NewEntity() => (D_StatSubjectData) MetaDefault.NewEntity();
	public static D_StatSubjectData NewEntity(BGId entityId) => (D_StatSubjectData) MetaDefault.NewEntity(entityId);
	public static D_StatSubjectData NewEntity(Action<D_StatSubjectData> callback) => (D_StatSubjectData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_StatSubjectData)entity)));
}

public partial class D_subjectStats : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_subjectStats(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_subjectStats(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "subjectStats";
		public const string name = "name";
		public const string StatSubjectData = "StatSubjectData";
		public const string statName = "statName";
		public const string statValue = "statValue";
		public const string valueMultiply = "valueMultiply";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4900928973168497858UL,12874494567445823110UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_StatSubjectData f_StatSubjectData
	{
		get => (D_StatSubjectData) _f_StatSubjectData[Index];
		set => _f_StatSubjectData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_statValue
	{
		get => _f_statValue[Index];
		set => _f_statValue[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5246071232527706149UL, 6178172169890432649UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_StatSubjectData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_StatSubjectData => _ufle12jhs77_f_StatSubjectData ?? (_ufle12jhs77_f_StatSubjectData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4613144741793272004UL, 2500786080963298690UL), () => _ufle12jhs77_f_StatSubjectData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5416216000735258644UL, 1583226806036143765UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_statValue;
	public static BansheeGz.BGDatabase.BGFieldInt _f_statValue => _ufle12jhs77_f_statValue ?? (_ufle12jhs77_f_statValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5281267495795349850UL, 16377994696293795253UL), () => _ufle12jhs77_f_statValue = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5539391753433803353UL, 11360062638014334634UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_subjectStats() : base(MetaDefault) {}
	private D_subjectStats(BGId id) : base(MetaDefault, id) {}
	private D_subjectStats(BGMetaEntity meta) : base(meta) {}
	private D_subjectStats(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_subjectStats FindEntity(Predicate<D_subjectStats> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_subjectStats> FindEntities(Predicate<D_subjectStats> filter, List<D_subjectStats> result=null, Comparison<D_subjectStats> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_subjectStats> action, Predicate<D_subjectStats> filter=null, Comparison<D_subjectStats> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_subjectStats GetEntity(BGId entityId) => (D_subjectStats) MetaDefault.GetEntity(entityId);
	public static D_subjectStats GetEntity(int index) => (D_subjectStats) MetaDefault[index];
	public static D_subjectStats GetEntity(string entityName) => (D_subjectStats) MetaDefault.GetEntity(entityName);
	public static D_subjectStats NewEntity() => (D_subjectStats) MetaDefault.NewEntity();
	public static D_subjectStats NewEntity(BGId entityId) => (D_subjectStats) MetaDefault.NewEntity(entityId);
	public static D_subjectStats NewEntity(Action<D_subjectStats> callback) => (D_subjectStats) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_subjectStats)entity)));
	public static D_subjectStats NewEntity(D_StatSubjectData owner) => (D_subjectStats) MetaDefault.NewEntity(owner);
	public static D_subjectStats NewEntity(D_StatSubjectData owner, BGId entityId) => (D_subjectStats) MetaDefault.NewEntity(owner, entityId);
	public static D_subjectStats NewEntity(D_StatSubjectData owner, Action<D_subjectStats> callback) => (D_subjectStats) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_subjectStats)entity)));
}

public partial class D_EpisodeData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_EpisodeData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_EpisodeData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "EpisodeData";
		public const string name = "name";
		public const string episodeNumber = "episodeNumber";
		public const string episodeTitle = "episodeTitle";
		public const string episodeDescription = "episodeDescription";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4748811259824635660UL,2691968706770037180UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_episodeNumber
	{
		get => _f_episodeNumber[Index];
		set => _f_episodeNumber[Index] = value;
	}
	public System.String f_episodeTitle
	{
		get => _f_episodeTitle[Index];
		set => _f_episodeTitle[Index] = value;
	}
	public System.String f_episodeDescription
	{
		get => _f_episodeDescription[Index];
		set => _f_episodeDescription[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4673367198392211597UL, 10796729627121814147UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_episodeNumber;
	public static BansheeGz.BGDatabase.BGFieldInt _f_episodeNumber => _ufle12jhs77_f_episodeNumber ?? (_ufle12jhs77_f_episodeNumber = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5734194201930936214UL, 17034143442782541238UL), () => _ufle12jhs77_f_episodeNumber = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_episodeTitle;
	public static BansheeGz.BGDatabase.BGFieldString _f_episodeTitle => _ufle12jhs77_f_episodeTitle ?? (_ufle12jhs77_f_episodeTitle = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5209109661268413002UL, 15590832163721709754UL), () => _ufle12jhs77_f_episodeTitle = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_episodeDescription;
	public static BansheeGz.BGDatabase.BGFieldString _f_episodeDescription => _ufle12jhs77_f_episodeDescription ?? (_ufle12jhs77_f_episodeDescription = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5596414729176742488UL, 13995345094606251674UL), () => _ufle12jhs77_f_episodeDescription = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingEpisodeDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_EpisodeData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_EpisodeData() : base(MetaDefault) {}
	private D_EpisodeData(BGId id) : base(MetaDefault, id) {}
	private D_EpisodeData(BGMetaEntity meta) : base(meta) {}
	private D_EpisodeData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_EpisodeData FindEntity(Predicate<D_EpisodeData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_EpisodeData> FindEntities(Predicate<D_EpisodeData> filter, List<D_EpisodeData> result=null, Comparison<D_EpisodeData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_EpisodeData> action, Predicate<D_EpisodeData> filter=null, Comparison<D_EpisodeData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_EpisodeData GetEntity(BGId entityId) => (D_EpisodeData) MetaDefault.GetEntity(entityId);
	public static D_EpisodeData GetEntity(int index) => (D_EpisodeData) MetaDefault[index];
	public static D_EpisodeData GetEntity(string entityName) => (D_EpisodeData) MetaDefault.GetEntity(entityName);
	public static D_EpisodeData NewEntity() => (D_EpisodeData) MetaDefault.NewEntity();
	public static D_EpisodeData NewEntity(BGId entityId) => (D_EpisodeData) MetaDefault.NewEntity(entityId);
	public static D_EpisodeData NewEntity(Action<D_EpisodeData> callback) => (D_EpisodeData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_EpisodeData)entity)));
}

public partial class D_NormalBattleWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_NormalBattleWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_NormalBattleWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "NormalBattleWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string mapId = "mapId";
		public const string placeEnemyMapData = "placeEnemyMapData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4999377484231959274UL,5641040283909218478UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_mapId
	{
		get => _f_mapId[Index];
		set => _f_mapId[Index] = value;
	}
	public D_EnemyPlacementData f_placeEnemyMapData
	{
		get => (D_EnemyPlacementData) _f_placeEnemyMapData[Index];
		set => _f_placeEnemyMapData[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5198096744199374732UL, 12583835185553226120UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4701626643325239214UL, 16981198359215634358UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_mapId;
	public static BansheeGz.BGDatabase.BGFieldInt _f_mapId => _ufle12jhs77_f_mapId ?? (_ufle12jhs77_f_mapId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5075213676167310028UL, 16520830494310910618UL), () => _ufle12jhs77_f_mapId = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_placeEnemyMapData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_placeEnemyMapData => _ufle12jhs77_f_placeEnemyMapData ?? (_ufle12jhs77_f_placeEnemyMapData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5019656895737015773UL, 9642452384632003487UL), () => _ufle12jhs77_f_placeEnemyMapData = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_NormalBattleWaveData() : base(MetaDefault) {}
	private D_NormalBattleWaveData(BGId id) : base(MetaDefault, id) {}
	private D_NormalBattleWaveData(BGMetaEntity meta) : base(meta) {}
	private D_NormalBattleWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_NormalBattleWaveData FindEntity(Predicate<D_NormalBattleWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_NormalBattleWaveData> FindEntities(Predicate<D_NormalBattleWaveData> filter, List<D_NormalBattleWaveData> result=null, Comparison<D_NormalBattleWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_NormalBattleWaveData> action, Predicate<D_NormalBattleWaveData> filter=null, Comparison<D_NormalBattleWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_NormalBattleWaveData GetEntity(BGId entityId) => (D_NormalBattleWaveData) MetaDefault.GetEntity(entityId);
	public static D_NormalBattleWaveData GetEntity(int index) => (D_NormalBattleWaveData) MetaDefault[index];
	public static D_NormalBattleWaveData GetEntity(string entityName) => (D_NormalBattleWaveData) MetaDefault.GetEntity(entityName);
	public static D_NormalBattleWaveData NewEntity() => (D_NormalBattleWaveData) MetaDefault.NewEntity();
	public static D_NormalBattleWaveData NewEntity(BGId entityId) => (D_NormalBattleWaveData) MetaDefault.NewEntity(entityId);
	public static D_NormalBattleWaveData NewEntity(Action<D_NormalBattleWaveData> callback) => (D_NormalBattleWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_NormalBattleWaveData)entity)));
}

public partial class D_BossBattleWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_BossBattleWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_BossBattleWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "BossBattleWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string bossEnemy = "bossEnemy";
		public const string bossHp = "bossHp";
		public const string startDelay = "startDelay";
		public const string placeEnemyMapData = "placeEnemyMapData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5350997232416358719UL,7550749901726769284UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public D_EnemyData f_bossEnemy
	{
		get => (D_EnemyData) _f_bossEnemy[Index];
		set => _f_bossEnemy[Index] = value;
	}
	public System.Int32 f_bossHp
	{
		get => _f_bossHp[Index];
		set => _f_bossHp[Index] = value;
	}
	public System.Single f_startDelay
	{
		get => _f_startDelay[Index];
		set => _f_startDelay[Index] = value;
	}
	public D_EnemyPlacementData f_placeEnemyMapData
	{
		get => (D_EnemyPlacementData) _f_placeEnemyMapData[Index];
		set => _f_placeEnemyMapData[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4648556790777620570UL, 10818428577091893122UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5305157338052161875UL, 13104404023960258490UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_bossEnemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_bossEnemy => _ufle12jhs77_f_bossEnemy ?? (_ufle12jhs77_f_bossEnemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5398663689755495180UL, 17581176995848287386UL), () => _ufle12jhs77_f_bossEnemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_bossHp;
	public static BansheeGz.BGDatabase.BGFieldInt _f_bossHp => _ufle12jhs77_f_bossHp ?? (_ufle12jhs77_f_bossHp = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5583733647517555600UL, 2947613467864531370UL), () => _ufle12jhs77_f_bossHp = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_startDelay;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_startDelay => _ufle12jhs77_f_startDelay ?? (_ufle12jhs77_f_startDelay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5089286857605021011UL, 15989192875252017323UL), () => _ufle12jhs77_f_startDelay = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_placeEnemyMapData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_placeEnemyMapData => _ufle12jhs77_f_placeEnemyMapData ?? (_ufle12jhs77_f_placeEnemyMapData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5132672095488613186UL, 1754262872269661342UL), () => _ufle12jhs77_f_placeEnemyMapData = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_BossBattleWaveData() : base(MetaDefault) {}
	private D_BossBattleWaveData(BGId id) : base(MetaDefault, id) {}
	private D_BossBattleWaveData(BGMetaEntity meta) : base(meta) {}
	private D_BossBattleWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_BossBattleWaveData FindEntity(Predicate<D_BossBattleWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_BossBattleWaveData> FindEntities(Predicate<D_BossBattleWaveData> filter, List<D_BossBattleWaveData> result=null, Comparison<D_BossBattleWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_BossBattleWaveData> action, Predicate<D_BossBattleWaveData> filter=null, Comparison<D_BossBattleWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_BossBattleWaveData GetEntity(BGId entityId) => (D_BossBattleWaveData) MetaDefault.GetEntity(entityId);
	public static D_BossBattleWaveData GetEntity(int index) => (D_BossBattleWaveData) MetaDefault[index];
	public static D_BossBattleWaveData GetEntity(string entityName) => (D_BossBattleWaveData) MetaDefault.GetEntity(entityName);
	public static D_BossBattleWaveData NewEntity() => (D_BossBattleWaveData) MetaDefault.NewEntity();
	public static D_BossBattleWaveData NewEntity(BGId entityId) => (D_BossBattleWaveData) MetaDefault.NewEntity(entityId);
	public static D_BossBattleWaveData NewEntity(Action<D_BossBattleWaveData> callback) => (D_BossBattleWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_BossBattleWaveData)entity)));
}

public partial class D_WildCardWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_WildCardWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_WildCardWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "WildCardWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string selectionTime = "selectionTime";
		public const string minSelectionTime = "minSelectionTime";
		public const string wildCardPool = "wildCardPool";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5146719602937660752UL,17503680545558939813UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Single f_selectionTime
	{
		get => _f_selectionTime[Index];
		set => _f_selectionTime[Index] = value;
	}
	public System.Single f_minSelectionTime
	{
		get => _f_minSelectionTime[Index];
		set => _f_minSelectionTime[Index] = value;
	}
	public List<D_WildCardData> f_wildCardPool
	{
		get => BGCodeGenUtils.MultipleRelationGet<D_WildCardData>(_f_wildCardPool, Index);
		set => BGCodeGenUtils.MultipleRelationSet<D_WildCardData>(_f_wildCardPool, Index, value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4723267896339647800UL, 14378766748157478560UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4612140196011147467UL, 16714563746265830035UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_selectionTime;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_selectionTime => _ufle12jhs77_f_selectionTime ?? (_ufle12jhs77_f_selectionTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5470029004488476974UL, 4693715411505821355UL), () => _ufle12jhs77_f_selectionTime = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_minSelectionTime;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_minSelectionTime => _ufle12jhs77_f_minSelectionTime ?? (_ufle12jhs77_f_minSelectionTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4745070809095324590UL, 13515748607729780378UL), () => _ufle12jhs77_f_minSelectionTime = null));
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_wildCardPool;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_wildCardPool => _ufle12jhs77_f_wildCardPool ?? (_ufle12jhs77_f_wildCardPool = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationMultiple>(MetaDefault, new BGId(4936371166208896379UL, 11880145986698001842UL), () => _ufle12jhs77_f_wildCardPool = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_WildCardWaveData() : base(MetaDefault) {}
	private D_WildCardWaveData(BGId id) : base(MetaDefault, id) {}
	private D_WildCardWaveData(BGMetaEntity meta) : base(meta) {}
	private D_WildCardWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_WildCardWaveData FindEntity(Predicate<D_WildCardWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_WildCardWaveData> FindEntities(Predicate<D_WildCardWaveData> filter, List<D_WildCardWaveData> result=null, Comparison<D_WildCardWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_WildCardWaveData> action, Predicate<D_WildCardWaveData> filter=null, Comparison<D_WildCardWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_WildCardWaveData GetEntity(BGId entityId) => (D_WildCardWaveData) MetaDefault.GetEntity(entityId);
	public static D_WildCardWaveData GetEntity(int index) => (D_WildCardWaveData) MetaDefault[index];
	public static D_WildCardWaveData GetEntity(string entityName) => (D_WildCardWaveData) MetaDefault.GetEntity(entityName);
	public static D_WildCardWaveData NewEntity() => (D_WildCardWaveData) MetaDefault.NewEntity();
	public static D_WildCardWaveData NewEntity(BGId entityId) => (D_WildCardWaveData) MetaDefault.NewEntity(entityId);
	public static D_WildCardWaveData NewEntity(Action<D_WildCardWaveData> callback) => (D_WildCardWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_WildCardWaveData)entity)));
	public void f_wildCardPool_Add(D_WildCardData related) => BGCodeGenUtils.MultipleRelationAdd(_f_wildCardPool, Index, related);
	public void f_wildCardPool_Remove(D_WildCardData related) => BGCodeGenUtils.MultipleRelationRemove(_f_wildCardPool, Index, related);
}

public partial class D_HuntingSelectTimeWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_HuntingSelectTimeWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_HuntingSelectTimeWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "HuntingSelectTimeWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string huntingOptions = "huntingOptions";
		public const string selectionTime = "selectionTime";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5355806510897219477UL,1872667755167838855UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public List<D_HuntingOptionData> f_huntingOptions
	{
		get => BGCodeGenUtils.MultipleRelationGet<D_HuntingOptionData>(_f_huntingOptions, Index);
		set => BGCodeGenUtils.MultipleRelationSet<D_HuntingOptionData>(_f_huntingOptions, Index, value);
	}
	public System.Single f_selectionTime
	{
		get => _f_selectionTime[Index];
		set => _f_selectionTime[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5279180682772361936UL, 11781508780659629758UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5575223739616318164UL, 3236898760159510695UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_huntingOptions;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_huntingOptions => _ufle12jhs77_f_huntingOptions ?? (_ufle12jhs77_f_huntingOptions = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationMultiple>(MetaDefault, new BGId(5448698770901340276UL, 15088888142893992333UL), () => _ufle12jhs77_f_huntingOptions = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_selectionTime;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_selectionTime => _ufle12jhs77_f_selectionTime ?? (_ufle12jhs77_f_selectionTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5678239700829138959UL, 12609033964209551269UL), () => _ufle12jhs77_f_selectionTime = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_HuntingSelectTimeWaveData() : base(MetaDefault) {}
	private D_HuntingSelectTimeWaveData(BGId id) : base(MetaDefault, id) {}
	private D_HuntingSelectTimeWaveData(BGMetaEntity meta) : base(meta) {}
	private D_HuntingSelectTimeWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_HuntingSelectTimeWaveData FindEntity(Predicate<D_HuntingSelectTimeWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_HuntingSelectTimeWaveData> FindEntities(Predicate<D_HuntingSelectTimeWaveData> filter, List<D_HuntingSelectTimeWaveData> result=null, Comparison<D_HuntingSelectTimeWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_HuntingSelectTimeWaveData> action, Predicate<D_HuntingSelectTimeWaveData> filter=null, Comparison<D_HuntingSelectTimeWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_HuntingSelectTimeWaveData GetEntity(BGId entityId) => (D_HuntingSelectTimeWaveData) MetaDefault.GetEntity(entityId);
	public static D_HuntingSelectTimeWaveData GetEntity(int index) => (D_HuntingSelectTimeWaveData) MetaDefault[index];
	public static D_HuntingSelectTimeWaveData GetEntity(string entityName) => (D_HuntingSelectTimeWaveData) MetaDefault.GetEntity(entityName);
	public static D_HuntingSelectTimeWaveData NewEntity() => (D_HuntingSelectTimeWaveData) MetaDefault.NewEntity();
	public static D_HuntingSelectTimeWaveData NewEntity(BGId entityId) => (D_HuntingSelectTimeWaveData) MetaDefault.NewEntity(entityId);
	public static D_HuntingSelectTimeWaveData NewEntity(Action<D_HuntingSelectTimeWaveData> callback) => (D_HuntingSelectTimeWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_HuntingSelectTimeWaveData)entity)));
	public void f_huntingOptions_Add(D_HuntingOptionData related) => BGCodeGenUtils.MultipleRelationAdd(_f_huntingOptions, Index, related);
	public void f_huntingOptions_Remove(D_HuntingOptionData related) => BGCodeGenUtils.MultipleRelationRemove(_f_huntingOptions, Index, related);
}

public partial class D_PrizeHuntingWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_PrizeHuntingWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_PrizeHuntingWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "PrizeHuntingWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string rewardMuliply = "rewardMuliply";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5611583930951548014UL,5993143906111744697UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Single f_rewardMuliply
	{
		get => _f_rewardMuliply[Index];
		set => _f_rewardMuliply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5164155889470865134UL, 2740344724493640330UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4949906846277046348UL, 3254931597210127545UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_rewardMuliply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_rewardMuliply => _ufle12jhs77_f_rewardMuliply ?? (_ufle12jhs77_f_rewardMuliply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5133528091699256518UL, 12472597788064952464UL), () => _ufle12jhs77_f_rewardMuliply = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	public List<Alias_rifegrt_HuntingOptionData> RelatedHuntingOptionDataListUsingprizeHuntingDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_HuntingOptionData>(Alias_rifegrt_HuntingOptionData._f_prizeHuntingData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_PrizeHuntingWaveData() : base(MetaDefault) {}
	private D_PrizeHuntingWaveData(BGId id) : base(MetaDefault, id) {}
	private D_PrizeHuntingWaveData(BGMetaEntity meta) : base(meta) {}
	private D_PrizeHuntingWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_PrizeHuntingWaveData FindEntity(Predicate<D_PrizeHuntingWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_PrizeHuntingWaveData> FindEntities(Predicate<D_PrizeHuntingWaveData> filter, List<D_PrizeHuntingWaveData> result=null, Comparison<D_PrizeHuntingWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_PrizeHuntingWaveData> action, Predicate<D_PrizeHuntingWaveData> filter=null, Comparison<D_PrizeHuntingWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_PrizeHuntingWaveData GetEntity(BGId entityId) => (D_PrizeHuntingWaveData) MetaDefault.GetEntity(entityId);
	public static D_PrizeHuntingWaveData GetEntity(int index) => (D_PrizeHuntingWaveData) MetaDefault[index];
	public static D_PrizeHuntingWaveData GetEntity(string entityName) => (D_PrizeHuntingWaveData) MetaDefault.GetEntity(entityName);
	public static D_PrizeHuntingWaveData NewEntity() => (D_PrizeHuntingWaveData) MetaDefault.NewEntity();
	public static D_PrizeHuntingWaveData NewEntity(BGId entityId) => (D_PrizeHuntingWaveData) MetaDefault.NewEntity(entityId);
	public static D_PrizeHuntingWaveData NewEntity(Action<D_PrizeHuntingWaveData> callback) => (D_PrizeHuntingWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_PrizeHuntingWaveData)entity)));
}

public partial class D_EventEnemyWaveData : BGEntity, D_WaveDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_EventEnemyWaveData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_EventEnemyWaveData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "EventEnemyWaveData";
		public const string name = "name";
		public const string waveType = "waveType";
		public const string placeEnemyMapData = "placeEnemyMapData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5205932451465649274UL,6690423199984566686UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public WaveType f_waveType
	{
		get => (WaveType) _f_waveType.GetStoredValue(Index);
		set => _f_waveType.SetStoredValue(Index, (System.Int32) value);
	}
	public D_EnemyPlacementData f_placeEnemyMapData
	{
		get => (D_EnemyPlacementData) _f_placeEnemyMapData[Index];
		set => _f_placeEnemyMapData[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4741738928606390407UL, 15540059557401017780UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_waveType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_waveType => _ufle12jhs77_f_waveType ?? (_ufle12jhs77_f_waveType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5634264694695657963UL, 7247178406659141007UL), () => _ufle12jhs77_f_waveType = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_placeEnemyMapData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_placeEnemyMapData => _ufle12jhs77_f_placeEnemyMapData ?? (_ufle12jhs77_f_placeEnemyMapData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5478540754508784375UL, 6046488400273754012UL), () => _ufle12jhs77_f_placeEnemyMapData = null));
	public List<Alias_rifegrt_StageData> RelatedStageDataListUsingWaveDummyDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_StageData>(Alias_rifegrt_StageData._f_WaveDummyData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_EventEnemyWaveData() : base(MetaDefault) {}
	private D_EventEnemyWaveData(BGId id) : base(MetaDefault, id) {}
	private D_EventEnemyWaveData(BGMetaEntity meta) : base(meta) {}
	private D_EventEnemyWaveData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_EventEnemyWaveData FindEntity(Predicate<D_EventEnemyWaveData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_EventEnemyWaveData> FindEntities(Predicate<D_EventEnemyWaveData> filter, List<D_EventEnemyWaveData> result=null, Comparison<D_EventEnemyWaveData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_EventEnemyWaveData> action, Predicate<D_EventEnemyWaveData> filter=null, Comparison<D_EventEnemyWaveData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_EventEnemyWaveData GetEntity(BGId entityId) => (D_EventEnemyWaveData) MetaDefault.GetEntity(entityId);
	public static D_EventEnemyWaveData GetEntity(int index) => (D_EventEnemyWaveData) MetaDefault[index];
	public static D_EventEnemyWaveData GetEntity(string entityName) => (D_EventEnemyWaveData) MetaDefault.GetEntity(entityName);
	public static D_EventEnemyWaveData NewEntity() => (D_EventEnemyWaveData) MetaDefault.NewEntity();
	public static D_EventEnemyWaveData NewEntity(BGId entityId) => (D_EventEnemyWaveData) MetaDefault.NewEntity(entityId);
	public static D_EventEnemyWaveData NewEntity(Action<D_EventEnemyWaveData> callback) => (D_EventEnemyWaveData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_EventEnemyWaveData)entity)));
}

public partial class D_ItemData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_ItemData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_ItemData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "ItemData";
		public const string name = "name";
		public const string stats = "stats";
		public const string iconImage = "iconImage";
		public const string type = "type";
		public const string grade = "grade";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5706445817663690673UL,15716619024669096100UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public List<D_itemStats> f_stats => BGCodeGenUtils.GetNested<D_itemStats>(_f_stats, Index);
	public D_SpriteData f_iconImage
	{
		get => (D_SpriteData) _f_iconImage[Index];
		set => _f_iconImage[Index] = value;
	}
	public ItemType f_type
	{
		get => (ItemType) _f_type.GetStoredValue(Index);
		set => _f_type.SetStoredValue(Index, (System.Int32) value);
	}
	public ItemGrade f_grade
	{
		get => (ItemGrade) _f_grade.GetStoredValue(Index);
		set => _f_grade.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4688380460305922721UL, 5488213706877374094UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_stats;
	public static BansheeGz.BGDatabase.BGFieldNested _f_stats => _ufle12jhs77_f_stats ?? (_ufle12jhs77_f_stats = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(4896607028394820612UL, 1315007562529535622UL), () => _ufle12jhs77_f_stats = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_iconImage;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_iconImage => _ufle12jhs77_f_iconImage ?? (_ufle12jhs77_f_iconImage = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5078415743531782089UL, 11806472127846773409UL), () => _ufle12jhs77_f_iconImage = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_type;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_type => _ufle12jhs77_f_type ?? (_ufle12jhs77_f_type = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4904801918063550667UL, 7686654712284645762UL), () => _ufle12jhs77_f_type = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_grade;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_grade => _ufle12jhs77_f_grade ?? (_ufle12jhs77_f_grade = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5622306752780722298UL, 2606754966800975793UL), () => _ufle12jhs77_f_grade = null));
	public List<Alias_rifegrt_itemList> RelateditemListListUsingitemDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_itemList>(Alias_rifegrt_itemList._f_itemData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_ItemData() : base(MetaDefault) {}
	private D_ItemData(BGId id) : base(MetaDefault, id) {}
	private D_ItemData(BGMetaEntity meta) : base(meta) {}
	private D_ItemData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_ItemData FindEntity(Predicate<D_ItemData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_ItemData> FindEntities(Predicate<D_ItemData> filter, List<D_ItemData> result=null, Comparison<D_ItemData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_ItemData> action, Predicate<D_ItemData> filter=null, Comparison<D_ItemData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_ItemData GetEntity(BGId entityId) => (D_ItemData) MetaDefault.GetEntity(entityId);
	public static D_ItemData GetEntity(int index) => (D_ItemData) MetaDefault[index];
	public static D_ItemData GetEntity(string entityName) => (D_ItemData) MetaDefault.GetEntity(entityName);
	public static D_ItemData NewEntity() => (D_ItemData) MetaDefault.NewEntity();
	public static D_ItemData NewEntity(BGId entityId) => (D_ItemData) MetaDefault.NewEntity(entityId);
	public static D_ItemData NewEntity(Action<D_ItemData> callback) => (D_ItemData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_ItemData)entity)));
}

public partial class D_HuntingOptionData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_HuntingOptionData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_HuntingOptionData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "HuntingOptionData";
		public const string name = "name";
		public const string title = "title";
		public const string description = "description";
		public const string spawnEnemy = "spawnEnemy";
		public const string huntingReward = "huntingReward";
		public const string huntingRisk = "huntingRisk";
		public const string prizeHuntingData = "prizeHuntingData";
		public const string spawnPos = "spawnPos";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5381664928725939677UL,3173302106784987041UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.String f_title
	{
		get => _f_title[Index];
		set => _f_title[Index] = value;
	}
	public System.String f_description
	{
		get => _f_description[Index];
		set => _f_description[Index] = value;
	}
	public D_EnemyData f_spawnEnemy
	{
		get => (D_EnemyData) _f_spawnEnemy[Index];
		set => _f_spawnEnemy[Index] = value;
	}
	public List<D_huntingReward> f_huntingReward => BGCodeGenUtils.GetNested<D_huntingReward>(_f_huntingReward, Index);
	public List<D_huntingRisk> f_huntingRisk => BGCodeGenUtils.GetNested<D_huntingRisk>(_f_huntingRisk, Index);
	public D_PrizeHuntingWaveData f_prizeHuntingData
	{
		get => (D_PrizeHuntingWaveData) _f_prizeHuntingData[Index];
		set => _f_prizeHuntingData[Index] = value;
	}
	public UnityEngine.Vector2 f_spawnPos
	{
		get => _f_spawnPos[Index];
		set => _f_spawnPos[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5632793469073674763UL, 15312157263250495362UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_title;
	public static BansheeGz.BGDatabase.BGFieldString _f_title => _ufle12jhs77_f_title ?? (_ufle12jhs77_f_title = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4879348127332380067UL, 1588136262267987901UL), () => _ufle12jhs77_f_title = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_description;
	public static BansheeGz.BGDatabase.BGFieldString _f_description => _ufle12jhs77_f_description ?? (_ufle12jhs77_f_description = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5562242753916143619UL, 15882605752197836984UL), () => _ufle12jhs77_f_description = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_spawnEnemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_spawnEnemy => _ufle12jhs77_f_spawnEnemy ?? (_ufle12jhs77_f_spawnEnemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5045409566211158908UL, 9253219390523044537UL), () => _ufle12jhs77_f_spawnEnemy = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_huntingReward;
	public static BansheeGz.BGDatabase.BGFieldNested _f_huntingReward => _ufle12jhs77_f_huntingReward ?? (_ufle12jhs77_f_huntingReward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5278750313338539653UL, 116098376903985325UL), () => _ufle12jhs77_f_huntingReward = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_huntingRisk;
	public static BansheeGz.BGDatabase.BGFieldNested _f_huntingRisk => _ufle12jhs77_f_huntingRisk ?? (_ufle12jhs77_f_huntingRisk = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5347818645389763292UL, 4413640911447275672UL), () => _ufle12jhs77_f_huntingRisk = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_prizeHuntingData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_prizeHuntingData => _ufle12jhs77_f_prizeHuntingData ?? (_ufle12jhs77_f_prizeHuntingData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5691757458297165726UL, 10460524771639610559UL), () => _ufle12jhs77_f_prizeHuntingData = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_spawnPos;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_spawnPos => _ufle12jhs77_f_spawnPos ?? (_ufle12jhs77_f_spawnPos = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(5555439235514337841UL, 7273929562188176290UL), () => _ufle12jhs77_f_spawnPos = null));
	public List<Alias_rifegrt_HuntingSelectTimeWaveData> RelatedHuntingSelectTimeWaveDataListUsinghuntingOptionsRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_HuntingSelectTimeWaveData>(Alias_rifegrt_HuntingSelectTimeWaveData._f_huntingOptions, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_HuntingOptionData() : base(MetaDefault) {}
	private D_HuntingOptionData(BGId id) : base(MetaDefault, id) {}
	private D_HuntingOptionData(BGMetaEntity meta) : base(meta) {}
	private D_HuntingOptionData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_HuntingOptionData FindEntity(Predicate<D_HuntingOptionData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_HuntingOptionData> FindEntities(Predicate<D_HuntingOptionData> filter, List<D_HuntingOptionData> result=null, Comparison<D_HuntingOptionData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_HuntingOptionData> action, Predicate<D_HuntingOptionData> filter=null, Comparison<D_HuntingOptionData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_HuntingOptionData GetEntity(BGId entityId) => (D_HuntingOptionData) MetaDefault.GetEntity(entityId);
	public static D_HuntingOptionData GetEntity(int index) => (D_HuntingOptionData) MetaDefault[index];
	public static D_HuntingOptionData GetEntity(string entityName) => (D_HuntingOptionData) MetaDefault.GetEntity(entityName);
	public static D_HuntingOptionData NewEntity() => (D_HuntingOptionData) MetaDefault.NewEntity();
	public static D_HuntingOptionData NewEntity(BGId entityId) => (D_HuntingOptionData) MetaDefault.NewEntity(entityId);
	public static D_HuntingOptionData NewEntity(Action<D_HuntingOptionData> callback) => (D_HuntingOptionData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_HuntingOptionData)entity)));
}

public partial class D_huntingReward : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_huntingReward(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_huntingReward(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "huntingReward";
		public const string name = "name";
		public const string HuntingOptionData = "HuntingOptionData";
		public const string statName = "statName";
		public const string value = "value";
		public const string valueMultiply = "valueMultiply";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4807751091952143854UL,17774875899487446670UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_HuntingOptionData f_HuntingOptionData
	{
		get => (D_HuntingOptionData) _f_HuntingOptionData[Index];
		set => _f_HuntingOptionData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_value
	{
		get => _f_value[Index];
		set => _f_value[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4767559766153589343UL, 1035765729740235170UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_HuntingOptionData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_HuntingOptionData => _ufle12jhs77_f_HuntingOptionData ?? (_ufle12jhs77_f_HuntingOptionData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5589335258544303844UL, 6238070593071876283UL), () => _ufle12jhs77_f_HuntingOptionData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5759354256606185785UL, 3474354405051410593UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_value;
	public static BansheeGz.BGDatabase.BGFieldInt _f_value => _ufle12jhs77_f_value ?? (_ufle12jhs77_f_value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5115408021252353781UL, 2940980615061012102UL), () => _ufle12jhs77_f_value = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5709446886483301900UL, 9647046658204248194UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_huntingReward() : base(MetaDefault) {}
	private D_huntingReward(BGId id) : base(MetaDefault, id) {}
	private D_huntingReward(BGMetaEntity meta) : base(meta) {}
	private D_huntingReward(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_huntingReward FindEntity(Predicate<D_huntingReward> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_huntingReward> FindEntities(Predicate<D_huntingReward> filter, List<D_huntingReward> result=null, Comparison<D_huntingReward> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_huntingReward> action, Predicate<D_huntingReward> filter=null, Comparison<D_huntingReward> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_huntingReward GetEntity(BGId entityId) => (D_huntingReward) MetaDefault.GetEntity(entityId);
	public static D_huntingReward GetEntity(int index) => (D_huntingReward) MetaDefault[index];
	public static D_huntingReward GetEntity(string entityName) => (D_huntingReward) MetaDefault.GetEntity(entityName);
	public static D_huntingReward NewEntity() => (D_huntingReward) MetaDefault.NewEntity();
	public static D_huntingReward NewEntity(BGId entityId) => (D_huntingReward) MetaDefault.NewEntity(entityId);
	public static D_huntingReward NewEntity(Action<D_huntingReward> callback) => (D_huntingReward) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_huntingReward)entity)));
	public static D_huntingReward NewEntity(D_HuntingOptionData owner) => (D_huntingReward) MetaDefault.NewEntity(owner);
	public static D_huntingReward NewEntity(D_HuntingOptionData owner, BGId entityId) => (D_huntingReward) MetaDefault.NewEntity(owner, entityId);
	public static D_huntingReward NewEntity(D_HuntingOptionData owner, Action<D_huntingReward> callback) => (D_huntingReward) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_huntingReward)entity)));
}

public partial class D_huntingRisk : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_huntingRisk(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_huntingRisk(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "huntingRisk";
		public const string name = "name";
		public const string HuntingOptionData = "HuntingOptionData";
		public const string statName = "statName";
		public const string value = "value";
		public const string valueMultiply = "valueMultiply";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5193281499204930993UL,8126367542010743195UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_HuntingOptionData f_HuntingOptionData
	{
		get => (D_HuntingOptionData) _f_HuntingOptionData[Index];
		set => _f_HuntingOptionData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_value
	{
		get => _f_value[Index];
		set => _f_value[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5361911760733470271UL, 2637356350871549334UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_HuntingOptionData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_HuntingOptionData => _ufle12jhs77_f_HuntingOptionData ?? (_ufle12jhs77_f_HuntingOptionData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4686832928190949775UL, 1357236513642251172UL), () => _ufle12jhs77_f_HuntingOptionData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4738147694662960627UL, 3394706093966033024UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_value;
	public static BansheeGz.BGDatabase.BGFieldInt _f_value => _ufle12jhs77_f_value ?? (_ufle12jhs77_f_value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5146288378361260847UL, 13892399325673393550UL), () => _ufle12jhs77_f_value = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5647860076045685610UL, 2173440064273157280UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_huntingRisk() : base(MetaDefault) {}
	private D_huntingRisk(BGId id) : base(MetaDefault, id) {}
	private D_huntingRisk(BGMetaEntity meta) : base(meta) {}
	private D_huntingRisk(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_huntingRisk FindEntity(Predicate<D_huntingRisk> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_huntingRisk> FindEntities(Predicate<D_huntingRisk> filter, List<D_huntingRisk> result=null, Comparison<D_huntingRisk> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_huntingRisk> action, Predicate<D_huntingRisk> filter=null, Comparison<D_huntingRisk> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_huntingRisk GetEntity(BGId entityId) => (D_huntingRisk) MetaDefault.GetEntity(entityId);
	public static D_huntingRisk GetEntity(int index) => (D_huntingRisk) MetaDefault[index];
	public static D_huntingRisk GetEntity(string entityName) => (D_huntingRisk) MetaDefault.GetEntity(entityName);
	public static D_huntingRisk NewEntity() => (D_huntingRisk) MetaDefault.NewEntity();
	public static D_huntingRisk NewEntity(BGId entityId) => (D_huntingRisk) MetaDefault.NewEntity(entityId);
	public static D_huntingRisk NewEntity(Action<D_huntingRisk> callback) => (D_huntingRisk) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_huntingRisk)entity)));
	public static D_huntingRisk NewEntity(D_HuntingOptionData owner) => (D_huntingRisk) MetaDefault.NewEntity(owner);
	public static D_huntingRisk NewEntity(D_HuntingOptionData owner, BGId entityId) => (D_huntingRisk) MetaDefault.NewEntity(owner, entityId);
	public static D_huntingRisk NewEntity(D_HuntingOptionData owner, Action<D_huntingRisk> callback) => (D_huntingRisk) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_huntingRisk)entity)));
}

public partial class D_SpawnEnemyEventData : BGEntity, D_EventDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_SpawnEnemyEventData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_SpawnEnemyEventData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "SpawnEnemyEventData";
		public const string name = "name";
		public const string enemy = "enemy";
		public const string spawnCount = "spawnCount";
		public const string eventTriggerType = "eventTriggerType";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5218388514063466660UL,741042039748759204UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_EnemyData f_enemy
	{
		get => (D_EnemyData) _f_enemy[Index];
		set => _f_enemy[Index] = value;
	}
	public System.Int32 f_spawnCount
	{
		get => _f_spawnCount[Index];
		set => _f_spawnCount[Index] = value;
	}
	public EventTriggerType f_eventTriggerType
	{
		get => (EventTriggerType) _f_eventTriggerType.GetStoredValue(Index);
		set => _f_eventTriggerType.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4681781495519159271UL, 10544228177681240984UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_enemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_enemy => _ufle12jhs77_f_enemy ?? (_ufle12jhs77_f_enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(4636383276932165652UL, 10203178261217221005UL), () => _ufle12jhs77_f_enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_spawnCount;
	public static BansheeGz.BGDatabase.BGFieldInt _f_spawnCount => _ufle12jhs77_f_spawnCount ?? (_ufle12jhs77_f_spawnCount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5455191030196266291UL, 12450593194824238257UL), () => _ufle12jhs77_f_spawnCount = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_eventTriggerType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_eventTriggerType => _ufle12jhs77_f_eventTriggerType ?? (_ufle12jhs77_f_eventTriggerType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5373829086129235479UL, 13599538728769204103UL), () => _ufle12jhs77_f_eventTriggerType = null));
	public List<Alias_rifegrt_EnemyData> RelatedEnemyDataListUsingevnetsRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_EnemyData>(Alias_rifegrt_EnemyData._f_evnets, Id);
	public List<Alias_rifegrt_cellData> RelatedcellDataListUsingeventsRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_cellData>(Alias_rifegrt_cellData._f_events, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_SpawnEnemyEventData() : base(MetaDefault) {}
	private D_SpawnEnemyEventData(BGId id) : base(MetaDefault, id) {}
	private D_SpawnEnemyEventData(BGMetaEntity meta) : base(meta) {}
	private D_SpawnEnemyEventData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_SpawnEnemyEventData FindEntity(Predicate<D_SpawnEnemyEventData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_SpawnEnemyEventData> FindEntities(Predicate<D_SpawnEnemyEventData> filter, List<D_SpawnEnemyEventData> result=null, Comparison<D_SpawnEnemyEventData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_SpawnEnemyEventData> action, Predicate<D_SpawnEnemyEventData> filter=null, Comparison<D_SpawnEnemyEventData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_SpawnEnemyEventData GetEntity(BGId entityId) => (D_SpawnEnemyEventData) MetaDefault.GetEntity(entityId);
	public static D_SpawnEnemyEventData GetEntity(int index) => (D_SpawnEnemyEventData) MetaDefault[index];
	public static D_SpawnEnemyEventData GetEntity(string entityName) => (D_SpawnEnemyEventData) MetaDefault.GetEntity(entityName);
	public static D_SpawnEnemyEventData NewEntity() => (D_SpawnEnemyEventData) MetaDefault.NewEntity();
	public static D_SpawnEnemyEventData NewEntity(BGId entityId) => (D_SpawnEnemyEventData) MetaDefault.NewEntity(entityId);
	public static D_SpawnEnemyEventData NewEntity(Action<D_SpawnEnemyEventData> callback) => (D_SpawnEnemyEventData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_SpawnEnemyEventData)entity)));
}

public partial class D_DropItemEventData : BGEntity, D_EventDummyData
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_DropItemEventData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_DropItemEventData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "DropItemEventData";
		public const string name = "name";
		public const string dropItems = "dropItems";
		public const string count = "count";
		public const string eventTriggerType = "eventTriggerType";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5563765364262439035UL,658635156273151122UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public List<D_DropItemData> f_dropItems
	{
		get => BGCodeGenUtils.MultipleRelationGet<D_DropItemData>(_f_dropItems, Index);
		set => BGCodeGenUtils.MultipleRelationSet<D_DropItemData>(_f_dropItems, Index, value);
	}
	public System.Int32 f_count
	{
		get => _f_count[Index];
		set => _f_count[Index] = value;
	}
	public EventTriggerType f_eventTriggerType
	{
		get => (EventTriggerType) _f_eventTriggerType.GetStoredValue(Index);
		set => _f_eventTriggerType.SetStoredValue(Index, (System.Int32) value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5537633788376060722UL, 2887704959635096973UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationMultiple _ufle12jhs77_f_dropItems;
	public static BansheeGz.BGDatabase.BGFieldRelationMultiple _f_dropItems => _ufle12jhs77_f_dropItems ?? (_ufle12jhs77_f_dropItems = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationMultiple>(MetaDefault, new BGId(4667171506008493940UL, 1145609217763229626UL), () => _ufle12jhs77_f_dropItems = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_count;
	public static BansheeGz.BGDatabase.BGFieldInt _f_count => _ufle12jhs77_f_count ?? (_ufle12jhs77_f_count = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5539785080637756865UL, 12182436033470162316UL), () => _ufle12jhs77_f_count = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_eventTriggerType;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_eventTriggerType => _ufle12jhs77_f_eventTriggerType ?? (_ufle12jhs77_f_eventTriggerType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4698164014916842452UL, 16822308966496905661UL), () => _ufle12jhs77_f_eventTriggerType = null));
	public List<Alias_rifegrt_EnemyData> RelatedEnemyDataListUsingevnetsRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_EnemyData>(Alias_rifegrt_EnemyData._f_evnets, Id);
	public List<Alias_rifegrt_cellData> RelatedcellDataListUsingeventsRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_cellData>(Alias_rifegrt_cellData._f_events, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_DropItemEventData() : base(MetaDefault) {}
	private D_DropItemEventData(BGId id) : base(MetaDefault, id) {}
	private D_DropItemEventData(BGMetaEntity meta) : base(meta) {}
	private D_DropItemEventData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_DropItemEventData FindEntity(Predicate<D_DropItemEventData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_DropItemEventData> FindEntities(Predicate<D_DropItemEventData> filter, List<D_DropItemEventData> result=null, Comparison<D_DropItemEventData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_DropItemEventData> action, Predicate<D_DropItemEventData> filter=null, Comparison<D_DropItemEventData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_DropItemEventData GetEntity(BGId entityId) => (D_DropItemEventData) MetaDefault.GetEntity(entityId);
	public static D_DropItemEventData GetEntity(int index) => (D_DropItemEventData) MetaDefault[index];
	public static D_DropItemEventData GetEntity(string entityName) => (D_DropItemEventData) MetaDefault.GetEntity(entityName);
	public static D_DropItemEventData NewEntity() => (D_DropItemEventData) MetaDefault.NewEntity();
	public static D_DropItemEventData NewEntity(BGId entityId) => (D_DropItemEventData) MetaDefault.NewEntity(entityId);
	public static D_DropItemEventData NewEntity(Action<D_DropItemEventData> callback) => (D_DropItemEventData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_DropItemEventData)entity)));
	public void f_dropItems_Add(D_DropItemData related) => BGCodeGenUtils.MultipleRelationAdd(_f_dropItems, Index, related);
	public void f_dropItems_Remove(D_DropItemData related) => BGCodeGenUtils.MultipleRelationRemove(_f_dropItems, Index, related);
}

public partial class D_SpriteData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_SpriteData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_SpriteData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "SpriteData";
		public const string name = "name";
		public const string addressableKey = "addressableKey";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5105326848336484111UL,3730655556805886646UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.String f_addressableKey
	{
		get => _f_addressableKey[Index];
		set => _f_addressableKey[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4664482956959057348UL, 15623864410891297957UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_addressableKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_addressableKey => _ufle12jhs77_f_addressableKey ?? (_ufle12jhs77_f_addressableKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5760815474465856552UL, 5998882030362246298UL), () => _ufle12jhs77_f_addressableKey = null));
	public List<Alias_rifegrt_ItemData> RelatedItemDataListUsingiconImageRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_ItemData>(Alias_rifegrt_ItemData._f_iconImage, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_SpriteData() : base(MetaDefault) {}
	private D_SpriteData(BGId id) : base(MetaDefault, id) {}
	private D_SpriteData(BGMetaEntity meta) : base(meta) {}
	private D_SpriteData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_SpriteData FindEntity(Predicate<D_SpriteData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_SpriteData> FindEntities(Predicate<D_SpriteData> filter, List<D_SpriteData> result=null, Comparison<D_SpriteData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_SpriteData> action, Predicate<D_SpriteData> filter=null, Comparison<D_SpriteData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_SpriteData GetEntity(BGId entityId) => (D_SpriteData) MetaDefault.GetEntity(entityId);
	public static D_SpriteData GetEntity(int index) => (D_SpriteData) MetaDefault[index];
	public static D_SpriteData GetEntity(string entityName) => (D_SpriteData) MetaDefault.GetEntity(entityName);
	public static D_SpriteData NewEntity() => (D_SpriteData) MetaDefault.NewEntity();
	public static D_SpriteData NewEntity(BGId entityId) => (D_SpriteData) MetaDefault.NewEntity(entityId);
	public static D_SpriteData NewEntity(Action<D_SpriteData> callback) => (D_SpriteData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_SpriteData)entity)));
}

public partial class D_DropItemData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_DropItemData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_DropItemData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "DropItemData";
		public const string name = "name";
		public const string itemList = "itemList";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4720460823385220282UL,3383305325994858665UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public List<D_itemList> f_itemList => BGCodeGenUtils.GetNested<D_itemList>(_f_itemList, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5087212523428164329UL, 3794332638014140346UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_itemList;
	public static BansheeGz.BGDatabase.BGFieldNested _f_itemList => _ufle12jhs77_f_itemList ?? (_ufle12jhs77_f_itemList = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(5285129485276170491UL, 2868533297937051296UL), () => _ufle12jhs77_f_itemList = null));
	public List<Alias_rifegrt_DropItemEventData> RelatedDropItemEventDataListUsingdropItemsRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_DropItemEventData>(Alias_rifegrt_DropItemEventData._f_dropItems, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_DropItemData() : base(MetaDefault) {}
	private D_DropItemData(BGId id) : base(MetaDefault, id) {}
	private D_DropItemData(BGMetaEntity meta) : base(meta) {}
	private D_DropItemData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_DropItemData FindEntity(Predicate<D_DropItemData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_DropItemData> FindEntities(Predicate<D_DropItemData> filter, List<D_DropItemData> result=null, Comparison<D_DropItemData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_DropItemData> action, Predicate<D_DropItemData> filter=null, Comparison<D_DropItemData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_DropItemData GetEntity(BGId entityId) => (D_DropItemData) MetaDefault.GetEntity(entityId);
	public static D_DropItemData GetEntity(int index) => (D_DropItemData) MetaDefault[index];
	public static D_DropItemData GetEntity(string entityName) => (D_DropItemData) MetaDefault.GetEntity(entityName);
	public static D_DropItemData NewEntity() => (D_DropItemData) MetaDefault.NewEntity();
	public static D_DropItemData NewEntity(BGId entityId) => (D_DropItemData) MetaDefault.NewEntity(entityId);
	public static D_DropItemData NewEntity(Action<D_DropItemData> callback) => (D_DropItemData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_DropItemData)entity)));
}

public partial class D_itemList : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_itemList(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_itemList(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "itemList";
		public const string name = "name";
		public const string DropItemData = "DropItemData";
		public const string itemData = "itemData";
		public const string chance = "chance";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(4752916869786514463UL,18435433014175687605UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_DropItemData f_DropItemData
	{
		get => (D_DropItemData) _f_DropItemData[Index];
		set => _f_DropItemData[Index] = value;
	}
	public D_ItemData f_itemData
	{
		get => (D_ItemData) _f_itemData[Index];
		set => _f_itemData[Index] = value;
	}
	public System.Single f_chance
	{
		get => _f_chance[Index];
		set => _f_chance[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4672407910070407424UL, 11127397474830590121UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_DropItemData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_DropItemData => _ufle12jhs77_f_DropItemData ?? (_ufle12jhs77_f_DropItemData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5095126667583166422UL, 1591830457875643526UL), () => _ufle12jhs77_f_DropItemData = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_itemData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_itemData => _ufle12jhs77_f_itemData ?? (_ufle12jhs77_f_itemData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5432296468616124838UL, 15044486605270537860UL), () => _ufle12jhs77_f_itemData = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_chance;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_chance => _ufle12jhs77_f_chance ?? (_ufle12jhs77_f_chance = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5179237581003591470UL, 6277232194638621081UL), () => _ufle12jhs77_f_chance = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_itemList() : base(MetaDefault) {}
	private D_itemList(BGId id) : base(MetaDefault, id) {}
	private D_itemList(BGMetaEntity meta) : base(meta) {}
	private D_itemList(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_itemList FindEntity(Predicate<D_itemList> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_itemList> FindEntities(Predicate<D_itemList> filter, List<D_itemList> result=null, Comparison<D_itemList> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_itemList> action, Predicate<D_itemList> filter=null, Comparison<D_itemList> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_itemList GetEntity(BGId entityId) => (D_itemList) MetaDefault.GetEntity(entityId);
	public static D_itemList GetEntity(int index) => (D_itemList) MetaDefault[index];
	public static D_itemList GetEntity(string entityName) => (D_itemList) MetaDefault.GetEntity(entityName);
	public static D_itemList NewEntity() => (D_itemList) MetaDefault.NewEntity();
	public static D_itemList NewEntity(BGId entityId) => (D_itemList) MetaDefault.NewEntity(entityId);
	public static D_itemList NewEntity(Action<D_itemList> callback) => (D_itemList) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_itemList)entity)));
	public static D_itemList NewEntity(D_DropItemData owner) => (D_itemList) MetaDefault.NewEntity(owner);
	public static D_itemList NewEntity(D_DropItemData owner, BGId entityId) => (D_itemList) MetaDefault.NewEntity(owner, entityId);
	public static D_itemList NewEntity(D_DropItemData owner, Action<D_itemList> callback) => (D_itemList) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_itemList)entity)));
}

public partial class D_itemStats : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_itemStats(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_itemStats(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "itemStats";
		public const string name = "name";
		public const string ItemData = "ItemData";
		public const string statName = "statName";
		public const string statValue = "statValue";
		public const string valueMultiply = "valueMultiply";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5146797916643579646UL,554293649707358348UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_ItemData f_ItemData
	{
		get => (D_ItemData) _f_ItemData[Index];
		set => _f_ItemData[Index] = value;
	}
	public StatName f_statName
	{
		get => (StatName) _f_statName.GetStoredValue(Index);
		set => _f_statName.SetStoredValue(Index, (System.Int32) value);
	}
	public System.Int32 f_statValue
	{
		get => _f_statValue[Index];
		set => _f_statValue[Index] = value;
	}
	public System.Single f_valueMultiply
	{
		get => _f_valueMultiply[Index];
		set => _f_valueMultiply[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4935627238618710556UL, 8849993127964897201UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_ItemData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_ItemData => _ufle12jhs77_f_ItemData ?? (_ufle12jhs77_f_ItemData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5207617740362310928UL, 3521774931901604029UL), () => _ufle12jhs77_f_ItemData = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_statName;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_statName => _ufle12jhs77_f_statName ?? (_ufle12jhs77_f_statName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(4906574005728807894UL, 6234582557027863706UL), () => _ufle12jhs77_f_statName = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_statValue;
	public static BansheeGz.BGDatabase.BGFieldInt _f_statValue => _ufle12jhs77_f_statValue ?? (_ufle12jhs77_f_statValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5333592163319526855UL, 7914938684276432775UL), () => _ufle12jhs77_f_statValue = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_f_valueMultiply;
	public static BansheeGz.BGDatabase.BGFieldFloat _f_valueMultiply => _ufle12jhs77_f_valueMultiply ?? (_ufle12jhs77_f_valueMultiply = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5184450576301557622UL, 6440268639604641202UL), () => _ufle12jhs77_f_valueMultiply = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_itemStats() : base(MetaDefault) {}
	private D_itemStats(BGId id) : base(MetaDefault, id) {}
	private D_itemStats(BGMetaEntity meta) : base(meta) {}
	private D_itemStats(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_itemStats FindEntity(Predicate<D_itemStats> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_itemStats> FindEntities(Predicate<D_itemStats> filter, List<D_itemStats> result=null, Comparison<D_itemStats> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_itemStats> action, Predicate<D_itemStats> filter=null, Comparison<D_itemStats> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_itemStats GetEntity(BGId entityId) => (D_itemStats) MetaDefault.GetEntity(entityId);
	public static D_itemStats GetEntity(int index) => (D_itemStats) MetaDefault[index];
	public static D_itemStats GetEntity(string entityName) => (D_itemStats) MetaDefault.GetEntity(entityName);
	public static D_itemStats NewEntity() => (D_itemStats) MetaDefault.NewEntity();
	public static D_itemStats NewEntity(BGId entityId) => (D_itemStats) MetaDefault.NewEntity(entityId);
	public static D_itemStats NewEntity(Action<D_itemStats> callback) => (D_itemStats) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_itemStats)entity)));
	public static D_itemStats NewEntity(D_ItemData owner) => (D_itemStats) MetaDefault.NewEntity(owner);
	public static D_itemStats NewEntity(D_ItemData owner, BGId entityId) => (D_itemStats) MetaDefault.NewEntity(owner, entityId);
	public static D_itemStats NewEntity(D_ItemData owner, Action<D_itemStats> callback) => (D_itemStats) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_itemStats)entity)));
}

public partial class D_EnemyPlacementData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_EnemyPlacementData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_EnemyPlacementData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "EnemyPlacementData";
		public const string name = "name";
		public const string mapID = "mapID";
		public const string cellData = "cellData";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4862011247241814363UL,5915494226641864383UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.Int32 f_mapID
	{
		get => _f_mapID[Index];
		set => _f_mapID[Index] = value;
	}
	public List<D_cellData> f_cellData => BGCodeGenUtils.GetNested<D_cellData>(_f_cellData, Index);
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5359672806150600911UL, 14773360415385454006UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_mapID;
	public static BansheeGz.BGDatabase.BGFieldInt _f_mapID => _ufle12jhs77_f_mapID ?? (_ufle12jhs77_f_mapID = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5364601876086895303UL, 10844628389872253842UL), () => _ufle12jhs77_f_mapID = null));
	private static BansheeGz.BGDatabase.BGFieldNested _ufle12jhs77_f_cellData;
	public static BansheeGz.BGDatabase.BGFieldNested _f_cellData => _ufle12jhs77_f_cellData ?? (_ufle12jhs77_f_cellData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldNested>(MetaDefault, new BGId(4751203111009023428UL, 1917794676766383794UL), () => _ufle12jhs77_f_cellData = null));
	public List<Alias_rifegrt_NormalBattleWaveData> RelatedNormalBattleWaveDataListUsingplaceEnemyMapDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_NormalBattleWaveData>(Alias_rifegrt_NormalBattleWaveData._f_placeEnemyMapData, Id);
	public List<Alias_rifegrt_BossBattleWaveData> RelatedBossBattleWaveDataListUsingplaceEnemyMapDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_BossBattleWaveData>(Alias_rifegrt_BossBattleWaveData._f_placeEnemyMapData, Id);
	public List<Alias_rifegrt_EventEnemyWaveData> RelatedEventEnemyWaveDataListUsingplaceEnemyMapDataRelation => BGCodeGenUtils.GetRelatedInbound<Alias_rifegrt_EventEnemyWaveData>(Alias_rifegrt_EventEnemyWaveData._f_placeEnemyMapData, Id);
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_EnemyPlacementData() : base(MetaDefault) {}
	private D_EnemyPlacementData(BGId id) : base(MetaDefault, id) {}
	private D_EnemyPlacementData(BGMetaEntity meta) : base(meta) {}
	private D_EnemyPlacementData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_EnemyPlacementData FindEntity(Predicate<D_EnemyPlacementData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_EnemyPlacementData> FindEntities(Predicate<D_EnemyPlacementData> filter, List<D_EnemyPlacementData> result=null, Comparison<D_EnemyPlacementData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_EnemyPlacementData> action, Predicate<D_EnemyPlacementData> filter=null, Comparison<D_EnemyPlacementData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_EnemyPlacementData GetEntity(BGId entityId) => (D_EnemyPlacementData) MetaDefault.GetEntity(entityId);
	public static D_EnemyPlacementData GetEntity(int index) => (D_EnemyPlacementData) MetaDefault[index];
	public static D_EnemyPlacementData GetEntity(string entityName) => (D_EnemyPlacementData) MetaDefault.GetEntity(entityName);
	public static D_EnemyPlacementData NewEntity() => (D_EnemyPlacementData) MetaDefault.NewEntity();
	public static D_EnemyPlacementData NewEntity(BGId entityId) => (D_EnemyPlacementData) MetaDefault.NewEntity(entityId);
	public static D_EnemyPlacementData NewEntity(Action<D_EnemyPlacementData> callback) => (D_EnemyPlacementData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_EnemyPlacementData)entity)));
}

public partial class D_cellData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_cellData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_cellData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "cellData";
		public const string name = "name";
		public const string EnemyPlacementData = "EnemyPlacementData";
		public const string position = "position";
		public const string enemy = "enemy";
		public const string events = "events";
	}
	private static BansheeGz.BGDatabase.BGMetaNested _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaNested MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaNested>(new BGId(5095643791464053438UL,12200264284343653026UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public D_EnemyPlacementData f_EnemyPlacementData
	{
		get => (D_EnemyPlacementData) _f_EnemyPlacementData[Index];
		set => _f_EnemyPlacementData[Index] = value;
	}
	public UnityEngine.Vector2 f_position
	{
		get => _f_position[Index];
		set => _f_position[Index] = value;
	}
	public D_EnemyData f_enemy
	{
		get => (D_EnemyData) _f_enemy[Index];
		set => _f_enemy[Index] = value;
	}
	public List<D_EventDummyData> f_events
	{
		get => BGCodeGenUtils.MultipleViewRelationGet<D_EventDummyData>(_f_events, Index);
		set => BGCodeGenUtils.MultipleViewRelationSet<D_EventDummyData>(_f_events, Index, value);
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5653566373782374350UL, 12571288364898990260UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_EnemyPlacementData;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_EnemyPlacementData => _ufle12jhs77_f_EnemyPlacementData ?? (_ufle12jhs77_f_EnemyPlacementData = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5246897570410813832UL, 16821895036654188943UL), () => _ufle12jhs77_f_EnemyPlacementData = null));
	private static BansheeGz.BGDatabase.BGFieldVector2 _ufle12jhs77_f_position;
	public static BansheeGz.BGDatabase.BGFieldVector2 _f_position => _ufle12jhs77_f_position ?? (_ufle12jhs77_f_position = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldVector2>(MetaDefault, new BGId(4684448980086813351UL, 12051114691102308023UL), () => _ufle12jhs77_f_position = null));
	private static BansheeGz.BGDatabase.BGFieldRelationSingle _ufle12jhs77_f_enemy;
	public static BansheeGz.BGDatabase.BGFieldRelationSingle _f_enemy => _ufle12jhs77_f_enemy ?? (_ufle12jhs77_f_enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldRelationSingle>(MetaDefault, new BGId(5684146794674907963UL, 8379958305318812343UL), () => _ufle12jhs77_f_enemy = null));
	private static BansheeGz.BGDatabase.BGFieldViewRelationMultiple _ufle12jhs77_f_events;
	public static BansheeGz.BGDatabase.BGFieldViewRelationMultiple _f_events => _ufle12jhs77_f_events ?? (_ufle12jhs77_f_events = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldViewRelationMultiple>(MetaDefault, new BGId(5140972557981187596UL, 9734447275327986823UL), () => _ufle12jhs77_f_events = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_cellData() : base(MetaDefault) {}
	private D_cellData(BGId id) : base(MetaDefault, id) {}
	private D_cellData(BGMetaEntity meta) : base(meta) {}
	private D_cellData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_cellData FindEntity(Predicate<D_cellData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_cellData> FindEntities(Predicate<D_cellData> filter, List<D_cellData> result=null, Comparison<D_cellData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_cellData> action, Predicate<D_cellData> filter=null, Comparison<D_cellData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_cellData GetEntity(BGId entityId) => (D_cellData) MetaDefault.GetEntity(entityId);
	public static D_cellData GetEntity(int index) => (D_cellData) MetaDefault[index];
	public static D_cellData GetEntity(string entityName) => (D_cellData) MetaDefault.GetEntity(entityName);
	public static D_cellData NewEntity() => (D_cellData) MetaDefault.NewEntity();
	public static D_cellData NewEntity(BGId entityId) => (D_cellData) MetaDefault.NewEntity(entityId);
	public static D_cellData NewEntity(Action<D_cellData> callback) => (D_cellData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_cellData)entity)));
	public static D_cellData NewEntity(D_EnemyPlacementData owner) => (D_cellData) MetaDefault.NewEntity(owner);
	public static D_cellData NewEntity(D_EnemyPlacementData owner, BGId entityId) => (D_cellData) MetaDefault.NewEntity(owner, entityId);
	public static D_cellData NewEntity(D_EnemyPlacementData owner, Action<D_cellData> callback) => (D_cellData) MetaDefault.NewEntity(owner, new BGMetaEntity.NewEntityContext(entity => callback((D_cellData)entity)));
}

public partial class D_UnitAppearanceData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_UnitAppearanceData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_UnitAppearanceData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "UnitAppearanceData";
		public const string name = "name";
		public const string SlotNeckFrontSpriteKey = "SlotNeckFrontSpriteKey";
		public const string SlotNeckFrontTint = "SlotNeckFrontTint";
		public const string SlotNeckFrontEnabled = "SlotNeckFrontEnabled";
		public const string SlotNeckFrontACCSpriteKey = "SlotNeckFrontACCSpriteKey";
		public const string SlotNeckFrontACCTint = "SlotNeckFrontACCTint";
		public const string SlotNeckFrontACCEnabled = "SlotNeckFrontACCEnabled";
		public const string SlotNeckBackSpriteKey = "SlotNeckBackSpriteKey";
		public const string SlotNeckBackTint = "SlotNeckBackTint";
		public const string SlotNeckBackEnabled = "SlotNeckBackEnabled";
		public const string SlotBodySpriteKey = "SlotBodySpriteKey";
		public const string SlotBodyTint = "SlotBodyTint";
		public const string SlotBodyEnabled = "SlotBodyEnabled";
		public const string SlotSkinHeadSpriteKey = "SlotSkinHeadSpriteKey";
		public const string SlotSkinHeadTint = "SlotSkinHeadTint";
		public const string SlotSkinHeadEnabled = "SlotSkinHeadEnabled";
		public const string SlotPaternMiddleSpriteKey = "SlotPaternMiddleSpriteKey";
		public const string SlotPaternMiddleTint = "SlotPaternMiddleTint";
		public const string SlotPaternMiddleEnabled = "SlotPaternMiddleEnabled";
		public const string SlotEyeSpriteKey = "SlotEyeSpriteKey";
		public const string SlotEyeTint = "SlotEyeTint";
		public const string SlotEyeEnabled = "SlotEyeEnabled";
		public const string SlotNoseSpriteKey = "SlotNoseSpriteKey";
		public const string SlotNoseTint = "SlotNoseTint";
		public const string SlotNoseEnabled = "SlotNoseEnabled";
		public const string SlotGlassesSpriteKey = "SlotGlassesSpriteKey";
		public const string SlotGlassesTint = "SlotGlassesTint";
		public const string SlotGlassesEnabled = "SlotGlassesEnabled";
		public const string SlotSkinEarSpriteKey = "SlotSkinEarSpriteKey";
		public const string SlotSkinEarTint = "SlotSkinEarTint";
		public const string SlotSkinEarEnabled = "SlotSkinEarEnabled";
		public const string SlotInnerEarSpriteKey = "SlotInnerEarSpriteKey";
		public const string SlotInnerEarTint = "SlotInnerEarTint";
		public const string SlotInnerEarEnabled = "SlotInnerEarEnabled";
		public const string SlotFrontHatSpriteKey = "SlotFrontHatSpriteKey";
		public const string SlotFrontHatTint = "SlotFrontHatTint";
		public const string SlotFrontHatEnabled = "SlotFrontHatEnabled";
		public const string SlotBackHatSpriteKey = "SlotBackHatSpriteKey";
		public const string SlotBackHatTint = "SlotBackHatTint";
		public const string SlotBackHatEnabled = "SlotBackHatEnabled";
		public const string SlotSkinTailSpriteKey = "SlotSkinTailSpriteKey";
		public const string SlotSkinTailTint = "SlotSkinTailTint";
		public const string SlotSkinTailEnabled = "SlotSkinTailEnabled";
		public const string SlotRightShoulderSpriteKey = "SlotRightShoulderSpriteKey";
		public const string SlotRightShoulderTint = "SlotRightShoulderTint";
		public const string SlotRightShoulderEnabled = "SlotRightShoulderEnabled";
		public const string SlotSkinRightArmSpriteKey = "SlotSkinRightArmSpriteKey";
		public const string SlotSkinRightArmTint = "SlotSkinRightArmTint";
		public const string SlotSkinRightArmEnabled = "SlotSkinRightArmEnabled";
		public const string SlotRightArmClothSpriteKey = "SlotRightArmClothSpriteKey";
		public const string SlotRightArmClothTint = "SlotRightArmClothTint";
		public const string SlotRightArmClothEnabled = "SlotRightArmClothEnabled";
		public const string SlotWeaponArrowSpriteKey = "SlotWeaponArrowSpriteKey";
		public const string SlotWeaponArrowTint = "SlotWeaponArrowTint";
		public const string SlotWeaponArrowEnabled = "SlotWeaponArrowEnabled";
		public const string SlotLeftShoulderSpriteKey = "SlotLeftShoulderSpriteKey";
		public const string SlotLeftShoulderTint = "SlotLeftShoulderTint";
		public const string SlotLeftShoulderEnabled = "SlotLeftShoulderEnabled";
		public const string SlotSkinLeftArmSpriteKey = "SlotSkinLeftArmSpriteKey";
		public const string SlotSkinLeftArmTint = "SlotSkinLeftArmTint";
		public const string SlotSkinLeftArmEnabled = "SlotSkinLeftArmEnabled";
		public const string SlotWeaponSpearSpriteKey = "SlotWeaponSpearSpriteKey";
		public const string SlotWeaponSpearTint = "SlotWeaponSpearTint";
		public const string SlotWeaponSpearEnabled = "SlotWeaponSpearEnabled";
		public const string SlotWeaponSwordSpriteKey = "SlotWeaponSwordSpriteKey";
		public const string SlotWeaponSwordTint = "SlotWeaponSwordTint";
		public const string SlotWeaponSwordEnabled = "SlotWeaponSwordEnabled";
		public const string SlotBowMiddleSpriteKey = "SlotBowMiddleSpriteKey";
		public const string SlotBowMiddleTint = "SlotBowMiddleTint";
		public const string SlotBowMiddleEnabled = "SlotBowMiddleEnabled";
		public const string SlotBowTopSpriteKey = "SlotBowTopSpriteKey";
		public const string SlotBowTopTint = "SlotBowTopTint";
		public const string SlotBowTopEnabled = "SlotBowTopEnabled";
		public const string SlotBowLineTopSpriteKey = "SlotBowLineTopSpriteKey";
		public const string SlotBowLineTopTint = "SlotBowLineTopTint";
		public const string SlotBowLineTopEnabled = "SlotBowLineTopEnabled";
		public const string SlotBowBottomSpriteKey = "SlotBowBottomSpriteKey";
		public const string SlotBowBottomTint = "SlotBowBottomTint";
		public const string SlotBowBottomEnabled = "SlotBowBottomEnabled";
		public const string SlotBowLineBottomSpriteKey = "SlotBowLineBottomSpriteKey";
		public const string SlotBowLineBottomTint = "SlotBowLineBottomTint";
		public const string SlotBowLineBottomEnabled = "SlotBowLineBottomEnabled";
		public const string SlotLeftArmClothSpriteKey = "SlotLeftArmClothSpriteKey";
		public const string SlotLeftArmClothTint = "SlotLeftArmClothTint";
		public const string SlotLeftArmClothEnabled = "SlotLeftArmClothEnabled";
		public const string SlotBeltSpriteKey = "SlotBeltSpriteKey";
		public const string SlotBeltTint = "SlotBeltTint";
		public const string SlotBeltEnabled = "SlotBeltEnabled";
		public const string SlotLeftLegSpriteKey = "SlotLeftLegSpriteKey";
		public const string SlotLeftLegTint = "SlotLeftLegTint";
		public const string SlotLeftLegEnabled = "SlotLeftLegEnabled";
		public const string SlotRightLegSpriteKey = "SlotRightLegSpriteKey";
		public const string SlotRightLegTint = "SlotRightLegTint";
		public const string SlotRightLegEnabled = "SlotRightLegEnabled";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4729747390774859296UL,10352431840437797552UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public System.String f_SlotNeckFrontSpriteKey
	{
		get => _f_SlotNeckFrontSpriteKey[Index];
		set => _f_SlotNeckFrontSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotNeckFrontTint
	{
		get => _f_SlotNeckFrontTint[Index];
		set => _f_SlotNeckFrontTint[Index] = value;
	}
	public System.Boolean f_SlotNeckFrontEnabled
	{
		get => _f_SlotNeckFrontEnabled[Index];
		set => _f_SlotNeckFrontEnabled[Index] = value;
	}
	public System.String f_SlotNeckFrontACCSpriteKey
	{
		get => _f_SlotNeckFrontACCSpriteKey[Index];
		set => _f_SlotNeckFrontACCSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotNeckFrontACCTint
	{
		get => _f_SlotNeckFrontACCTint[Index];
		set => _f_SlotNeckFrontACCTint[Index] = value;
	}
	public System.Boolean f_SlotNeckFrontACCEnabled
	{
		get => _f_SlotNeckFrontACCEnabled[Index];
		set => _f_SlotNeckFrontACCEnabled[Index] = value;
	}
	public System.String f_SlotNeckBackSpriteKey
	{
		get => _f_SlotNeckBackSpriteKey[Index];
		set => _f_SlotNeckBackSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotNeckBackTint
	{
		get => _f_SlotNeckBackTint[Index];
		set => _f_SlotNeckBackTint[Index] = value;
	}
	public System.Boolean f_SlotNeckBackEnabled
	{
		get => _f_SlotNeckBackEnabled[Index];
		set => _f_SlotNeckBackEnabled[Index] = value;
	}
	public System.String f_SlotBodySpriteKey
	{
		get => _f_SlotBodySpriteKey[Index];
		set => _f_SlotBodySpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotBodyTint
	{
		get => _f_SlotBodyTint[Index];
		set => _f_SlotBodyTint[Index] = value;
	}
	public System.Boolean f_SlotBodyEnabled
	{
		get => _f_SlotBodyEnabled[Index];
		set => _f_SlotBodyEnabled[Index] = value;
	}
	public System.String f_SlotSkinHeadSpriteKey
	{
		get => _f_SlotSkinHeadSpriteKey[Index];
		set => _f_SlotSkinHeadSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotSkinHeadTint
	{
		get => _f_SlotSkinHeadTint[Index];
		set => _f_SlotSkinHeadTint[Index] = value;
	}
	public System.Boolean f_SlotSkinHeadEnabled
	{
		get => _f_SlotSkinHeadEnabled[Index];
		set => _f_SlotSkinHeadEnabled[Index] = value;
	}
	public System.String f_SlotPaternMiddleSpriteKey
	{
		get => _f_SlotPaternMiddleSpriteKey[Index];
		set => _f_SlotPaternMiddleSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotPaternMiddleTint
	{
		get => _f_SlotPaternMiddleTint[Index];
		set => _f_SlotPaternMiddleTint[Index] = value;
	}
	public System.Boolean f_SlotPaternMiddleEnabled
	{
		get => _f_SlotPaternMiddleEnabled[Index];
		set => _f_SlotPaternMiddleEnabled[Index] = value;
	}
	public System.String f_SlotEyeSpriteKey
	{
		get => _f_SlotEyeSpriteKey[Index];
		set => _f_SlotEyeSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotEyeTint
	{
		get => _f_SlotEyeTint[Index];
		set => _f_SlotEyeTint[Index] = value;
	}
	public System.Boolean f_SlotEyeEnabled
	{
		get => _f_SlotEyeEnabled[Index];
		set => _f_SlotEyeEnabled[Index] = value;
	}
	public System.String f_SlotNoseSpriteKey
	{
		get => _f_SlotNoseSpriteKey[Index];
		set => _f_SlotNoseSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotNoseTint
	{
		get => _f_SlotNoseTint[Index];
		set => _f_SlotNoseTint[Index] = value;
	}
	public System.Boolean f_SlotNoseEnabled
	{
		get => _f_SlotNoseEnabled[Index];
		set => _f_SlotNoseEnabled[Index] = value;
	}
	public System.String f_SlotGlassesSpriteKey
	{
		get => _f_SlotGlassesSpriteKey[Index];
		set => _f_SlotGlassesSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotGlassesTint
	{
		get => _f_SlotGlassesTint[Index];
		set => _f_SlotGlassesTint[Index] = value;
	}
	public System.Boolean f_SlotGlassesEnabled
	{
		get => _f_SlotGlassesEnabled[Index];
		set => _f_SlotGlassesEnabled[Index] = value;
	}
	public System.String f_SlotSkinEarSpriteKey
	{
		get => _f_SlotSkinEarSpriteKey[Index];
		set => _f_SlotSkinEarSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotSkinEarTint
	{
		get => _f_SlotSkinEarTint[Index];
		set => _f_SlotSkinEarTint[Index] = value;
	}
	public System.Boolean f_SlotSkinEarEnabled
	{
		get => _f_SlotSkinEarEnabled[Index];
		set => _f_SlotSkinEarEnabled[Index] = value;
	}
	public System.String f_SlotInnerEarSpriteKey
	{
		get => _f_SlotInnerEarSpriteKey[Index];
		set => _f_SlotInnerEarSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotInnerEarTint
	{
		get => _f_SlotInnerEarTint[Index];
		set => _f_SlotInnerEarTint[Index] = value;
	}
	public System.Boolean f_SlotInnerEarEnabled
	{
		get => _f_SlotInnerEarEnabled[Index];
		set => _f_SlotInnerEarEnabled[Index] = value;
	}
	public System.String f_SlotFrontHatSpriteKey
	{
		get => _f_SlotFrontHatSpriteKey[Index];
		set => _f_SlotFrontHatSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotFrontHatTint
	{
		get => _f_SlotFrontHatTint[Index];
		set => _f_SlotFrontHatTint[Index] = value;
	}
	public System.Boolean f_SlotFrontHatEnabled
	{
		get => _f_SlotFrontHatEnabled[Index];
		set => _f_SlotFrontHatEnabled[Index] = value;
	}
	public System.String f_SlotBackHatSpriteKey
	{
		get => _f_SlotBackHatSpriteKey[Index];
		set => _f_SlotBackHatSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotBackHatTint
	{
		get => _f_SlotBackHatTint[Index];
		set => _f_SlotBackHatTint[Index] = value;
	}
	public System.Boolean f_SlotBackHatEnabled
	{
		get => _f_SlotBackHatEnabled[Index];
		set => _f_SlotBackHatEnabled[Index] = value;
	}
	public System.String f_SlotSkinTailSpriteKey
	{
		get => _f_SlotSkinTailSpriteKey[Index];
		set => _f_SlotSkinTailSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotSkinTailTint
	{
		get => _f_SlotSkinTailTint[Index];
		set => _f_SlotSkinTailTint[Index] = value;
	}
	public System.Boolean f_SlotSkinTailEnabled
	{
		get => _f_SlotSkinTailEnabled[Index];
		set => _f_SlotSkinTailEnabled[Index] = value;
	}
	public System.String f_SlotRightShoulderSpriteKey
	{
		get => _f_SlotRightShoulderSpriteKey[Index];
		set => _f_SlotRightShoulderSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotRightShoulderTint
	{
		get => _f_SlotRightShoulderTint[Index];
		set => _f_SlotRightShoulderTint[Index] = value;
	}
	public System.Boolean f_SlotRightShoulderEnabled
	{
		get => _f_SlotRightShoulderEnabled[Index];
		set => _f_SlotRightShoulderEnabled[Index] = value;
	}
	public System.String f_SlotSkinRightArmSpriteKey
	{
		get => _f_SlotSkinRightArmSpriteKey[Index];
		set => _f_SlotSkinRightArmSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotSkinRightArmTint
	{
		get => _f_SlotSkinRightArmTint[Index];
		set => _f_SlotSkinRightArmTint[Index] = value;
	}
	public System.Boolean f_SlotSkinRightArmEnabled
	{
		get => _f_SlotSkinRightArmEnabled[Index];
		set => _f_SlotSkinRightArmEnabled[Index] = value;
	}
	public System.String f_SlotRightArmClothSpriteKey
	{
		get => _f_SlotRightArmClothSpriteKey[Index];
		set => _f_SlotRightArmClothSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotRightArmClothTint
	{
		get => _f_SlotRightArmClothTint[Index];
		set => _f_SlotRightArmClothTint[Index] = value;
	}
	public System.Boolean f_SlotRightArmClothEnabled
	{
		get => _f_SlotRightArmClothEnabled[Index];
		set => _f_SlotRightArmClothEnabled[Index] = value;
	}
	public System.String f_SlotWeaponArrowSpriteKey
	{
		get => _f_SlotWeaponArrowSpriteKey[Index];
		set => _f_SlotWeaponArrowSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotWeaponArrowTint
	{
		get => _f_SlotWeaponArrowTint[Index];
		set => _f_SlotWeaponArrowTint[Index] = value;
	}
	public System.Boolean f_SlotWeaponArrowEnabled
	{
		get => _f_SlotWeaponArrowEnabled[Index];
		set => _f_SlotWeaponArrowEnabled[Index] = value;
	}
	public System.String f_SlotLeftShoulderSpriteKey
	{
		get => _f_SlotLeftShoulderSpriteKey[Index];
		set => _f_SlotLeftShoulderSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotLeftShoulderTint
	{
		get => _f_SlotLeftShoulderTint[Index];
		set => _f_SlotLeftShoulderTint[Index] = value;
	}
	public System.Boolean f_SlotLeftShoulderEnabled
	{
		get => _f_SlotLeftShoulderEnabled[Index];
		set => _f_SlotLeftShoulderEnabled[Index] = value;
	}
	public System.String f_SlotSkinLeftArmSpriteKey
	{
		get => _f_SlotSkinLeftArmSpriteKey[Index];
		set => _f_SlotSkinLeftArmSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotSkinLeftArmTint
	{
		get => _f_SlotSkinLeftArmTint[Index];
		set => _f_SlotSkinLeftArmTint[Index] = value;
	}
	public System.Boolean f_SlotSkinLeftArmEnabled
	{
		get => _f_SlotSkinLeftArmEnabled[Index];
		set => _f_SlotSkinLeftArmEnabled[Index] = value;
	}
	public System.String f_SlotWeaponSpearSpriteKey
	{
		get => _f_SlotWeaponSpearSpriteKey[Index];
		set => _f_SlotWeaponSpearSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotWeaponSpearTint
	{
		get => _f_SlotWeaponSpearTint[Index];
		set => _f_SlotWeaponSpearTint[Index] = value;
	}
	public System.Boolean f_SlotWeaponSpearEnabled
	{
		get => _f_SlotWeaponSpearEnabled[Index];
		set => _f_SlotWeaponSpearEnabled[Index] = value;
	}
	public System.String f_SlotWeaponSwordSpriteKey
	{
		get => _f_SlotWeaponSwordSpriteKey[Index];
		set => _f_SlotWeaponSwordSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotWeaponSwordTint
	{
		get => _f_SlotWeaponSwordTint[Index];
		set => _f_SlotWeaponSwordTint[Index] = value;
	}
	public System.Boolean f_SlotWeaponSwordEnabled
	{
		get => _f_SlotWeaponSwordEnabled[Index];
		set => _f_SlotWeaponSwordEnabled[Index] = value;
	}
	public System.String f_SlotBowMiddleSpriteKey
	{
		get => _f_SlotBowMiddleSpriteKey[Index];
		set => _f_SlotBowMiddleSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotBowMiddleTint
	{
		get => _f_SlotBowMiddleTint[Index];
		set => _f_SlotBowMiddleTint[Index] = value;
	}
	public System.Boolean f_SlotBowMiddleEnabled
	{
		get => _f_SlotBowMiddleEnabled[Index];
		set => _f_SlotBowMiddleEnabled[Index] = value;
	}
	public System.String f_SlotBowTopSpriteKey
	{
		get => _f_SlotBowTopSpriteKey[Index];
		set => _f_SlotBowTopSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotBowTopTint
	{
		get => _f_SlotBowTopTint[Index];
		set => _f_SlotBowTopTint[Index] = value;
	}
	public System.Boolean f_SlotBowTopEnabled
	{
		get => _f_SlotBowTopEnabled[Index];
		set => _f_SlotBowTopEnabled[Index] = value;
	}
	public System.String f_SlotBowLineTopSpriteKey
	{
		get => _f_SlotBowLineTopSpriteKey[Index];
		set => _f_SlotBowLineTopSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotBowLineTopTint
	{
		get => _f_SlotBowLineTopTint[Index];
		set => _f_SlotBowLineTopTint[Index] = value;
	}
	public System.Boolean f_SlotBowLineTopEnabled
	{
		get => _f_SlotBowLineTopEnabled[Index];
		set => _f_SlotBowLineTopEnabled[Index] = value;
	}
	public System.String f_SlotBowBottomSpriteKey
	{
		get => _f_SlotBowBottomSpriteKey[Index];
		set => _f_SlotBowBottomSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotBowBottomTint
	{
		get => _f_SlotBowBottomTint[Index];
		set => _f_SlotBowBottomTint[Index] = value;
	}
	public System.Boolean f_SlotBowBottomEnabled
	{
		get => _f_SlotBowBottomEnabled[Index];
		set => _f_SlotBowBottomEnabled[Index] = value;
	}
	public System.String f_SlotBowLineBottomSpriteKey
	{
		get => _f_SlotBowLineBottomSpriteKey[Index];
		set => _f_SlotBowLineBottomSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotBowLineBottomTint
	{
		get => _f_SlotBowLineBottomTint[Index];
		set => _f_SlotBowLineBottomTint[Index] = value;
	}
	public System.Boolean f_SlotBowLineBottomEnabled
	{
		get => _f_SlotBowLineBottomEnabled[Index];
		set => _f_SlotBowLineBottomEnabled[Index] = value;
	}
	public System.String f_SlotLeftArmClothSpriteKey
	{
		get => _f_SlotLeftArmClothSpriteKey[Index];
		set => _f_SlotLeftArmClothSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotLeftArmClothTint
	{
		get => _f_SlotLeftArmClothTint[Index];
		set => _f_SlotLeftArmClothTint[Index] = value;
	}
	public System.Boolean f_SlotLeftArmClothEnabled
	{
		get => _f_SlotLeftArmClothEnabled[Index];
		set => _f_SlotLeftArmClothEnabled[Index] = value;
	}
	public System.String f_SlotBeltSpriteKey
	{
		get => _f_SlotBeltSpriteKey[Index];
		set => _f_SlotBeltSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotBeltTint
	{
		get => _f_SlotBeltTint[Index];
		set => _f_SlotBeltTint[Index] = value;
	}
	public System.Boolean f_SlotBeltEnabled
	{
		get => _f_SlotBeltEnabled[Index];
		set => _f_SlotBeltEnabled[Index] = value;
	}
	public System.String f_SlotLeftLegSpriteKey
	{
		get => _f_SlotLeftLegSpriteKey[Index];
		set => _f_SlotLeftLegSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotLeftLegTint
	{
		get => _f_SlotLeftLegTint[Index];
		set => _f_SlotLeftLegTint[Index] = value;
	}
	public System.Boolean f_SlotLeftLegEnabled
	{
		get => _f_SlotLeftLegEnabled[Index];
		set => _f_SlotLeftLegEnabled[Index] = value;
	}
	public System.String f_SlotRightLegSpriteKey
	{
		get => _f_SlotRightLegSpriteKey[Index];
		set => _f_SlotRightLegSpriteKey[Index] = value;
	}
	public UnityEngine.Color f_SlotRightLegTint
	{
		get => _f_SlotRightLegTint[Index];
		set => _f_SlotRightLegTint[Index] = value;
	}
	public System.Boolean f_SlotRightLegEnabled
	{
		get => _f_SlotRightLegEnabled[Index];
		set => _f_SlotRightLegEnabled[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5747305129318046422UL, 8466311968996001153UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotNeckFrontSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotNeckFrontSpriteKey => _ufle12jhs77_f_SlotNeckFrontSpriteKey ?? (_ufle12jhs77_f_SlotNeckFrontSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5342154205522241166UL, 13930982754814050448UL), () => _ufle12jhs77_f_SlotNeckFrontSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotNeckFrontTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotNeckFrontTint => _ufle12jhs77_f_SlotNeckFrontTint ?? (_ufle12jhs77_f_SlotNeckFrontTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5594454117698348811UL, 11808312880583774604UL), () => _ufle12jhs77_f_SlotNeckFrontTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotNeckFrontEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotNeckFrontEnabled => _ufle12jhs77_f_SlotNeckFrontEnabled ?? (_ufle12jhs77_f_SlotNeckFrontEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5142337620564874329UL, 6539911539550214545UL), () => _ufle12jhs77_f_SlotNeckFrontEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotNeckFrontACCSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotNeckFrontACCSpriteKey => _ufle12jhs77_f_SlotNeckFrontACCSpriteKey ?? (_ufle12jhs77_f_SlotNeckFrontACCSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4808165067657194745UL, 3136095969668931979UL), () => _ufle12jhs77_f_SlotNeckFrontACCSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotNeckFrontACCTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotNeckFrontACCTint => _ufle12jhs77_f_SlotNeckFrontACCTint ?? (_ufle12jhs77_f_SlotNeckFrontACCTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5114095798803177497UL, 3805594892821321888UL), () => _ufle12jhs77_f_SlotNeckFrontACCTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotNeckFrontACCEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotNeckFrontACCEnabled => _ufle12jhs77_f_SlotNeckFrontACCEnabled ?? (_ufle12jhs77_f_SlotNeckFrontACCEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5234592825778624923UL, 6524506844228775041UL), () => _ufle12jhs77_f_SlotNeckFrontACCEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotNeckBackSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotNeckBackSpriteKey => _ufle12jhs77_f_SlotNeckBackSpriteKey ?? (_ufle12jhs77_f_SlotNeckBackSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5310330778278163020UL, 18104724647299502231UL), () => _ufle12jhs77_f_SlotNeckBackSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotNeckBackTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotNeckBackTint => _ufle12jhs77_f_SlotNeckBackTint ?? (_ufle12jhs77_f_SlotNeckBackTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5686241032068730460UL, 7474261415342725509UL), () => _ufle12jhs77_f_SlotNeckBackTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotNeckBackEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotNeckBackEnabled => _ufle12jhs77_f_SlotNeckBackEnabled ?? (_ufle12jhs77_f_SlotNeckBackEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5586570577227259578UL, 8769598488268749699UL), () => _ufle12jhs77_f_SlotNeckBackEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotBodySpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotBodySpriteKey => _ufle12jhs77_f_SlotBodySpriteKey ?? (_ufle12jhs77_f_SlotBodySpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4675378968753417014UL, 16002108847809233589UL), () => _ufle12jhs77_f_SlotBodySpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotBodyTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotBodyTint => _ufle12jhs77_f_SlotBodyTint ?? (_ufle12jhs77_f_SlotBodyTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5604497286296686331UL, 16146487369324355732UL), () => _ufle12jhs77_f_SlotBodyTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotBodyEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotBodyEnabled => _ufle12jhs77_f_SlotBodyEnabled ?? (_ufle12jhs77_f_SlotBodyEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5275059473778601417UL, 808450498003499706UL), () => _ufle12jhs77_f_SlotBodyEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotSkinHeadSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotSkinHeadSpriteKey => _ufle12jhs77_f_SlotSkinHeadSpriteKey ?? (_ufle12jhs77_f_SlotSkinHeadSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5045081690899316659UL, 2857714172404572324UL), () => _ufle12jhs77_f_SlotSkinHeadSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotSkinHeadTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotSkinHeadTint => _ufle12jhs77_f_SlotSkinHeadTint ?? (_ufle12jhs77_f_SlotSkinHeadTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5191781931153259743UL, 9933269517855168947UL), () => _ufle12jhs77_f_SlotSkinHeadTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotSkinHeadEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotSkinHeadEnabled => _ufle12jhs77_f_SlotSkinHeadEnabled ?? (_ufle12jhs77_f_SlotSkinHeadEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(4700094984796146797UL, 4494705550477689496UL), () => _ufle12jhs77_f_SlotSkinHeadEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotPaternMiddleSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotPaternMiddleSpriteKey => _ufle12jhs77_f_SlotPaternMiddleSpriteKey ?? (_ufle12jhs77_f_SlotPaternMiddleSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4956587329259206885UL, 13971357755808543138UL), () => _ufle12jhs77_f_SlotPaternMiddleSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotPaternMiddleTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotPaternMiddleTint => _ufle12jhs77_f_SlotPaternMiddleTint ?? (_ufle12jhs77_f_SlotPaternMiddleTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5625049156326012530UL, 3407998057907329196UL), () => _ufle12jhs77_f_SlotPaternMiddleTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotPaternMiddleEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotPaternMiddleEnabled => _ufle12jhs77_f_SlotPaternMiddleEnabled ?? (_ufle12jhs77_f_SlotPaternMiddleEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5230623630422775983UL, 3464322534107001275UL), () => _ufle12jhs77_f_SlotPaternMiddleEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotEyeSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotEyeSpriteKey => _ufle12jhs77_f_SlotEyeSpriteKey ?? (_ufle12jhs77_f_SlotEyeSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5683628167674771563UL, 638668927975989382UL), () => _ufle12jhs77_f_SlotEyeSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotEyeTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotEyeTint => _ufle12jhs77_f_SlotEyeTint ?? (_ufle12jhs77_f_SlotEyeTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5553639539245840265UL, 12818389686349559221UL), () => _ufle12jhs77_f_SlotEyeTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotEyeEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotEyeEnabled => _ufle12jhs77_f_SlotEyeEnabled ?? (_ufle12jhs77_f_SlotEyeEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(4955371675972633959UL, 16011166583717514909UL), () => _ufle12jhs77_f_SlotEyeEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotNoseSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotNoseSpriteKey => _ufle12jhs77_f_SlotNoseSpriteKey ?? (_ufle12jhs77_f_SlotNoseSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5202540373549623968UL, 4239676691774015905UL), () => _ufle12jhs77_f_SlotNoseSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotNoseTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotNoseTint => _ufle12jhs77_f_SlotNoseTint ?? (_ufle12jhs77_f_SlotNoseTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(4860526531426714264UL, 13913433772557307313UL), () => _ufle12jhs77_f_SlotNoseTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotNoseEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotNoseEnabled => _ufle12jhs77_f_SlotNoseEnabled ?? (_ufle12jhs77_f_SlotNoseEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5440128652116132740UL, 16906768101004544698UL), () => _ufle12jhs77_f_SlotNoseEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotGlassesSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotGlassesSpriteKey => _ufle12jhs77_f_SlotGlassesSpriteKey ?? (_ufle12jhs77_f_SlotGlassesSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5611126091102757541UL, 11007713946943992237UL), () => _ufle12jhs77_f_SlotGlassesSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotGlassesTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotGlassesTint => _ufle12jhs77_f_SlotGlassesTint ?? (_ufle12jhs77_f_SlotGlassesTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5210163422560330203UL, 12421276651937107628UL), () => _ufle12jhs77_f_SlotGlassesTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotGlassesEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotGlassesEnabled => _ufle12jhs77_f_SlotGlassesEnabled ?? (_ufle12jhs77_f_SlotGlassesEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(4663310699130088237UL, 13466299638869637518UL), () => _ufle12jhs77_f_SlotGlassesEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotSkinEarSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotSkinEarSpriteKey => _ufle12jhs77_f_SlotSkinEarSpriteKey ?? (_ufle12jhs77_f_SlotSkinEarSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5473361601512076949UL, 12077385727910604712UL), () => _ufle12jhs77_f_SlotSkinEarSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotSkinEarTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotSkinEarTint => _ufle12jhs77_f_SlotSkinEarTint ?? (_ufle12jhs77_f_SlotSkinEarTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5271699409901628976UL, 16998318700298999484UL), () => _ufle12jhs77_f_SlotSkinEarTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotSkinEarEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotSkinEarEnabled => _ufle12jhs77_f_SlotSkinEarEnabled ?? (_ufle12jhs77_f_SlotSkinEarEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5165895466736589214UL, 9609990574138788760UL), () => _ufle12jhs77_f_SlotSkinEarEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotInnerEarSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotInnerEarSpriteKey => _ufle12jhs77_f_SlotInnerEarSpriteKey ?? (_ufle12jhs77_f_SlotInnerEarSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5152987111197157750UL, 2484085589990726036UL), () => _ufle12jhs77_f_SlotInnerEarSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotInnerEarTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotInnerEarTint => _ufle12jhs77_f_SlotInnerEarTint ?? (_ufle12jhs77_f_SlotInnerEarTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5487403816137232637UL, 15972738508677617286UL), () => _ufle12jhs77_f_SlotInnerEarTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotInnerEarEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotInnerEarEnabled => _ufle12jhs77_f_SlotInnerEarEnabled ?? (_ufle12jhs77_f_SlotInnerEarEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(4913277315230529688UL, 7236934104885934506UL), () => _ufle12jhs77_f_SlotInnerEarEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotFrontHatSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotFrontHatSpriteKey => _ufle12jhs77_f_SlotFrontHatSpriteKey ?? (_ufle12jhs77_f_SlotFrontHatSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5295971255536951380UL, 3692568684789114796UL), () => _ufle12jhs77_f_SlotFrontHatSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotFrontHatTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotFrontHatTint => _ufle12jhs77_f_SlotFrontHatTint ?? (_ufle12jhs77_f_SlotFrontHatTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5197429840352786537UL, 1486135354838516367UL), () => _ufle12jhs77_f_SlotFrontHatTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotFrontHatEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotFrontHatEnabled => _ufle12jhs77_f_SlotFrontHatEnabled ?? (_ufle12jhs77_f_SlotFrontHatEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5165580490004435889UL, 13495570108394398118UL), () => _ufle12jhs77_f_SlotFrontHatEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotBackHatSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotBackHatSpriteKey => _ufle12jhs77_f_SlotBackHatSpriteKey ?? (_ufle12jhs77_f_SlotBackHatSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5742236893003748708UL, 3643631270596044731UL), () => _ufle12jhs77_f_SlotBackHatSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotBackHatTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotBackHatTint => _ufle12jhs77_f_SlotBackHatTint ?? (_ufle12jhs77_f_SlotBackHatTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(4910605167854492139UL, 17331458538307527320UL), () => _ufle12jhs77_f_SlotBackHatTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotBackHatEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotBackHatEnabled => _ufle12jhs77_f_SlotBackHatEnabled ?? (_ufle12jhs77_f_SlotBackHatEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(4856348146410613655UL, 11490805503936748678UL), () => _ufle12jhs77_f_SlotBackHatEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotSkinTailSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotSkinTailSpriteKey => _ufle12jhs77_f_SlotSkinTailSpriteKey ?? (_ufle12jhs77_f_SlotSkinTailSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4860169982843799711UL, 143914607497434806UL), () => _ufle12jhs77_f_SlotSkinTailSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotSkinTailTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotSkinTailTint => _ufle12jhs77_f_SlotSkinTailTint ?? (_ufle12jhs77_f_SlotSkinTailTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(4850450920086922990UL, 3089025165612817827UL), () => _ufle12jhs77_f_SlotSkinTailTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotSkinTailEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotSkinTailEnabled => _ufle12jhs77_f_SlotSkinTailEnabled ?? (_ufle12jhs77_f_SlotSkinTailEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5225861280683831170UL, 14406464115147064501UL), () => _ufle12jhs77_f_SlotSkinTailEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotRightShoulderSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotRightShoulderSpriteKey => _ufle12jhs77_f_SlotRightShoulderSpriteKey ?? (_ufle12jhs77_f_SlotRightShoulderSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5196652602564948692UL, 168769067729309355UL), () => _ufle12jhs77_f_SlotRightShoulderSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotRightShoulderTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotRightShoulderTint => _ufle12jhs77_f_SlotRightShoulderTint ?? (_ufle12jhs77_f_SlotRightShoulderTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5375288987494190082UL, 7015149811186069391UL), () => _ufle12jhs77_f_SlotRightShoulderTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotRightShoulderEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotRightShoulderEnabled => _ufle12jhs77_f_SlotRightShoulderEnabled ?? (_ufle12jhs77_f_SlotRightShoulderEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5329414019183589185UL, 13149120598185806251UL), () => _ufle12jhs77_f_SlotRightShoulderEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotSkinRightArmSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotSkinRightArmSpriteKey => _ufle12jhs77_f_SlotSkinRightArmSpriteKey ?? (_ufle12jhs77_f_SlotSkinRightArmSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4968968388175458599UL, 11059346253695968435UL), () => _ufle12jhs77_f_SlotSkinRightArmSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotSkinRightArmTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotSkinRightArmTint => _ufle12jhs77_f_SlotSkinRightArmTint ?? (_ufle12jhs77_f_SlotSkinRightArmTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5060860187883700714UL, 16468495372648908702UL), () => _ufle12jhs77_f_SlotSkinRightArmTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotSkinRightArmEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotSkinRightArmEnabled => _ufle12jhs77_f_SlotSkinRightArmEnabled ?? (_ufle12jhs77_f_SlotSkinRightArmEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5419362321992128108UL, 4938344714039665538UL), () => _ufle12jhs77_f_SlotSkinRightArmEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotRightArmClothSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotRightArmClothSpriteKey => _ufle12jhs77_f_SlotRightArmClothSpriteKey ?? (_ufle12jhs77_f_SlotRightArmClothSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5260369735886034749UL, 14657902238633276061UL), () => _ufle12jhs77_f_SlotRightArmClothSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotRightArmClothTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotRightArmClothTint => _ufle12jhs77_f_SlotRightArmClothTint ?? (_ufle12jhs77_f_SlotRightArmClothTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5080448898210795134UL, 14535030106623077547UL), () => _ufle12jhs77_f_SlotRightArmClothTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotRightArmClothEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotRightArmClothEnabled => _ufle12jhs77_f_SlotRightArmClothEnabled ?? (_ufle12jhs77_f_SlotRightArmClothEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5548260254057144345UL, 14216579542052668595UL), () => _ufle12jhs77_f_SlotRightArmClothEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotWeaponArrowSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotWeaponArrowSpriteKey => _ufle12jhs77_f_SlotWeaponArrowSpriteKey ?? (_ufle12jhs77_f_SlotWeaponArrowSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4619904350930554080UL, 9296504731150432171UL), () => _ufle12jhs77_f_SlotWeaponArrowSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotWeaponArrowTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotWeaponArrowTint => _ufle12jhs77_f_SlotWeaponArrowTint ?? (_ufle12jhs77_f_SlotWeaponArrowTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5434956959963493062UL, 11709133160819472776UL), () => _ufle12jhs77_f_SlotWeaponArrowTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotWeaponArrowEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotWeaponArrowEnabled => _ufle12jhs77_f_SlotWeaponArrowEnabled ?? (_ufle12jhs77_f_SlotWeaponArrowEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5752182729128170678UL, 4883666700323591599UL), () => _ufle12jhs77_f_SlotWeaponArrowEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotLeftShoulderSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotLeftShoulderSpriteKey => _ufle12jhs77_f_SlotLeftShoulderSpriteKey ?? (_ufle12jhs77_f_SlotLeftShoulderSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5520416271617928568UL, 5359441182906725540UL), () => _ufle12jhs77_f_SlotLeftShoulderSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotLeftShoulderTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotLeftShoulderTint => _ufle12jhs77_f_SlotLeftShoulderTint ?? (_ufle12jhs77_f_SlotLeftShoulderTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5582043650781731969UL, 13894852274977707173UL), () => _ufle12jhs77_f_SlotLeftShoulderTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotLeftShoulderEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotLeftShoulderEnabled => _ufle12jhs77_f_SlotLeftShoulderEnabled ?? (_ufle12jhs77_f_SlotLeftShoulderEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5096523682731923879UL, 9108236162243143084UL), () => _ufle12jhs77_f_SlotLeftShoulderEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotSkinLeftArmSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotSkinLeftArmSpriteKey => _ufle12jhs77_f_SlotSkinLeftArmSpriteKey ?? (_ufle12jhs77_f_SlotSkinLeftArmSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5688995310405970622UL, 3665650157229360039UL), () => _ufle12jhs77_f_SlotSkinLeftArmSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotSkinLeftArmTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotSkinLeftArmTint => _ufle12jhs77_f_SlotSkinLeftArmTint ?? (_ufle12jhs77_f_SlotSkinLeftArmTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5677375557910171539UL, 12062650061047603378UL), () => _ufle12jhs77_f_SlotSkinLeftArmTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotSkinLeftArmEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotSkinLeftArmEnabled => _ufle12jhs77_f_SlotSkinLeftArmEnabled ?? (_ufle12jhs77_f_SlotSkinLeftArmEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5549067326041588988UL, 15200354503379809959UL), () => _ufle12jhs77_f_SlotSkinLeftArmEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotWeaponSpearSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotWeaponSpearSpriteKey => _ufle12jhs77_f_SlotWeaponSpearSpriteKey ?? (_ufle12jhs77_f_SlotWeaponSpearSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4758254464454016267UL, 8742066041653418672UL), () => _ufle12jhs77_f_SlotWeaponSpearSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotWeaponSpearTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotWeaponSpearTint => _ufle12jhs77_f_SlotWeaponSpearTint ?? (_ufle12jhs77_f_SlotWeaponSpearTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5124045371773023999UL, 7765352740901182359UL), () => _ufle12jhs77_f_SlotWeaponSpearTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotWeaponSpearEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotWeaponSpearEnabled => _ufle12jhs77_f_SlotWeaponSpearEnabled ?? (_ufle12jhs77_f_SlotWeaponSpearEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5722451678645433723UL, 5849687461890167955UL), () => _ufle12jhs77_f_SlotWeaponSpearEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotWeaponSwordSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotWeaponSwordSpriteKey => _ufle12jhs77_f_SlotWeaponSwordSpriteKey ?? (_ufle12jhs77_f_SlotWeaponSwordSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5326915489184900135UL, 3038763556241998469UL), () => _ufle12jhs77_f_SlotWeaponSwordSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotWeaponSwordTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotWeaponSwordTint => _ufle12jhs77_f_SlotWeaponSwordTint ?? (_ufle12jhs77_f_SlotWeaponSwordTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5646676638720911483UL, 5273979353805177746UL), () => _ufle12jhs77_f_SlotWeaponSwordTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotWeaponSwordEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotWeaponSwordEnabled => _ufle12jhs77_f_SlotWeaponSwordEnabled ?? (_ufle12jhs77_f_SlotWeaponSwordEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5164104306464523575UL, 14042439124967930536UL), () => _ufle12jhs77_f_SlotWeaponSwordEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotBowMiddleSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotBowMiddleSpriteKey => _ufle12jhs77_f_SlotBowMiddleSpriteKey ?? (_ufle12jhs77_f_SlotBowMiddleSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5125582497998935730UL, 7364116511920700548UL), () => _ufle12jhs77_f_SlotBowMiddleSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotBowMiddleTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotBowMiddleTint => _ufle12jhs77_f_SlotBowMiddleTint ?? (_ufle12jhs77_f_SlotBowMiddleTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5762052053831249412UL, 1165404178501390264UL), () => _ufle12jhs77_f_SlotBowMiddleTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotBowMiddleEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotBowMiddleEnabled => _ufle12jhs77_f_SlotBowMiddleEnabled ?? (_ufle12jhs77_f_SlotBowMiddleEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(4674791169328631647UL, 14803745219295018131UL), () => _ufle12jhs77_f_SlotBowMiddleEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotBowTopSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotBowTopSpriteKey => _ufle12jhs77_f_SlotBowTopSpriteKey ?? (_ufle12jhs77_f_SlotBowTopSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5760468201619951525UL, 8412637983701368748UL), () => _ufle12jhs77_f_SlotBowTopSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotBowTopTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotBowTopTint => _ufle12jhs77_f_SlotBowTopTint ?? (_ufle12jhs77_f_SlotBowTopTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5022254376670984582UL, 16238655986351002301UL), () => _ufle12jhs77_f_SlotBowTopTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotBowTopEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotBowTopEnabled => _ufle12jhs77_f_SlotBowTopEnabled ?? (_ufle12jhs77_f_SlotBowTopEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5281289840866382525UL, 9581499864791065791UL), () => _ufle12jhs77_f_SlotBowTopEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotBowLineTopSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotBowLineTopSpriteKey => _ufle12jhs77_f_SlotBowLineTopSpriteKey ?? (_ufle12jhs77_f_SlotBowLineTopSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5720821240389095667UL, 10243884959685060741UL), () => _ufle12jhs77_f_SlotBowLineTopSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotBowLineTopTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotBowLineTopTint => _ufle12jhs77_f_SlotBowLineTopTint ?? (_ufle12jhs77_f_SlotBowLineTopTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(4651744803391427406UL, 15710293484133011846UL), () => _ufle12jhs77_f_SlotBowLineTopTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotBowLineTopEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotBowLineTopEnabled => _ufle12jhs77_f_SlotBowLineTopEnabled ?? (_ufle12jhs77_f_SlotBowLineTopEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5256047647142377031UL, 9552533775897245064UL), () => _ufle12jhs77_f_SlotBowLineTopEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotBowBottomSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotBowBottomSpriteKey => _ufle12jhs77_f_SlotBowBottomSpriteKey ?? (_ufle12jhs77_f_SlotBowBottomSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5210660982191831287UL, 3536583655419933328UL), () => _ufle12jhs77_f_SlotBowBottomSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotBowBottomTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotBowBottomTint => _ufle12jhs77_f_SlotBowBottomTint ?? (_ufle12jhs77_f_SlotBowBottomTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5695310970874742801UL, 7992805168162486710UL), () => _ufle12jhs77_f_SlotBowBottomTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotBowBottomEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotBowBottomEnabled => _ufle12jhs77_f_SlotBowBottomEnabled ?? (_ufle12jhs77_f_SlotBowBottomEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5494017181016639519UL, 6800549545591699082UL), () => _ufle12jhs77_f_SlotBowBottomEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotBowLineBottomSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotBowLineBottomSpriteKey => _ufle12jhs77_f_SlotBowLineBottomSpriteKey ?? (_ufle12jhs77_f_SlotBowLineBottomSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5739707428157334113UL, 16282577590905477020UL), () => _ufle12jhs77_f_SlotBowLineBottomSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotBowLineBottomTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotBowLineBottomTint => _ufle12jhs77_f_SlotBowLineBottomTint ?? (_ufle12jhs77_f_SlotBowLineBottomTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(5478549887373785364UL, 4369075848671391108UL), () => _ufle12jhs77_f_SlotBowLineBottomTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotBowLineBottomEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotBowLineBottomEnabled => _ufle12jhs77_f_SlotBowLineBottomEnabled ?? (_ufle12jhs77_f_SlotBowLineBottomEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5540216510147335296UL, 16625054475258968202UL), () => _ufle12jhs77_f_SlotBowLineBottomEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotLeftArmClothSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotLeftArmClothSpriteKey => _ufle12jhs77_f_SlotLeftArmClothSpriteKey ?? (_ufle12jhs77_f_SlotLeftArmClothSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5752064092952816181UL, 1541707444725087668UL), () => _ufle12jhs77_f_SlotLeftArmClothSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotLeftArmClothTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotLeftArmClothTint => _ufle12jhs77_f_SlotLeftArmClothTint ?? (_ufle12jhs77_f_SlotLeftArmClothTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(4992936914880473424UL, 8915518874716327093UL), () => _ufle12jhs77_f_SlotLeftArmClothTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotLeftArmClothEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotLeftArmClothEnabled => _ufle12jhs77_f_SlotLeftArmClothEnabled ?? (_ufle12jhs77_f_SlotLeftArmClothEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5376580831140095147UL, 11493755996385672586UL), () => _ufle12jhs77_f_SlotLeftArmClothEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotBeltSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotBeltSpriteKey => _ufle12jhs77_f_SlotBeltSpriteKey ?? (_ufle12jhs77_f_SlotBeltSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4882591559488033436UL, 1938104361365437115UL), () => _ufle12jhs77_f_SlotBeltSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotBeltTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotBeltTint => _ufle12jhs77_f_SlotBeltTint ?? (_ufle12jhs77_f_SlotBeltTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(4829955338676346770UL, 13397530570126028986UL), () => _ufle12jhs77_f_SlotBeltTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotBeltEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotBeltEnabled => _ufle12jhs77_f_SlotBeltEnabled ?? (_ufle12jhs77_f_SlotBeltEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5189358813185409705UL, 1827329320327847346UL), () => _ufle12jhs77_f_SlotBeltEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotLeftLegSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotLeftLegSpriteKey => _ufle12jhs77_f_SlotLeftLegSpriteKey ?? (_ufle12jhs77_f_SlotLeftLegSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5613442968508172530UL, 18365747261272792978UL), () => _ufle12jhs77_f_SlotLeftLegSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotLeftLegTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotLeftLegTint => _ufle12jhs77_f_SlotLeftLegTint ?? (_ufle12jhs77_f_SlotLeftLegTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(4791595331704392413UL, 10096749021449120395UL), () => _ufle12jhs77_f_SlotLeftLegTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotLeftLegEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotLeftLegEnabled => _ufle12jhs77_f_SlotLeftLegEnabled ?? (_ufle12jhs77_f_SlotLeftLegEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(4827768753290231820UL, 14584615817013437080UL), () => _ufle12jhs77_f_SlotLeftLegEnabled = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_SlotRightLegSpriteKey;
	public static BansheeGz.BGDatabase.BGFieldString _f_SlotRightLegSpriteKey => _ufle12jhs77_f_SlotRightLegSpriteKey ?? (_ufle12jhs77_f_SlotRightLegSpriteKey = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5097732618701090516UL, 2272466789510784919UL), () => _ufle12jhs77_f_SlotRightLegSpriteKey = null));
	private static BansheeGz.BGDatabase.BGFieldColor _ufle12jhs77_f_SlotRightLegTint;
	public static BansheeGz.BGDatabase.BGFieldColor _f_SlotRightLegTint => _ufle12jhs77_f_SlotRightLegTint ?? (_ufle12jhs77_f_SlotRightLegTint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldColor>(MetaDefault, new BGId(4916857178119155026UL, 11390727439753094018UL), () => _ufle12jhs77_f_SlotRightLegTint = null));
	private static BansheeGz.BGDatabase.BGFieldBool _ufle12jhs77_f_SlotRightLegEnabled;
	public static BansheeGz.BGDatabase.BGFieldBool _f_SlotRightLegEnabled => _ufle12jhs77_f_SlotRightLegEnabled ?? (_ufle12jhs77_f_SlotRightLegEnabled = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldBool>(MetaDefault, new BGId(5624144061850545791UL, 11935806104187325867UL), () => _ufle12jhs77_f_SlotRightLegEnabled = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_UnitAppearanceData() : base(MetaDefault) {}
	private D_UnitAppearanceData(BGId id) : base(MetaDefault, id) {}
	private D_UnitAppearanceData(BGMetaEntity meta) : base(meta) {}
	private D_UnitAppearanceData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_UnitAppearanceData FindEntity(Predicate<D_UnitAppearanceData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_UnitAppearanceData> FindEntities(Predicate<D_UnitAppearanceData> filter, List<D_UnitAppearanceData> result=null, Comparison<D_UnitAppearanceData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_UnitAppearanceData> action, Predicate<D_UnitAppearanceData> filter=null, Comparison<D_UnitAppearanceData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_UnitAppearanceData GetEntity(BGId entityId) => (D_UnitAppearanceData) MetaDefault.GetEntity(entityId);
	public static D_UnitAppearanceData GetEntity(int index) => (D_UnitAppearanceData) MetaDefault[index];
	public static D_UnitAppearanceData GetEntity(string entityName) => (D_UnitAppearanceData) MetaDefault.GetEntity(entityName);
	public static D_UnitAppearanceData NewEntity() => (D_UnitAppearanceData) MetaDefault.NewEntity();
	public static D_UnitAppearanceData NewEntity(BGId entityId) => (D_UnitAppearanceData) MetaDefault.NewEntity(entityId);
	public static D_UnitAppearanceData NewEntity(Action<D_UnitAppearanceData> callback) => (D_UnitAppearanceData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_UnitAppearanceData)entity)));
}

public partial class D_RelicItemData : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new D_RelicItemData(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new D_RelicItemData(meta, id);
	}

	public static class __Names
	{
		public const string Meta = "RelicItemData";
		public const string name = "name";
		public const string grade = "grade";
		public const string description = "description";
		public const string level = "level";
		public const string exp = "exp";
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5404625967158913304UL,837077006495389113UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String f_name
	{
		get => _f_name[Index];
		set => _f_name[Index] = value;
	}
	public BGDatabaseEnum.Grade f_grade
	{
		get => (BGDatabaseEnum.Grade) _f_grade.GetStoredValue(Index);
		set => _f_grade.SetStoredValue(Index, (System.Int32) value);
	}
	public System.String f_description
	{
		get => _f_description[Index];
		set => _f_description[Index] = value;
	}
	public System.Int32 f_level
	{
		get => _f_level[Index];
		set => _f_level[Index] = value;
	}
	public System.Int32 f_exp
	{
		get => _f_exp[Index];
		set => _f_exp[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_f_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _f_name => _ufle12jhs77_f_name ?? (_ufle12jhs77_f_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4834907298664724887UL, 1424096019842688923UL), () => _ufle12jhs77_f_name = null));
	private static BansheeGz.BGDatabase.BGFieldEnum _ufle12jhs77_f_grade;
	public static BansheeGz.BGDatabase.BGFieldEnum _f_grade => _ufle12jhs77_f_grade ?? (_ufle12jhs77_f_grade = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEnum>(MetaDefault, new BGId(5642289905546444568UL, 17886521111471611069UL), () => _ufle12jhs77_f_grade = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_f_description;
	public static BansheeGz.BGDatabase.BGFieldString _f_description => _ufle12jhs77_f_description ?? (_ufle12jhs77_f_description = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4778569268336196462UL, 16451492356158214581UL), () => _ufle12jhs77_f_description = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_level;
	public static BansheeGz.BGDatabase.BGFieldInt _f_level => _ufle12jhs77_f_level ?? (_ufle12jhs77_f_level = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5158353824115660065UL, 12809191595927102853UL), () => _ufle12jhs77_f_level = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_f_exp;
	public static BansheeGz.BGDatabase.BGFieldInt _f_exp => _ufle12jhs77_f_exp ?? (_ufle12jhs77_f_exp = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4822687633761606352UL, 12752998528110767532UL), () => _ufle12jhs77_f_exp = null));
	private static readonly D_TileCardData.Factory _factory0_PFS = new D_TileCardData.Factory();
	private static readonly D_LocalUserData.Factory _factory1_PFS = new D_LocalUserData.Factory();
	private static readonly D_UnitData.Factory _factory2_PFS = new D_UnitData.Factory();
	private static readonly D_unitBuildData.Factory _factory3_PFS = new D_unitBuildData.Factory();
	private static readonly D_UnitShopChanceData.Factory _factory4_PFS = new D_UnitShopChanceData.Factory();
	private static readonly D_ObjectPoolData.Factory _factory5_PFS = new D_ObjectPoolData.Factory();
	private static readonly D_WaveData.Factory _factory6_PFS = new D_WaveData.Factory();
	private static readonly D_StageData.Factory _factory7_PFS = new D_StageData.Factory();
	private static readonly D_EnemyData.Factory _factory8_PFS = new D_EnemyData.Factory();
	private static readonly D_enemyGroup.Factory _factory9_PFS = new D_enemyGroup.Factory();
	private static readonly D_TilePosData.Factory _factory10_PFS = new D_TilePosData.Factory();
	private static readonly D_ObstacleTileMapData.Factory _factory11_PFS = new D_ObstacleTileMapData.Factory();
	private static readonly D_MapData.Factory _factory12_PFS = new D_MapData.Factory();
	private static readonly D_SpecialTile.Factory _factory13_PFS = new D_SpecialTile.Factory();
	private static readonly D_WildCardData.Factory _factory14_PFS = new D_WildCardData.Factory();
	private static readonly D_WaveTimeData.Factory _factory15_PFS = new D_WaveTimeData.Factory();
	private static readonly D_BuffData.Factory _factory16_PFS = new D_BuffData.Factory();
	private static readonly D_buffEffects.Factory _factory17_PFS = new D_buffEffects.Factory();
	private static readonly D_StatSubjectData.Factory _factory18_PFS = new D_StatSubjectData.Factory();
	private static readonly D_subjectStats.Factory _factory19_PFS = new D_subjectStats.Factory();
	private static readonly D_EpisodeData.Factory _factory20_PFS = new D_EpisodeData.Factory();
	private static readonly D_NormalBattleWaveData.Factory _factory21_PFS = new D_NormalBattleWaveData.Factory();
	private static readonly D_BossBattleWaveData.Factory _factory22_PFS = new D_BossBattleWaveData.Factory();
	private static readonly D_WildCardWaveData.Factory _factory23_PFS = new D_WildCardWaveData.Factory();
	private static readonly D_HuntingSelectTimeWaveData.Factory _factory24_PFS = new D_HuntingSelectTimeWaveData.Factory();
	private static readonly D_PrizeHuntingWaveData.Factory _factory25_PFS = new D_PrizeHuntingWaveData.Factory();
	private static readonly D_EventEnemyWaveData.Factory _factory26_PFS = new D_EventEnemyWaveData.Factory();
	private static readonly D_ItemData.Factory _factory27_PFS = new D_ItemData.Factory();
	private static readonly D_HuntingOptionData.Factory _factory28_PFS = new D_HuntingOptionData.Factory();
	private static readonly D_huntingReward.Factory _factory29_PFS = new D_huntingReward.Factory();
	private static readonly D_huntingRisk.Factory _factory30_PFS = new D_huntingRisk.Factory();
	private static readonly D_SpawnEnemyEventData.Factory _factory31_PFS = new D_SpawnEnemyEventData.Factory();
	private static readonly D_DropItemEventData.Factory _factory32_PFS = new D_DropItemEventData.Factory();
	private static readonly D_SpriteData.Factory _factory33_PFS = new D_SpriteData.Factory();
	private static readonly D_DropItemData.Factory _factory34_PFS = new D_DropItemData.Factory();
	private static readonly D_itemList.Factory _factory35_PFS = new D_itemList.Factory();
	private static readonly D_itemStats.Factory _factory36_PFS = new D_itemStats.Factory();
	private static readonly D_EnemyPlacementData.Factory _factory37_PFS = new D_EnemyPlacementData.Factory();
	private static readonly D_cellData.Factory _factory38_PFS = new D_cellData.Factory();
	private static readonly D_UnitAppearanceData.Factory _factory39_PFS = new D_UnitAppearanceData.Factory();
	private static readonly D_RelicItemData.Factory _factory40_PFS = new D_RelicItemData.Factory();
	private D_RelicItemData() : base(MetaDefault) {}
	private D_RelicItemData(BGId id) : base(MetaDefault, id) {}
	private D_RelicItemData(BGMetaEntity meta) : base(meta) {}
	private D_RelicItemData(BGMetaEntity meta, BGId id) : base(meta, id) {}
	public static D_RelicItemData FindEntity(Predicate<D_RelicItemData> filter) => BGCodeGenUtils.FindEntity(MetaDefault, filter);
	public static List<D_RelicItemData> FindEntities(Predicate<D_RelicItemData> filter, List<D_RelicItemData> result=null, Comparison<D_RelicItemData> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<D_RelicItemData> action, Predicate<D_RelicItemData> filter=null, Comparison<D_RelicItemData> sort=null) => BGCodeGenUtils.ForEachEntity(MetaDefault, action, filter, sort);
	public static D_RelicItemData GetEntity(BGId entityId) => (D_RelicItemData) MetaDefault.GetEntity(entityId);
	public static D_RelicItemData GetEntity(int index) => (D_RelicItemData) MetaDefault[index];
	public static D_RelicItemData GetEntity(string entityName) => (D_RelicItemData) MetaDefault.GetEntity(entityName);
	public static D_RelicItemData NewEntity() => (D_RelicItemData) MetaDefault.NewEntity();
	public static D_RelicItemData NewEntity(BGId entityId) => (D_RelicItemData) MetaDefault.NewEntity(entityId);
	public static D_RelicItemData NewEntity(Action<D_RelicItemData> callback) => (D_RelicItemData) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((D_RelicItemData)entity)));
}

public partial interface D_WaveDummyData  : BGAbstractEntityI
{
	System.String f_name {get; set;}
}

public partial interface D_EventDummyData  : BGAbstractEntityI
{
	System.String f_name {get; set;}
	EventTriggerType f_eventTriggerType {get; set;}
}
#pragma warning restore 414
